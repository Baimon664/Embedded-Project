
projectV2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000576c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f4  0800590c  0800590c  0001590c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005a00  08005a00  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08005a00  08005a00  00015a00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005a08  08005a08  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005a08  08005a08  00015a08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005a0c  08005a0c  00015a0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005a10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000044d8  20000074  08005a84  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000454c  08005a84  0002454c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001171f  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002811  00000000  00000000  000317c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000010d8  00000000  00000000  00033fd8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000fa0  00000000  00000000  000350b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017b46  00000000  00000000  00036050  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c597  00000000  00000000  0004db96  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00098ede  00000000  00000000  0005a12d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f300b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004940  00000000  00000000  000f3088  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080058f4 	.word	0x080058f4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	080058f4 	.word	0x080058f4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b972 	b.w	800057c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	4688      	mov	r8, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4615      	mov	r5, r2
 80002c2:	d967      	bls.n	8000394 <__udivmoddi4+0xe4>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0720 	rsb	r7, r2, #32
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	fa20 f707 	lsr.w	r7, r0, r7
 80002d6:	4095      	lsls	r5, r2
 80002d8:	ea47 0803 	orr.w	r8, r7, r3
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002e8:	fa1f fc85 	uxth.w	ip, r5
 80002ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f4:	fb07 f10c 	mul.w	r1, r7, ip
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18eb      	adds	r3, r5, r3
 80002fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000302:	f080 811b 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8118 	bls.w	800053c <__udivmoddi4+0x28c>
 800030c:	3f02      	subs	r7, #2
 800030e:	442b      	add	r3, r5
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0fe 	udiv	r0, r3, lr
 8000318:	fb0e 3310 	mls	r3, lr, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fc0c 	mul.w	ip, r0, ip
 8000324:	45a4      	cmp	ip, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	192c      	adds	r4, r5, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8107 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000332:	45a4      	cmp	ip, r4
 8000334:	f240 8104 	bls.w	8000540 <__udivmoddi4+0x290>
 8000338:	3802      	subs	r0, #2
 800033a:	442c      	add	r4, r5
 800033c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000340:	eba4 040c 	sub.w	r4, r4, ip
 8000344:	2700      	movs	r7, #0
 8000346:	b11e      	cbz	r6, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c6 4300 	strd	r4, r3, [r6]
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0xbe>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80eb 	beq.w	8000536 <__udivmoddi4+0x286>
 8000360:	2700      	movs	r7, #0
 8000362:	e9c6 0100 	strd	r0, r1, [r6]
 8000366:	4638      	mov	r0, r7
 8000368:	4639      	mov	r1, r7
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f783 	clz	r7, r3
 8000372:	2f00      	cmp	r7, #0
 8000374:	d147      	bne.n	8000406 <__udivmoddi4+0x156>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xd0>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80fa 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0303 	sbc.w	r3, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4698      	mov	r8, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e0      	beq.n	8000350 <__udivmoddi4+0xa0>
 800038e:	e9c6 4800 	strd	r4, r8, [r6]
 8000392:	e7dd      	b.n	8000350 <__udivmoddi4+0xa0>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xe8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f282 	clz	r2, r2
 800039c:	2a00      	cmp	r2, #0
 800039e:	f040 808f 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a2:	1b49      	subs	r1, r1, r5
 80003a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a8:	fa1f f885 	uxth.w	r8, r5
 80003ac:	2701      	movs	r7, #1
 80003ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb08 f10c 	mul.w	r1, r8, ip
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c4:	18eb      	adds	r3, r5, r3
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x14c>
 80003ec:	192c      	adds	r4, r5, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x14a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80b6 	bhi.w	8000566 <__udivmoddi4+0x2b6>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e79f      	b.n	8000346 <__udivmoddi4+0x96>
 8000406:	f1c7 0c20 	rsb	ip, r7, #32
 800040a:	40bb      	lsls	r3, r7
 800040c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000410:	ea4e 0e03 	orr.w	lr, lr, r3
 8000414:	fa01 f407 	lsl.w	r4, r1, r7
 8000418:	fa20 f50c 	lsr.w	r5, r0, ip
 800041c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000420:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000424:	4325      	orrs	r5, r4
 8000426:	fbb3 f9f8 	udiv	r9, r3, r8
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	fb08 3319 	mls	r3, r8, r9, r3
 8000430:	fa1f fa8e 	uxth.w	sl, lr
 8000434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000438:	fb09 f40a 	mul.w	r4, r9, sl
 800043c:	429c      	cmp	r4, r3
 800043e:	fa02 f207 	lsl.w	r2, r2, r7
 8000442:	fa00 f107 	lsl.w	r1, r0, r7
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1e 0303 	adds.w	r3, lr, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000450:	f080 8087 	bcs.w	8000562 <__udivmoddi4+0x2b2>
 8000454:	429c      	cmp	r4, r3
 8000456:	f240 8084 	bls.w	8000562 <__udivmoddi4+0x2b2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4473      	add	r3, lr
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	b2ad      	uxth	r5, r5
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3310 	mls	r3, r8, r0, r3
 800046c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000470:	fb00 fa0a 	mul.w	sl, r0, sl
 8000474:	45a2      	cmp	sl, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1e 0404 	adds.w	r4, lr, r4
 800047c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000480:	d26b      	bcs.n	800055a <__udivmoddi4+0x2aa>
 8000482:	45a2      	cmp	sl, r4
 8000484:	d969      	bls.n	800055a <__udivmoddi4+0x2aa>
 8000486:	3802      	subs	r0, #2
 8000488:	4474      	add	r4, lr
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	eba4 040a 	sub.w	r4, r4, sl
 8000496:	454c      	cmp	r4, r9
 8000498:	46c2      	mov	sl, r8
 800049a:	464b      	mov	r3, r9
 800049c:	d354      	bcc.n	8000548 <__udivmoddi4+0x298>
 800049e:	d051      	beq.n	8000544 <__udivmoddi4+0x294>
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d069      	beq.n	8000578 <__udivmoddi4+0x2c8>
 80004a4:	ebb1 050a 	subs.w	r5, r1, sl
 80004a8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b0:	40fd      	lsrs	r5, r7
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	ea4c 0505 	orr.w	r5, ip, r5
 80004b8:	e9c6 5400 	strd	r5, r4, [r6]
 80004bc:	2700      	movs	r7, #0
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0xa0>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f703 	lsr.w	r7, r0, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	fa01 f002 	lsl.w	r0, r1, r2
 80004ce:	fa21 f303 	lsr.w	r3, r1, r3
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	4338      	orrs	r0, r7
 80004d8:	0c01      	lsrs	r1, r0, #16
 80004da:	fbb3 f7fe 	udiv	r7, r3, lr
 80004de:	fa1f f885 	uxth.w	r8, r5
 80004e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb07 f308 	mul.w	r3, r7, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x256>
 80004f6:	1869      	adds	r1, r5, r1
 80004f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004fc:	d22f      	bcs.n	800055e <__udivmoddi4+0x2ae>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d92d      	bls.n	800055e <__udivmoddi4+0x2ae>
 8000502:	3f02      	subs	r7, #2
 8000504:	4429      	add	r1, r5
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	b281      	uxth	r1, r0
 800050a:	fbb3 f0fe 	udiv	r0, r3, lr
 800050e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb00 f308 	mul.w	r3, r0, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x27e>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f100 3cff 	add.w	ip, r0, #4294967295
 8000524:	d217      	bcs.n	8000556 <__udivmoddi4+0x2a6>
 8000526:	428b      	cmp	r3, r1
 8000528:	d915      	bls.n	8000556 <__udivmoddi4+0x2a6>
 800052a:	3802      	subs	r0, #2
 800052c:	4429      	add	r1, r5
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000534:	e73b      	b.n	80003ae <__udivmoddi4+0xfe>
 8000536:	4637      	mov	r7, r6
 8000538:	4630      	mov	r0, r6
 800053a:	e709      	b.n	8000350 <__udivmoddi4+0xa0>
 800053c:	4607      	mov	r7, r0
 800053e:	e6e7      	b.n	8000310 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fb      	b.n	800033c <__udivmoddi4+0x8c>
 8000544:	4541      	cmp	r1, r8
 8000546:	d2ab      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 8000548:	ebb8 0a02 	subs.w	sl, r8, r2
 800054c:	eb69 020e 	sbc.w	r2, r9, lr
 8000550:	3801      	subs	r0, #1
 8000552:	4613      	mov	r3, r2
 8000554:	e7a4      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000556:	4660      	mov	r0, ip
 8000558:	e7e9      	b.n	800052e <__udivmoddi4+0x27e>
 800055a:	4618      	mov	r0, r3
 800055c:	e795      	b.n	800048a <__udivmoddi4+0x1da>
 800055e:	4667      	mov	r7, ip
 8000560:	e7d1      	b.n	8000506 <__udivmoddi4+0x256>
 8000562:	4681      	mov	r9, r0
 8000564:	e77c      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000566:	3802      	subs	r0, #2
 8000568:	442c      	add	r4, r5
 800056a:	e747      	b.n	80003fc <__udivmoddi4+0x14c>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	442b      	add	r3, r5
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	4638      	mov	r0, r7
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xda>
 8000578:	4637      	mov	r7, r6
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0xa0>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000580:	b480      	push	{r7}
 8000582:	b085      	sub	sp, #20
 8000584:	af00      	add	r7, sp, #0
 8000586:	60f8      	str	r0, [r7, #12]
 8000588:	60b9      	str	r1, [r7, #8]
 800058a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	4a07      	ldr	r2, [pc, #28]	; (80005ac <vApplicationGetIdleTaskMemory+0x2c>)
 8000590:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000592:	68bb      	ldr	r3, [r7, #8]
 8000594:	4a06      	ldr	r2, [pc, #24]	; (80005b0 <vApplicationGetIdleTaskMemory+0x30>)
 8000596:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	2280      	movs	r2, #128	; 0x80
 800059c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800059e:	bf00      	nop
 80005a0:	3714      	adds	r7, #20
 80005a2:	46bd      	mov	sp, r7
 80005a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop
 80005ac:	20000090 	.word	0x20000090
 80005b0:	200000e4 	.word	0x200000e4

080005b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b4:	b5b0      	push	{r4, r5, r7, lr}
 80005b6:	b088      	sub	sp, #32
 80005b8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ba:	f000 fd35 	bl	8001028 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005be:	f000 f823 	bl	8000608 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c2:	f000 f9a7 	bl	8000914 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005c6:	f000 f97b 	bl	80008c0 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80005ca:	f000 f94f 	bl	800086c <MX_USART1_UART_Init>
  MX_ADC1_Init();
 80005ce:	f000 f885 	bl	80006dc <MX_ADC1_Init>
  MX_TIM3_Init();
 80005d2:	f000 f8d5 	bl	8000780 <MX_TIM3_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80005d6:	4b0a      	ldr	r3, [pc, #40]	; (8000600 <main+0x4c>)
 80005d8:	1d3c      	adds	r4, r7, #4
 80005da:	461d      	mov	r5, r3
 80005dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005e0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005e4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80005e8:	1d3b      	adds	r3, r7, #4
 80005ea:	2100      	movs	r1, #0
 80005ec:	4618      	mov	r0, r3
 80005ee:	f003 fb2a 	bl	8003c46 <osThreadCreate>
 80005f2:	4602      	mov	r2, r0
 80005f4:	4b03      	ldr	r3, [pc, #12]	; (8000604 <main+0x50>)
 80005f6:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80005f8:	f003 fb1e 	bl	8003c38 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005fc:	e7fe      	b.n	80005fc <main+0x48>
 80005fe:	bf00      	nop
 8000600:	08005918 	.word	0x08005918
 8000604:	20004044 	.word	0x20004044

08000608 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b094      	sub	sp, #80	; 0x50
 800060c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800060e:	f107 0320 	add.w	r3, r7, #32
 8000612:	2230      	movs	r2, #48	; 0x30
 8000614:	2100      	movs	r1, #0
 8000616:	4618      	mov	r0, r3
 8000618:	f004 fd67 	bl	80050ea <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800061c:	f107 030c 	add.w	r3, r7, #12
 8000620:	2200      	movs	r2, #0
 8000622:	601a      	str	r2, [r3, #0]
 8000624:	605a      	str	r2, [r3, #4]
 8000626:	609a      	str	r2, [r3, #8]
 8000628:	60da      	str	r2, [r3, #12]
 800062a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800062c:	2300      	movs	r3, #0
 800062e:	60bb      	str	r3, [r7, #8]
 8000630:	4b28      	ldr	r3, [pc, #160]	; (80006d4 <SystemClock_Config+0xcc>)
 8000632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000634:	4a27      	ldr	r2, [pc, #156]	; (80006d4 <SystemClock_Config+0xcc>)
 8000636:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800063a:	6413      	str	r3, [r2, #64]	; 0x40
 800063c:	4b25      	ldr	r3, [pc, #148]	; (80006d4 <SystemClock_Config+0xcc>)
 800063e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000640:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000644:	60bb      	str	r3, [r7, #8]
 8000646:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000648:	2300      	movs	r3, #0
 800064a:	607b      	str	r3, [r7, #4]
 800064c:	4b22      	ldr	r3, [pc, #136]	; (80006d8 <SystemClock_Config+0xd0>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	4a21      	ldr	r2, [pc, #132]	; (80006d8 <SystemClock_Config+0xd0>)
 8000652:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000656:	6013      	str	r3, [r2, #0]
 8000658:	4b1f      	ldr	r3, [pc, #124]	; (80006d8 <SystemClock_Config+0xd0>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000660:	607b      	str	r3, [r7, #4]
 8000662:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000664:	2302      	movs	r3, #2
 8000666:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000668:	2301      	movs	r3, #1
 800066a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800066c:	2310      	movs	r3, #16
 800066e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000670:	2302      	movs	r3, #2
 8000672:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000674:	2300      	movs	r3, #0
 8000676:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000678:	2310      	movs	r3, #16
 800067a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800067c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000680:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000682:	2304      	movs	r3, #4
 8000684:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000686:	2304      	movs	r3, #4
 8000688:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800068a:	f107 0320 	add.w	r3, r7, #32
 800068e:	4618      	mov	r0, r3
 8000690:	f001 fbbc 	bl	8001e0c <HAL_RCC_OscConfig>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800069a:	f000 fadf 	bl	8000c5c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800069e:	230f      	movs	r3, #15
 80006a0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006a2:	2302      	movs	r3, #2
 80006a4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006a6:	2300      	movs	r3, #0
 80006a8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006ae:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006b0:	2300      	movs	r3, #0
 80006b2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006b4:	f107 030c 	add.w	r3, r7, #12
 80006b8:	2102      	movs	r1, #2
 80006ba:	4618      	mov	r0, r3
 80006bc:	f001 fe16 	bl	80022ec <HAL_RCC_ClockConfig>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006c6:	f000 fac9 	bl	8000c5c <Error_Handler>
  }
}
 80006ca:	bf00      	nop
 80006cc:	3750      	adds	r7, #80	; 0x50
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	40023800 	.word	0x40023800
 80006d8:	40007000 	.word	0x40007000

080006dc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b084      	sub	sp, #16
 80006e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006e2:	463b      	mov	r3, r7
 80006e4:	2200      	movs	r2, #0
 80006e6:	601a      	str	r2, [r3, #0]
 80006e8:	605a      	str	r2, [r3, #4]
 80006ea:	609a      	str	r2, [r3, #8]
 80006ec:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80006ee:	4b21      	ldr	r3, [pc, #132]	; (8000774 <MX_ADC1_Init+0x98>)
 80006f0:	4a21      	ldr	r2, [pc, #132]	; (8000778 <MX_ADC1_Init+0x9c>)
 80006f2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80006f4:	4b1f      	ldr	r3, [pc, #124]	; (8000774 <MX_ADC1_Init+0x98>)
 80006f6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80006fa:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006fc:	4b1d      	ldr	r3, [pc, #116]	; (8000774 <MX_ADC1_Init+0x98>)
 80006fe:	2200      	movs	r2, #0
 8000700:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000702:	4b1c      	ldr	r3, [pc, #112]	; (8000774 <MX_ADC1_Init+0x98>)
 8000704:	2200      	movs	r2, #0
 8000706:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000708:	4b1a      	ldr	r3, [pc, #104]	; (8000774 <MX_ADC1_Init+0x98>)
 800070a:	2200      	movs	r2, #0
 800070c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800070e:	4b19      	ldr	r3, [pc, #100]	; (8000774 <MX_ADC1_Init+0x98>)
 8000710:	2200      	movs	r2, #0
 8000712:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000716:	4b17      	ldr	r3, [pc, #92]	; (8000774 <MX_ADC1_Init+0x98>)
 8000718:	2200      	movs	r2, #0
 800071a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800071c:	4b15      	ldr	r3, [pc, #84]	; (8000774 <MX_ADC1_Init+0x98>)
 800071e:	4a17      	ldr	r2, [pc, #92]	; (800077c <MX_ADC1_Init+0xa0>)
 8000720:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000722:	4b14      	ldr	r3, [pc, #80]	; (8000774 <MX_ADC1_Init+0x98>)
 8000724:	2200      	movs	r2, #0
 8000726:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000728:	4b12      	ldr	r3, [pc, #72]	; (8000774 <MX_ADC1_Init+0x98>)
 800072a:	2201      	movs	r2, #1
 800072c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800072e:	4b11      	ldr	r3, [pc, #68]	; (8000774 <MX_ADC1_Init+0x98>)
 8000730:	2200      	movs	r2, #0
 8000732:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000736:	4b0f      	ldr	r3, [pc, #60]	; (8000774 <MX_ADC1_Init+0x98>)
 8000738:	2201      	movs	r2, #1
 800073a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800073c:	480d      	ldr	r0, [pc, #52]	; (8000774 <MX_ADC1_Init+0x98>)
 800073e:	f000 fd07 	bl	8001150 <HAL_ADC_Init>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d001      	beq.n	800074c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000748:	f000 fa88 	bl	8000c5c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800074c:	2300      	movs	r3, #0
 800074e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000750:	2301      	movs	r3, #1
 8000752:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000754:	2300      	movs	r3, #0
 8000756:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000758:	463b      	mov	r3, r7
 800075a:	4619      	mov	r1, r3
 800075c:	4805      	ldr	r0, [pc, #20]	; (8000774 <MX_ADC1_Init+0x98>)
 800075e:	f000 fe73 	bl	8001448 <HAL_ADC_ConfigChannel>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d001      	beq.n	800076c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000768:	f000 fa78 	bl	8000c5c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800076c:	bf00      	nop
 800076e:	3710      	adds	r7, #16
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}
 8000774:	20004090 	.word	0x20004090
 8000778:	40012000 	.word	0x40012000
 800077c:	0f000001 	.word	0x0f000001

08000780 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b08e      	sub	sp, #56	; 0x38
 8000784:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000786:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800078a:	2200      	movs	r2, #0
 800078c:	601a      	str	r2, [r3, #0]
 800078e:	605a      	str	r2, [r3, #4]
 8000790:	609a      	str	r2, [r3, #8]
 8000792:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000794:	f107 0320 	add.w	r3, r7, #32
 8000798:	2200      	movs	r2, #0
 800079a:	601a      	str	r2, [r3, #0]
 800079c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800079e:	1d3b      	adds	r3, r7, #4
 80007a0:	2200      	movs	r2, #0
 80007a2:	601a      	str	r2, [r3, #0]
 80007a4:	605a      	str	r2, [r3, #4]
 80007a6:	609a      	str	r2, [r3, #8]
 80007a8:	60da      	str	r2, [r3, #12]
 80007aa:	611a      	str	r2, [r3, #16]
 80007ac:	615a      	str	r2, [r3, #20]
 80007ae:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80007b0:	4b2c      	ldr	r3, [pc, #176]	; (8000864 <MX_TIM3_Init+0xe4>)
 80007b2:	4a2d      	ldr	r2, [pc, #180]	; (8000868 <MX_TIM3_Init+0xe8>)
 80007b4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 83;
 80007b6:	4b2b      	ldr	r3, [pc, #172]	; (8000864 <MX_TIM3_Init+0xe4>)
 80007b8:	2253      	movs	r2, #83	; 0x53
 80007ba:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007bc:	4b29      	ldr	r3, [pc, #164]	; (8000864 <MX_TIM3_Init+0xe4>)
 80007be:	2200      	movs	r2, #0
 80007c0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 80007c2:	4b28      	ldr	r3, [pc, #160]	; (8000864 <MX_TIM3_Init+0xe4>)
 80007c4:	2263      	movs	r2, #99	; 0x63
 80007c6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007c8:	4b26      	ldr	r3, [pc, #152]	; (8000864 <MX_TIM3_Init+0xe4>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007ce:	4b25      	ldr	r3, [pc, #148]	; (8000864 <MX_TIM3_Init+0xe4>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80007d4:	4823      	ldr	r0, [pc, #140]	; (8000864 <MX_TIM3_Init+0xe4>)
 80007d6:	f001 ff7b 	bl	80026d0 <HAL_TIM_Base_Init>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d001      	beq.n	80007e4 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 80007e0:	f000 fa3c 	bl	8000c5c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007e8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80007ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007ee:	4619      	mov	r1, r3
 80007f0:	481c      	ldr	r0, [pc, #112]	; (8000864 <MX_TIM3_Init+0xe4>)
 80007f2:	f002 f8c5 	bl	8002980 <HAL_TIM_ConfigClockSource>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 80007fc:	f000 fa2e 	bl	8000c5c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000800:	4818      	ldr	r0, [pc, #96]	; (8000864 <MX_TIM3_Init+0xe4>)
 8000802:	f001 ff90 	bl	8002726 <HAL_TIM_PWM_Init>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d001      	beq.n	8000810 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 800080c:	f000 fa26 	bl	8000c5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000810:	2300      	movs	r3, #0
 8000812:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000814:	2300      	movs	r3, #0
 8000816:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000818:	f107 0320 	add.w	r3, r7, #32
 800081c:	4619      	mov	r1, r3
 800081e:	4811      	ldr	r0, [pc, #68]	; (8000864 <MX_TIM3_Init+0xe4>)
 8000820:	f002 fc32 	bl	8003088 <HAL_TIMEx_MasterConfigSynchronization>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 800082a:	f000 fa17 	bl	8000c5c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800082e:	2360      	movs	r3, #96	; 0x60
 8000830:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000832:	2300      	movs	r3, #0
 8000834:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000836:	2300      	movs	r3, #0
 8000838:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800083a:	2300      	movs	r3, #0
 800083c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800083e:	1d3b      	adds	r3, r7, #4
 8000840:	2200      	movs	r2, #0
 8000842:	4619      	mov	r1, r3
 8000844:	4807      	ldr	r0, [pc, #28]	; (8000864 <MX_TIM3_Init+0xe4>)
 8000846:	f001 ffd5 	bl	80027f4 <HAL_TIM_PWM_ConfigChannel>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8000850:	f000 fa04 	bl	8000c5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000854:	4803      	ldr	r0, [pc, #12]	; (8000864 <MX_TIM3_Init+0xe4>)
 8000856:	f000 fa97 	bl	8000d88 <HAL_TIM_MspPostInit>

}
 800085a:	bf00      	nop
 800085c:	3738      	adds	r7, #56	; 0x38
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	20004050 	.word	0x20004050
 8000868:	40000400 	.word	0x40000400

0800086c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000870:	4b11      	ldr	r3, [pc, #68]	; (80008b8 <MX_USART1_UART_Init+0x4c>)
 8000872:	4a12      	ldr	r2, [pc, #72]	; (80008bc <MX_USART1_UART_Init+0x50>)
 8000874:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000876:	4b10      	ldr	r3, [pc, #64]	; (80008b8 <MX_USART1_UART_Init+0x4c>)
 8000878:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800087c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800087e:	4b0e      	ldr	r3, [pc, #56]	; (80008b8 <MX_USART1_UART_Init+0x4c>)
 8000880:	2200      	movs	r2, #0
 8000882:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000884:	4b0c      	ldr	r3, [pc, #48]	; (80008b8 <MX_USART1_UART_Init+0x4c>)
 8000886:	2200      	movs	r2, #0
 8000888:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800088a:	4b0b      	ldr	r3, [pc, #44]	; (80008b8 <MX_USART1_UART_Init+0x4c>)
 800088c:	2200      	movs	r2, #0
 800088e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000890:	4b09      	ldr	r3, [pc, #36]	; (80008b8 <MX_USART1_UART_Init+0x4c>)
 8000892:	220c      	movs	r2, #12
 8000894:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000896:	4b08      	ldr	r3, [pc, #32]	; (80008b8 <MX_USART1_UART_Init+0x4c>)
 8000898:	2200      	movs	r2, #0
 800089a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800089c:	4b06      	ldr	r3, [pc, #24]	; (80008b8 <MX_USART1_UART_Init+0x4c>)
 800089e:	2200      	movs	r2, #0
 80008a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80008a2:	4805      	ldr	r0, [pc, #20]	; (80008b8 <MX_USART1_UART_Init+0x4c>)
 80008a4:	f002 fc5e 	bl	8003164 <HAL_UART_Init>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80008ae:	f000 f9d5 	bl	8000c5c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80008b2:	bf00      	nop
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	200040d8 	.word	0x200040d8
 80008bc:	40011000 	.word	0x40011000

080008c0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008c4:	4b11      	ldr	r3, [pc, #68]	; (800090c <MX_USART2_UART_Init+0x4c>)
 80008c6:	4a12      	ldr	r2, [pc, #72]	; (8000910 <MX_USART2_UART_Init+0x50>)
 80008c8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008ca:	4b10      	ldr	r3, [pc, #64]	; (800090c <MX_USART2_UART_Init+0x4c>)
 80008cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008d0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008d2:	4b0e      	ldr	r3, [pc, #56]	; (800090c <MX_USART2_UART_Init+0x4c>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008d8:	4b0c      	ldr	r3, [pc, #48]	; (800090c <MX_USART2_UART_Init+0x4c>)
 80008da:	2200      	movs	r2, #0
 80008dc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008de:	4b0b      	ldr	r3, [pc, #44]	; (800090c <MX_USART2_UART_Init+0x4c>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008e4:	4b09      	ldr	r3, [pc, #36]	; (800090c <MX_USART2_UART_Init+0x4c>)
 80008e6:	220c      	movs	r2, #12
 80008e8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008ea:	4b08      	ldr	r3, [pc, #32]	; (800090c <MX_USART2_UART_Init+0x4c>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008f0:	4b06      	ldr	r3, [pc, #24]	; (800090c <MX_USART2_UART_Init+0x4c>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008f6:	4805      	ldr	r0, [pc, #20]	; (800090c <MX_USART2_UART_Init+0x4c>)
 80008f8:	f002 fc34 	bl	8003164 <HAL_UART_Init>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000902:	f000 f9ab 	bl	8000c5c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000906:	bf00      	nop
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	20004118 	.word	0x20004118
 8000910:	40004400 	.word	0x40004400

08000914 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b08a      	sub	sp, #40	; 0x28
 8000918:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800091a:	f107 0314 	add.w	r3, r7, #20
 800091e:	2200      	movs	r2, #0
 8000920:	601a      	str	r2, [r3, #0]
 8000922:	605a      	str	r2, [r3, #4]
 8000924:	609a      	str	r2, [r3, #8]
 8000926:	60da      	str	r2, [r3, #12]
 8000928:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800092a:	2300      	movs	r3, #0
 800092c:	613b      	str	r3, [r7, #16]
 800092e:	4b2d      	ldr	r3, [pc, #180]	; (80009e4 <MX_GPIO_Init+0xd0>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000932:	4a2c      	ldr	r2, [pc, #176]	; (80009e4 <MX_GPIO_Init+0xd0>)
 8000934:	f043 0304 	orr.w	r3, r3, #4
 8000938:	6313      	str	r3, [r2, #48]	; 0x30
 800093a:	4b2a      	ldr	r3, [pc, #168]	; (80009e4 <MX_GPIO_Init+0xd0>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093e:	f003 0304 	and.w	r3, r3, #4
 8000942:	613b      	str	r3, [r7, #16]
 8000944:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000946:	2300      	movs	r3, #0
 8000948:	60fb      	str	r3, [r7, #12]
 800094a:	4b26      	ldr	r3, [pc, #152]	; (80009e4 <MX_GPIO_Init+0xd0>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094e:	4a25      	ldr	r2, [pc, #148]	; (80009e4 <MX_GPIO_Init+0xd0>)
 8000950:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000954:	6313      	str	r3, [r2, #48]	; 0x30
 8000956:	4b23      	ldr	r3, [pc, #140]	; (80009e4 <MX_GPIO_Init+0xd0>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800095e:	60fb      	str	r3, [r7, #12]
 8000960:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000962:	2300      	movs	r3, #0
 8000964:	60bb      	str	r3, [r7, #8]
 8000966:	4b1f      	ldr	r3, [pc, #124]	; (80009e4 <MX_GPIO_Init+0xd0>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096a:	4a1e      	ldr	r2, [pc, #120]	; (80009e4 <MX_GPIO_Init+0xd0>)
 800096c:	f043 0301 	orr.w	r3, r3, #1
 8000970:	6313      	str	r3, [r2, #48]	; 0x30
 8000972:	4b1c      	ldr	r3, [pc, #112]	; (80009e4 <MX_GPIO_Init+0xd0>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000976:	f003 0301 	and.w	r3, r3, #1
 800097a:	60bb      	str	r3, [r7, #8]
 800097c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800097e:	2300      	movs	r3, #0
 8000980:	607b      	str	r3, [r7, #4]
 8000982:	4b18      	ldr	r3, [pc, #96]	; (80009e4 <MX_GPIO_Init+0xd0>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000986:	4a17      	ldr	r2, [pc, #92]	; (80009e4 <MX_GPIO_Init+0xd0>)
 8000988:	f043 0302 	orr.w	r3, r3, #2
 800098c:	6313      	str	r3, [r2, #48]	; 0x30
 800098e:	4b15      	ldr	r3, [pc, #84]	; (80009e4 <MX_GPIO_Init+0xd0>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000992:	f003 0302 	and.w	r3, r3, #2
 8000996:	607b      	str	r3, [r7, #4]
 8000998:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|ExLed_Pin, GPIO_PIN_RESET);
 800099a:	2200      	movs	r2, #0
 800099c:	21a0      	movs	r1, #160	; 0xa0
 800099e:	4812      	ldr	r0, [pc, #72]	; (80009e8 <MX_GPIO_Init+0xd4>)
 80009a0:	f001 fa00 	bl	8001da4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80009aa:	4b10      	ldr	r3, [pc, #64]	; (80009ec <MX_GPIO_Init+0xd8>)
 80009ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ae:	2300      	movs	r3, #0
 80009b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009b2:	f107 0314 	add.w	r3, r7, #20
 80009b6:	4619      	mov	r1, r3
 80009b8:	480d      	ldr	r0, [pc, #52]	; (80009f0 <MX_GPIO_Init+0xdc>)
 80009ba:	f001 f859 	bl	8001a70 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin ExLed_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|ExLed_Pin;
 80009be:	23a0      	movs	r3, #160	; 0xa0
 80009c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009c2:	2301      	movs	r3, #1
 80009c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c6:	2300      	movs	r3, #0
 80009c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ca:	2300      	movs	r3, #0
 80009cc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ce:	f107 0314 	add.w	r3, r7, #20
 80009d2:	4619      	mov	r1, r3
 80009d4:	4804      	ldr	r0, [pc, #16]	; (80009e8 <MX_GPIO_Init+0xd4>)
 80009d6:	f001 f84b 	bl	8001a70 <HAL_GPIO_Init>

}
 80009da:	bf00      	nop
 80009dc:	3728      	adds	r7, #40	; 0x28
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	40023800 	.word	0x40023800
 80009e8:	40020000 	.word	0x40020000
 80009ec:	10210000 	.word	0x10210000
 80009f0:	40020800 	.word	0x40020800

080009f4 <TransmittedThread>:

/* USER CODE BEGIN 4 */
void TransmittedThread(void const * argument){
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b084      	sub	sp, #16
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
	char c = 'n';
 80009fc:	236e      	movs	r3, #110	; 0x6e
 80009fe:	73fb      	strb	r3, [r7, #15]
	char d = 'f';
 8000a00:	2366      	movs	r3, #102	; 0x66
 8000a02:	73bb      	strb	r3, [r7, #14]
	char e = 'e';
 8000a04:	2365      	movs	r3, #101	; 0x65
 8000a06:	737b      	strb	r3, [r7, #13]
	char k = 'k';
 8000a08:	236b      	movs	r3, #107	; 0x6b
 8000a0a:	733b      	strb	r3, [r7, #12]
	for(;;){
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7) == 0 && enablemic==0){
 8000a0c:	2180      	movs	r1, #128	; 0x80
 8000a0e:	4825      	ldr	r0, [pc, #148]	; (8000aa4 <TransmittedThread+0xb0>)
 8000a10:	f001 f9b0 	bl	8001d74 <HAL_GPIO_ReadPin>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d10b      	bne.n	8000a32 <TransmittedThread+0x3e>
 8000a1a:	4b23      	ldr	r3, [pc, #140]	; (8000aa8 <TransmittedThread+0xb4>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d107      	bne.n	8000a32 <TransmittedThread+0x3e>
			HAL_UART_Transmit(&huart1, &d, 1, 100);
 8000a22:	f107 010e 	add.w	r1, r7, #14
 8000a26:	2364      	movs	r3, #100	; 0x64
 8000a28:	2201      	movs	r2, #1
 8000a2a:	4820      	ldr	r0, [pc, #128]	; (8000aac <TransmittedThread+0xb8>)
 8000a2c:	f002 fbe7 	bl	80031fe <HAL_UART_Transmit>
 8000a30:	e037      	b.n	8000aa2 <TransmittedThread+0xae>
			//HAL_UART_Transmit(&huart2, &d, 1, 100);
		}
		else if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7) == 1 && enablemic==0){
 8000a32:	2180      	movs	r1, #128	; 0x80
 8000a34:	481b      	ldr	r0, [pc, #108]	; (8000aa4 <TransmittedThread+0xb0>)
 8000a36:	f001 f99d 	bl	8001d74 <HAL_GPIO_ReadPin>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b01      	cmp	r3, #1
 8000a3e:	d10b      	bne.n	8000a58 <TransmittedThread+0x64>
 8000a40:	4b19      	ldr	r3, [pc, #100]	; (8000aa8 <TransmittedThread+0xb4>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d107      	bne.n	8000a58 <TransmittedThread+0x64>
			HAL_UART_Transmit(&huart1, &c, 1, 100);
 8000a48:	f107 010f 	add.w	r1, r7, #15
 8000a4c:	2364      	movs	r3, #100	; 0x64
 8000a4e:	2201      	movs	r2, #1
 8000a50:	4816      	ldr	r0, [pc, #88]	; (8000aac <TransmittedThread+0xb8>)
 8000a52:	f002 fbd4 	bl	80031fe <HAL_UART_Transmit>
 8000a56:	e024      	b.n	8000aa2 <TransmittedThread+0xae>
			//HAL_UART_Transmit(&huart2, &c, 1, 100);
		}
		else if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7) == 0 && enablemic==1){
 8000a58:	2180      	movs	r1, #128	; 0x80
 8000a5a:	4812      	ldr	r0, [pc, #72]	; (8000aa4 <TransmittedThread+0xb0>)
 8000a5c:	f001 f98a 	bl	8001d74 <HAL_GPIO_ReadPin>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d10b      	bne.n	8000a7e <TransmittedThread+0x8a>
 8000a66:	4b10      	ldr	r3, [pc, #64]	; (8000aa8 <TransmittedThread+0xb4>)
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	2b01      	cmp	r3, #1
 8000a6c:	d107      	bne.n	8000a7e <TransmittedThread+0x8a>
			HAL_UART_Transmit(&huart1, &e, 1, 100);
 8000a6e:	f107 010d 	add.w	r1, r7, #13
 8000a72:	2364      	movs	r3, #100	; 0x64
 8000a74:	2201      	movs	r2, #1
 8000a76:	480d      	ldr	r0, [pc, #52]	; (8000aac <TransmittedThread+0xb8>)
 8000a78:	f002 fbc1 	bl	80031fe <HAL_UART_Transmit>
 8000a7c:	e011      	b.n	8000aa2 <TransmittedThread+0xae>
			//HAL_UART_Transmit(&huart2, &e, 1, 100);
		}
		else if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7) == 1 && enablemic==1){
 8000a7e:	2180      	movs	r1, #128	; 0x80
 8000a80:	4808      	ldr	r0, [pc, #32]	; (8000aa4 <TransmittedThread+0xb0>)
 8000a82:	f001 f977 	bl	8001d74 <HAL_GPIO_ReadPin>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b01      	cmp	r3, #1
 8000a8a:	d1bf      	bne.n	8000a0c <TransmittedThread+0x18>
 8000a8c:	4b06      	ldr	r3, [pc, #24]	; (8000aa8 <TransmittedThread+0xb4>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	2b01      	cmp	r3, #1
 8000a92:	d1bb      	bne.n	8000a0c <TransmittedThread+0x18>
			HAL_UART_Transmit(&huart1, &k, 1, 100);
 8000a94:	f107 010c 	add.w	r1, r7, #12
 8000a98:	2364      	movs	r3, #100	; 0x64
 8000a9a:	2201      	movs	r2, #1
 8000a9c:	4803      	ldr	r0, [pc, #12]	; (8000aac <TransmittedThread+0xb8>)
 8000a9e:	f002 fbae 	bl	80031fe <HAL_UART_Transmit>
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7) == 0 && enablemic==0){
 8000aa2:	e7b3      	b.n	8000a0c <TransmittedThread+0x18>
 8000aa4:	40020000 	.word	0x40020000
 8000aa8:	200002e8 	.word	0x200002e8
 8000aac:	200040d8 	.word	0x200040d8

08000ab0 <ToggleThread>:
			//HAL_UART_Transmit(&huart2, &k, 1, 100);
		}
	}
}

void ToggleThread(void const * argument){
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b084      	sub	sp, #16
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000ab8:	2100      	movs	r1, #0
 8000aba:	481a      	ldr	r0, [pc, #104]	; (8000b24 <ToggleThread+0x74>)
 8000abc:	f001 fe68 	bl	8002790 <HAL_TIM_PWM_Start>
	HAL_ADC_Start(&hadc1);
 8000ac0:	4819      	ldr	r0, [pc, #100]	; (8000b28 <ToggleThread+0x78>)
 8000ac2:	f000 fb89 	bl	80011d8 <HAL_ADC_Start>
	int mem=0;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8000aca:	2200      	movs	r2, #0
 8000acc:	2180      	movs	r1, #128	; 0x80
 8000ace:	4817      	ldr	r0, [pc, #92]	; (8000b2c <ToggleThread+0x7c>)
 8000ad0:	f001 f968 	bl	8001da4 <HAL_GPIO_WritePin>
	//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
	for(;;){

		HAL_ADC_Start(&hadc1);
 8000ad4:	4814      	ldr	r0, [pc, #80]	; (8000b28 <ToggleThread+0x78>)
 8000ad6:	f000 fb7f 	bl	80011d8 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, 1);
 8000ada:	2101      	movs	r1, #1
 8000adc:	4812      	ldr	r0, [pc, #72]	; (8000b28 <ToggleThread+0x78>)
 8000ade:	f000 fc21 	bl	8001324 <HAL_ADC_PollForConversion>
		AD_RES = HAL_ADC_GetValue(&hadc1);
 8000ae2:	4811      	ldr	r0, [pc, #68]	; (8000b28 <ToggleThread+0x78>)
 8000ae4:	f000 fca2 	bl	800142c <HAL_ADC_GetValue>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	b29a      	uxth	r2, r3
 8000aec:	4b10      	ldr	r3, [pc, #64]	; (8000b30 <ToggleThread+0x80>)
 8000aee:	801a      	strh	r2, [r3, #0]
		sprintf(a,"%d\n\r",AD_RES);
 8000af0:	4b0f      	ldr	r3, [pc, #60]	; (8000b30 <ToggleThread+0x80>)
 8000af2:	881b      	ldrh	r3, [r3, #0]
 8000af4:	461a      	mov	r2, r3
 8000af6:	490f      	ldr	r1, [pc, #60]	; (8000b34 <ToggleThread+0x84>)
 8000af8:	480f      	ldr	r0, [pc, #60]	; (8000b38 <ToggleThread+0x88>)
 8000afa:	f004 faff 	bl	80050fc <siprintf>
		//HAL_UART_Transmit(&huart2,a,strlen(a),1000);
		if(enablemic == 0 && AD_RES >= 4000){
 8000afe:	4b0f      	ldr	r3, [pc, #60]	; (8000b3c <ToggleThread+0x8c>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d1e6      	bne.n	8000ad4 <ToggleThread+0x24>
 8000b06:	4b0a      	ldr	r3, [pc, #40]	; (8000b30 <ToggleThread+0x80>)
 8000b08:	881b      	ldrh	r3, [r3, #0]
 8000b0a:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8000b0e:	d3e1      	bcc.n	8000ad4 <ToggleThread+0x24>
			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_7);
 8000b10:	2180      	movs	r1, #128	; 0x80
 8000b12:	4806      	ldr	r0, [pc, #24]	; (8000b2c <ToggleThread+0x7c>)
 8000b14:	f001 f95f 	bl	8001dd6 <HAL_GPIO_TogglePin>
			//HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
			HAL_Delay(500);
 8000b18:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b1c:	f000 faf6 	bl	800110c <HAL_Delay>
	for(;;){
 8000b20:	e7d8      	b.n	8000ad4 <ToggleThread+0x24>
 8000b22:	bf00      	nop
 8000b24:	20004050 	.word	0x20004050
 8000b28:	20004090 	.word	0x20004090
 8000b2c:	40020000 	.word	0x40020000
 8000b30:	200002e4 	.word	0x200002e4
 8000b34:	08005934 	.word	0x08005934
 8000b38:	20004158 	.word	0x20004158
 8000b3c:	200002e8 	.word	0x200002e8

08000b40 <ReceiveThread>:
		}

	}
}

void ReceiveThread(void const * argument){
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b084      	sub	sp, #16
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
	char x='x';
 8000b48:	2378      	movs	r3, #120	; 0x78
 8000b4a:	73fb      	strb	r3, [r7, #15]
	for(;;){
		if(HAL_UART_Receive(&huart1, &x, 1, 100) == HAL_OK){
 8000b4c:	f107 010f 	add.w	r1, r7, #15
 8000b50:	2364      	movs	r3, #100	; 0x64
 8000b52:	2201      	movs	r2, #1
 8000b54:	4816      	ldr	r0, [pc, #88]	; (8000bb0 <ReceiveThread+0x70>)
 8000b56:	f002 fbeb 	bl	8003330 <HAL_UART_Receive>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d1f5      	bne.n	8000b4c <ReceiveThread+0xc>
			if(x=='p'){
 8000b60:	7bfb      	ldrb	r3, [r7, #15]
 8000b62:	2b70      	cmp	r3, #112	; 0x70
 8000b64:	d105      	bne.n	8000b72 <ReceiveThread+0x32>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 8000b66:	2201      	movs	r2, #1
 8000b68:	2180      	movs	r1, #128	; 0x80
 8000b6a:	4812      	ldr	r0, [pc, #72]	; (8000bb4 <ReceiveThread+0x74>)
 8000b6c:	f001 f91a 	bl	8001da4 <HAL_GPIO_WritePin>
 8000b70:	e015      	b.n	8000b9e <ReceiveThread+0x5e>
			}
			else if(x=='u'){
 8000b72:	7bfb      	ldrb	r3, [r7, #15]
 8000b74:	2b75      	cmp	r3, #117	; 0x75
 8000b76:	d105      	bne.n	8000b84 <ReceiveThread+0x44>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8000b78:	2200      	movs	r2, #0
 8000b7a:	2180      	movs	r1, #128	; 0x80
 8000b7c:	480d      	ldr	r0, [pc, #52]	; (8000bb4 <ReceiveThread+0x74>)
 8000b7e:	f001 f911 	bl	8001da4 <HAL_GPIO_WritePin>
 8000b82:	e00c      	b.n	8000b9e <ReceiveThread+0x5e>
			}
			else if(x=='j'){
 8000b84:	7bfb      	ldrb	r3, [r7, #15]
 8000b86:	2b6a      	cmp	r3, #106	; 0x6a
 8000b88:	d103      	bne.n	8000b92 <ReceiveThread+0x52>
				enablemic = 1;
 8000b8a:	4b0b      	ldr	r3, [pc, #44]	; (8000bb8 <ReceiveThread+0x78>)
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	601a      	str	r2, [r3, #0]
 8000b90:	e005      	b.n	8000b9e <ReceiveThread+0x5e>
			}
			else if(x=='i'){
 8000b92:	7bfb      	ldrb	r3, [r7, #15]
 8000b94:	2b69      	cmp	r3, #105	; 0x69
 8000b96:	d102      	bne.n	8000b9e <ReceiveThread+0x5e>
				enablemic = 0;
 8000b98:	4b07      	ldr	r3, [pc, #28]	; (8000bb8 <ReceiveThread+0x78>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	601a      	str	r2, [r3, #0]
			}
			HAL_UART_Transmit(&huart2, &x, 1, 100);
 8000b9e:	f107 010f 	add.w	r1, r7, #15
 8000ba2:	2364      	movs	r3, #100	; 0x64
 8000ba4:	2201      	movs	r2, #1
 8000ba6:	4805      	ldr	r0, [pc, #20]	; (8000bbc <ReceiveThread+0x7c>)
 8000ba8:	f002 fb29 	bl	80031fe <HAL_UART_Transmit>
		if(HAL_UART_Receive(&huart1, &x, 1, 100) == HAL_OK){
 8000bac:	e7ce      	b.n	8000b4c <ReceiveThread+0xc>
 8000bae:	bf00      	nop
 8000bb0:	200040d8 	.word	0x200040d8
 8000bb4:	40020000 	.word	0x40020000
 8000bb8:	200002e8 	.word	0x200002e8
 8000bbc:	20004118 	.word	0x20004118

08000bc0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000bc0:	b5b0      	push	{r4, r5, r7, lr}
 8000bc2:	b098      	sub	sp, #96	; 0x60
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	 osThreadDef(transmit, TransmittedThread, osPriorityNormal, 0, 128);
 8000bc8:	4b1e      	ldr	r3, [pc, #120]	; (8000c44 <StartDefaultTask+0x84>)
 8000bca:	f107 0444 	add.w	r4, r7, #68	; 0x44
 8000bce:	461d      	mov	r5, r3
 8000bd0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bd2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bd4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000bd8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	 TransmitTaskHandle = osThreadCreate(osThread(transmit), NULL);
 8000bdc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000be0:	2100      	movs	r1, #0
 8000be2:	4618      	mov	r0, r3
 8000be4:	f003 f82f 	bl	8003c46 <osThreadCreate>
 8000be8:	4602      	mov	r2, r0
 8000bea:	4b17      	ldr	r3, [pc, #92]	; (8000c48 <StartDefaultTask+0x88>)
 8000bec:	601a      	str	r2, [r3, #0]
	 osThreadDef(toggle, ToggleThread, osPriorityNormal, 0, 128);
 8000bee:	4b17      	ldr	r3, [pc, #92]	; (8000c4c <StartDefaultTask+0x8c>)
 8000bf0:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8000bf4:	461d      	mov	r5, r3
 8000bf6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bf8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bfa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000bfe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	 ToggleTaskHandle = osThreadCreate(osThread(toggle), NULL);
 8000c02:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c06:	2100      	movs	r1, #0
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f003 f81c 	bl	8003c46 <osThreadCreate>
 8000c0e:	4602      	mov	r2, r0
 8000c10:	4b0f      	ldr	r3, [pc, #60]	; (8000c50 <StartDefaultTask+0x90>)
 8000c12:	601a      	str	r2, [r3, #0]
	 osThreadDef(receive, ReceiveThread, osPriorityNormal, 0, 128);
 8000c14:	4b0f      	ldr	r3, [pc, #60]	; (8000c54 <StartDefaultTask+0x94>)
 8000c16:	f107 040c 	add.w	r4, r7, #12
 8000c1a:	461d      	mov	r5, r3
 8000c1c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c20:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000c24:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	 ReceiveTaskHandle = osThreadCreate(osThread(receive), NULL);
 8000c28:	f107 030c 	add.w	r3, r7, #12
 8000c2c:	2100      	movs	r1, #0
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f003 f809 	bl	8003c46 <osThreadCreate>
 8000c34:	4602      	mov	r2, r0
 8000c36:	4b08      	ldr	r3, [pc, #32]	; (8000c58 <StartDefaultTask+0x98>)
 8000c38:	601a      	str	r2, [r3, #0]
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000c3a:	2001      	movs	r0, #1
 8000c3c:	f003 f84f 	bl	8003cde <osDelay>
 8000c40:	e7fb      	b.n	8000c3a <StartDefaultTask+0x7a>
 8000c42:	bf00      	nop
 8000c44:	08005948 	.word	0x08005948
 8000c48:	20004540 	.word	0x20004540
 8000c4c:	0800596c 	.word	0x0800596c
 8000c50:	20004048 	.word	0x20004048
 8000c54:	08005990 	.word	0x08005990
 8000c58:	2000404c 	.word	0x2000404c

08000c5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c60:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c62:	e7fe      	b.n	8000c62 <Error_Handler+0x6>

08000c64 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b082      	sub	sp, #8
 8000c68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	607b      	str	r3, [r7, #4]
 8000c6e:	4b12      	ldr	r3, [pc, #72]	; (8000cb8 <HAL_MspInit+0x54>)
 8000c70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c72:	4a11      	ldr	r2, [pc, #68]	; (8000cb8 <HAL_MspInit+0x54>)
 8000c74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c78:	6453      	str	r3, [r2, #68]	; 0x44
 8000c7a:	4b0f      	ldr	r3, [pc, #60]	; (8000cb8 <HAL_MspInit+0x54>)
 8000c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c82:	607b      	str	r3, [r7, #4]
 8000c84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c86:	2300      	movs	r3, #0
 8000c88:	603b      	str	r3, [r7, #0]
 8000c8a:	4b0b      	ldr	r3, [pc, #44]	; (8000cb8 <HAL_MspInit+0x54>)
 8000c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c8e:	4a0a      	ldr	r2, [pc, #40]	; (8000cb8 <HAL_MspInit+0x54>)
 8000c90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c94:	6413      	str	r3, [r2, #64]	; 0x40
 8000c96:	4b08      	ldr	r3, [pc, #32]	; (8000cb8 <HAL_MspInit+0x54>)
 8000c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c9e:	603b      	str	r3, [r7, #0]
 8000ca0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	210f      	movs	r1, #15
 8000ca6:	f06f 0001 	mvn.w	r0, #1
 8000caa:	f000 feb8 	bl	8001a1e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cae:	bf00      	nop
 8000cb0:	3708      	adds	r7, #8
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	40023800 	.word	0x40023800

08000cbc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b08a      	sub	sp, #40	; 0x28
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc4:	f107 0314 	add.w	r3, r7, #20
 8000cc8:	2200      	movs	r2, #0
 8000cca:	601a      	str	r2, [r3, #0]
 8000ccc:	605a      	str	r2, [r3, #4]
 8000cce:	609a      	str	r2, [r3, #8]
 8000cd0:	60da      	str	r2, [r3, #12]
 8000cd2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4a17      	ldr	r2, [pc, #92]	; (8000d38 <HAL_ADC_MspInit+0x7c>)
 8000cda:	4293      	cmp	r3, r2
 8000cdc:	d127      	bne.n	8000d2e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000cde:	2300      	movs	r3, #0
 8000ce0:	613b      	str	r3, [r7, #16]
 8000ce2:	4b16      	ldr	r3, [pc, #88]	; (8000d3c <HAL_ADC_MspInit+0x80>)
 8000ce4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ce6:	4a15      	ldr	r2, [pc, #84]	; (8000d3c <HAL_ADC_MspInit+0x80>)
 8000ce8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cec:	6453      	str	r3, [r2, #68]	; 0x44
 8000cee:	4b13      	ldr	r3, [pc, #76]	; (8000d3c <HAL_ADC_MspInit+0x80>)
 8000cf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000cf6:	613b      	str	r3, [r7, #16]
 8000cf8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	60fb      	str	r3, [r7, #12]
 8000cfe:	4b0f      	ldr	r3, [pc, #60]	; (8000d3c <HAL_ADC_MspInit+0x80>)
 8000d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d02:	4a0e      	ldr	r2, [pc, #56]	; (8000d3c <HAL_ADC_MspInit+0x80>)
 8000d04:	f043 0301 	orr.w	r3, r3, #1
 8000d08:	6313      	str	r3, [r2, #48]	; 0x30
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <HAL_ADC_MspInit+0x80>)
 8000d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0e:	f003 0301 	and.w	r3, r3, #1
 8000d12:	60fb      	str	r3, [r7, #12]
 8000d14:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000d16:	2301      	movs	r3, #1
 8000d18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d1a:	2303      	movs	r3, #3
 8000d1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d22:	f107 0314 	add.w	r3, r7, #20
 8000d26:	4619      	mov	r1, r3
 8000d28:	4805      	ldr	r0, [pc, #20]	; (8000d40 <HAL_ADC_MspInit+0x84>)
 8000d2a:	f000 fea1 	bl	8001a70 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000d2e:	bf00      	nop
 8000d30:	3728      	adds	r7, #40	; 0x28
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	40012000 	.word	0x40012000
 8000d3c:	40023800 	.word	0x40023800
 8000d40:	40020000 	.word	0x40020000

08000d44 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d44:	b480      	push	{r7}
 8000d46:	b085      	sub	sp, #20
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	4a0b      	ldr	r2, [pc, #44]	; (8000d80 <HAL_TIM_Base_MspInit+0x3c>)
 8000d52:	4293      	cmp	r3, r2
 8000d54:	d10d      	bne.n	8000d72 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000d56:	2300      	movs	r3, #0
 8000d58:	60fb      	str	r3, [r7, #12]
 8000d5a:	4b0a      	ldr	r3, [pc, #40]	; (8000d84 <HAL_TIM_Base_MspInit+0x40>)
 8000d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d5e:	4a09      	ldr	r2, [pc, #36]	; (8000d84 <HAL_TIM_Base_MspInit+0x40>)
 8000d60:	f043 0302 	orr.w	r3, r3, #2
 8000d64:	6413      	str	r3, [r2, #64]	; 0x40
 8000d66:	4b07      	ldr	r3, [pc, #28]	; (8000d84 <HAL_TIM_Base_MspInit+0x40>)
 8000d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d6a:	f003 0302 	and.w	r3, r3, #2
 8000d6e:	60fb      	str	r3, [r7, #12]
 8000d70:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000d72:	bf00      	nop
 8000d74:	3714      	adds	r7, #20
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr
 8000d7e:	bf00      	nop
 8000d80:	40000400 	.word	0x40000400
 8000d84:	40023800 	.word	0x40023800

08000d88 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b088      	sub	sp, #32
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d90:	f107 030c 	add.w	r3, r7, #12
 8000d94:	2200      	movs	r2, #0
 8000d96:	601a      	str	r2, [r3, #0]
 8000d98:	605a      	str	r2, [r3, #4]
 8000d9a:	609a      	str	r2, [r3, #8]
 8000d9c:	60da      	str	r2, [r3, #12]
 8000d9e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4a12      	ldr	r2, [pc, #72]	; (8000df0 <HAL_TIM_MspPostInit+0x68>)
 8000da6:	4293      	cmp	r3, r2
 8000da8:	d11d      	bne.n	8000de6 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000daa:	2300      	movs	r3, #0
 8000dac:	60bb      	str	r3, [r7, #8]
 8000dae:	4b11      	ldr	r3, [pc, #68]	; (8000df4 <HAL_TIM_MspPostInit+0x6c>)
 8000db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db2:	4a10      	ldr	r2, [pc, #64]	; (8000df4 <HAL_TIM_MspPostInit+0x6c>)
 8000db4:	f043 0301 	orr.w	r3, r3, #1
 8000db8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dba:	4b0e      	ldr	r3, [pc, #56]	; (8000df4 <HAL_TIM_MspPostInit+0x6c>)
 8000dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dbe:	f003 0301 	and.w	r3, r3, #1
 8000dc2:	60bb      	str	r3, [r7, #8]
 8000dc4:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000dc6:	2340      	movs	r3, #64	; 0x40
 8000dc8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dca:	2302      	movs	r3, #2
 8000dcc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000dd6:	2302      	movs	r3, #2
 8000dd8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dda:	f107 030c 	add.w	r3, r7, #12
 8000dde:	4619      	mov	r1, r3
 8000de0:	4805      	ldr	r0, [pc, #20]	; (8000df8 <HAL_TIM_MspPostInit+0x70>)
 8000de2:	f000 fe45 	bl	8001a70 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000de6:	bf00      	nop
 8000de8:	3720      	adds	r7, #32
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	40000400 	.word	0x40000400
 8000df4:	40023800 	.word	0x40023800
 8000df8:	40020000 	.word	0x40020000

08000dfc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b08c      	sub	sp, #48	; 0x30
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e04:	f107 031c 	add.w	r3, r7, #28
 8000e08:	2200      	movs	r2, #0
 8000e0a:	601a      	str	r2, [r3, #0]
 8000e0c:	605a      	str	r2, [r3, #4]
 8000e0e:	609a      	str	r2, [r3, #8]
 8000e10:	60da      	str	r2, [r3, #12]
 8000e12:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	4a32      	ldr	r2, [pc, #200]	; (8000ee4 <HAL_UART_MspInit+0xe8>)
 8000e1a:	4293      	cmp	r3, r2
 8000e1c:	d12d      	bne.n	8000e7a <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e1e:	2300      	movs	r3, #0
 8000e20:	61bb      	str	r3, [r7, #24]
 8000e22:	4b31      	ldr	r3, [pc, #196]	; (8000ee8 <HAL_UART_MspInit+0xec>)
 8000e24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e26:	4a30      	ldr	r2, [pc, #192]	; (8000ee8 <HAL_UART_MspInit+0xec>)
 8000e28:	f043 0310 	orr.w	r3, r3, #16
 8000e2c:	6453      	str	r3, [r2, #68]	; 0x44
 8000e2e:	4b2e      	ldr	r3, [pc, #184]	; (8000ee8 <HAL_UART_MspInit+0xec>)
 8000e30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e32:	f003 0310 	and.w	r3, r3, #16
 8000e36:	61bb      	str	r3, [r7, #24]
 8000e38:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	617b      	str	r3, [r7, #20]
 8000e3e:	4b2a      	ldr	r3, [pc, #168]	; (8000ee8 <HAL_UART_MspInit+0xec>)
 8000e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e42:	4a29      	ldr	r2, [pc, #164]	; (8000ee8 <HAL_UART_MspInit+0xec>)
 8000e44:	f043 0301 	orr.w	r3, r3, #1
 8000e48:	6313      	str	r3, [r2, #48]	; 0x30
 8000e4a:	4b27      	ldr	r3, [pc, #156]	; (8000ee8 <HAL_UART_MspInit+0xec>)
 8000e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4e:	f003 0301 	and.w	r3, r3, #1
 8000e52:	617b      	str	r3, [r7, #20]
 8000e54:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000e56:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000e5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e5c:	2302      	movs	r3, #2
 8000e5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e60:	2300      	movs	r3, #0
 8000e62:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e64:	2303      	movs	r3, #3
 8000e66:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000e68:	2307      	movs	r3, #7
 8000e6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e6c:	f107 031c 	add.w	r3, r7, #28
 8000e70:	4619      	mov	r1, r3
 8000e72:	481e      	ldr	r0, [pc, #120]	; (8000eec <HAL_UART_MspInit+0xf0>)
 8000e74:	f000 fdfc 	bl	8001a70 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000e78:	e030      	b.n	8000edc <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART2)
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	4a1c      	ldr	r2, [pc, #112]	; (8000ef0 <HAL_UART_MspInit+0xf4>)
 8000e80:	4293      	cmp	r3, r2
 8000e82:	d12b      	bne.n	8000edc <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e84:	2300      	movs	r3, #0
 8000e86:	613b      	str	r3, [r7, #16]
 8000e88:	4b17      	ldr	r3, [pc, #92]	; (8000ee8 <HAL_UART_MspInit+0xec>)
 8000e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e8c:	4a16      	ldr	r2, [pc, #88]	; (8000ee8 <HAL_UART_MspInit+0xec>)
 8000e8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e92:	6413      	str	r3, [r2, #64]	; 0x40
 8000e94:	4b14      	ldr	r3, [pc, #80]	; (8000ee8 <HAL_UART_MspInit+0xec>)
 8000e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e9c:	613b      	str	r3, [r7, #16]
 8000e9e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	60fb      	str	r3, [r7, #12]
 8000ea4:	4b10      	ldr	r3, [pc, #64]	; (8000ee8 <HAL_UART_MspInit+0xec>)
 8000ea6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea8:	4a0f      	ldr	r2, [pc, #60]	; (8000ee8 <HAL_UART_MspInit+0xec>)
 8000eaa:	f043 0301 	orr.w	r3, r3, #1
 8000eae:	6313      	str	r3, [r2, #48]	; 0x30
 8000eb0:	4b0d      	ldr	r3, [pc, #52]	; (8000ee8 <HAL_UART_MspInit+0xec>)
 8000eb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb4:	f003 0301 	and.w	r3, r3, #1
 8000eb8:	60fb      	str	r3, [r7, #12]
 8000eba:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000ebc:	230c      	movs	r3, #12
 8000ebe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec0:	2302      	movs	r3, #2
 8000ec2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ec8:	2303      	movs	r3, #3
 8000eca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ecc:	2307      	movs	r3, #7
 8000ece:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ed0:	f107 031c 	add.w	r3, r7, #28
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	4805      	ldr	r0, [pc, #20]	; (8000eec <HAL_UART_MspInit+0xf0>)
 8000ed8:	f000 fdca 	bl	8001a70 <HAL_GPIO_Init>
}
 8000edc:	bf00      	nop
 8000ede:	3730      	adds	r7, #48	; 0x30
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	40011000 	.word	0x40011000
 8000ee8:	40023800 	.word	0x40023800
 8000eec:	40020000 	.word	0x40020000
 8000ef0:	40004400 	.word	0x40004400

08000ef4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ef8:	e7fe      	b.n	8000ef8 <NMI_Handler+0x4>

08000efa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000efa:	b480      	push	{r7}
 8000efc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000efe:	e7fe      	b.n	8000efe <HardFault_Handler+0x4>

08000f00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f04:	e7fe      	b.n	8000f04 <MemManage_Handler+0x4>

08000f06 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f06:	b480      	push	{r7}
 8000f08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f0a:	e7fe      	b.n	8000f0a <BusFault_Handler+0x4>

08000f0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f10:	e7fe      	b.n	8000f10 <UsageFault_Handler+0x4>

08000f12 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f12:	b480      	push	{r7}
 8000f14:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f16:	bf00      	nop
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1e:	4770      	bx	lr

08000f20 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f24:	f000 f8d2 	bl	80010cc <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000f28:	f003 fc50 	bl	80047cc <xTaskGetSchedulerState>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b01      	cmp	r3, #1
 8000f30:	d001      	beq.n	8000f36 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000f32:	f003 fe81 	bl	8004c38 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f36:	bf00      	nop
 8000f38:	bd80      	pop	{r7, pc}
	...

08000f3c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b086      	sub	sp, #24
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f44:	4a14      	ldr	r2, [pc, #80]	; (8000f98 <_sbrk+0x5c>)
 8000f46:	4b15      	ldr	r3, [pc, #84]	; (8000f9c <_sbrk+0x60>)
 8000f48:	1ad3      	subs	r3, r2, r3
 8000f4a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f50:	4b13      	ldr	r3, [pc, #76]	; (8000fa0 <_sbrk+0x64>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d102      	bne.n	8000f5e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f58:	4b11      	ldr	r3, [pc, #68]	; (8000fa0 <_sbrk+0x64>)
 8000f5a:	4a12      	ldr	r2, [pc, #72]	; (8000fa4 <_sbrk+0x68>)
 8000f5c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f5e:	4b10      	ldr	r3, [pc, #64]	; (8000fa0 <_sbrk+0x64>)
 8000f60:	681a      	ldr	r2, [r3, #0]
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	4413      	add	r3, r2
 8000f66:	693a      	ldr	r2, [r7, #16]
 8000f68:	429a      	cmp	r2, r3
 8000f6a:	d207      	bcs.n	8000f7c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f6c:	f004 f888 	bl	8005080 <__errno>
 8000f70:	4602      	mov	r2, r0
 8000f72:	230c      	movs	r3, #12
 8000f74:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000f76:	f04f 33ff 	mov.w	r3, #4294967295
 8000f7a:	e009      	b.n	8000f90 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f7c:	4b08      	ldr	r3, [pc, #32]	; (8000fa0 <_sbrk+0x64>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f82:	4b07      	ldr	r3, [pc, #28]	; (8000fa0 <_sbrk+0x64>)
 8000f84:	681a      	ldr	r2, [r3, #0]
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	4413      	add	r3, r2
 8000f8a:	4a05      	ldr	r2, [pc, #20]	; (8000fa0 <_sbrk+0x64>)
 8000f8c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f8e:	68fb      	ldr	r3, [r7, #12]
}
 8000f90:	4618      	mov	r0, r3
 8000f92:	3718      	adds	r7, #24
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	20020000 	.word	0x20020000
 8000f9c:	00000400 	.word	0x00000400
 8000fa0:	200002ec 	.word	0x200002ec
 8000fa4:	20004550 	.word	0x20004550

08000fa8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fac:	4b08      	ldr	r3, [pc, #32]	; (8000fd0 <SystemInit+0x28>)
 8000fae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fb2:	4a07      	ldr	r2, [pc, #28]	; (8000fd0 <SystemInit+0x28>)
 8000fb4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fb8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000fbc:	4b04      	ldr	r3, [pc, #16]	; (8000fd0 <SystemInit+0x28>)
 8000fbe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000fc2:	609a      	str	r2, [r3, #8]
#endif
}
 8000fc4:	bf00      	nop
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr
 8000fce:	bf00      	nop
 8000fd0:	e000ed00 	.word	0xe000ed00

08000fd4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000fd4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800100c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000fd8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000fda:	e003      	b.n	8000fe4 <LoopCopyDataInit>

08000fdc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000fdc:	4b0c      	ldr	r3, [pc, #48]	; (8001010 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000fde:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000fe0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000fe2:	3104      	adds	r1, #4

08000fe4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000fe4:	480b      	ldr	r0, [pc, #44]	; (8001014 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000fe6:	4b0c      	ldr	r3, [pc, #48]	; (8001018 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000fe8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000fea:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000fec:	d3f6      	bcc.n	8000fdc <CopyDataInit>
  ldr  r2, =_sbss
 8000fee:	4a0b      	ldr	r2, [pc, #44]	; (800101c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000ff0:	e002      	b.n	8000ff8 <LoopFillZerobss>

08000ff2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000ff2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000ff4:	f842 3b04 	str.w	r3, [r2], #4

08000ff8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000ff8:	4b09      	ldr	r3, [pc, #36]	; (8001020 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000ffa:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000ffc:	d3f9      	bcc.n	8000ff2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000ffe:	f7ff ffd3 	bl	8000fa8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001002:	f004 f843 	bl	800508c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001006:	f7ff fad5 	bl	80005b4 <main>
  bx  lr    
 800100a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800100c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001010:	08005a10 	.word	0x08005a10
  ldr  r0, =_sdata
 8001014:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001018:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 800101c:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 8001020:	2000454c 	.word	0x2000454c

08001024 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001024:	e7fe      	b.n	8001024 <ADC_IRQHandler>
	...

08001028 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800102c:	4b0e      	ldr	r3, [pc, #56]	; (8001068 <HAL_Init+0x40>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4a0d      	ldr	r2, [pc, #52]	; (8001068 <HAL_Init+0x40>)
 8001032:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001036:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001038:	4b0b      	ldr	r3, [pc, #44]	; (8001068 <HAL_Init+0x40>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4a0a      	ldr	r2, [pc, #40]	; (8001068 <HAL_Init+0x40>)
 800103e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001042:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001044:	4b08      	ldr	r3, [pc, #32]	; (8001068 <HAL_Init+0x40>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4a07      	ldr	r2, [pc, #28]	; (8001068 <HAL_Init+0x40>)
 800104a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800104e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001050:	2003      	movs	r0, #3
 8001052:	f000 fcd9 	bl	8001a08 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001056:	200f      	movs	r0, #15
 8001058:	f000 f808 	bl	800106c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800105c:	f7ff fe02 	bl	8000c64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001060:	2300      	movs	r3, #0
}
 8001062:	4618      	mov	r0, r3
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	40023c00 	.word	0x40023c00

0800106c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001074:	4b12      	ldr	r3, [pc, #72]	; (80010c0 <HAL_InitTick+0x54>)
 8001076:	681a      	ldr	r2, [r3, #0]
 8001078:	4b12      	ldr	r3, [pc, #72]	; (80010c4 <HAL_InitTick+0x58>)
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	4619      	mov	r1, r3
 800107e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001082:	fbb3 f3f1 	udiv	r3, r3, r1
 8001086:	fbb2 f3f3 	udiv	r3, r2, r3
 800108a:	4618      	mov	r0, r3
 800108c:	f000 fce3 	bl	8001a56 <HAL_SYSTICK_Config>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d001      	beq.n	800109a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001096:	2301      	movs	r3, #1
 8001098:	e00e      	b.n	80010b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	2b0f      	cmp	r3, #15
 800109e:	d80a      	bhi.n	80010b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010a0:	2200      	movs	r2, #0
 80010a2:	6879      	ldr	r1, [r7, #4]
 80010a4:	f04f 30ff 	mov.w	r0, #4294967295
 80010a8:	f000 fcb9 	bl	8001a1e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010ac:	4a06      	ldr	r2, [pc, #24]	; (80010c8 <HAL_InitTick+0x5c>)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010b2:	2300      	movs	r3, #0
 80010b4:	e000      	b.n	80010b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010b6:	2301      	movs	r3, #1
}
 80010b8:	4618      	mov	r0, r3
 80010ba:	3708      	adds	r7, #8
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	20000000 	.word	0x20000000
 80010c4:	20000008 	.word	0x20000008
 80010c8:	20000004 	.word	0x20000004

080010cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010d0:	4b06      	ldr	r3, [pc, #24]	; (80010ec <HAL_IncTick+0x20>)
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	461a      	mov	r2, r3
 80010d6:	4b06      	ldr	r3, [pc, #24]	; (80010f0 <HAL_IncTick+0x24>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	4413      	add	r3, r2
 80010dc:	4a04      	ldr	r2, [pc, #16]	; (80010f0 <HAL_IncTick+0x24>)
 80010de:	6013      	str	r3, [r2, #0]
}
 80010e0:	bf00      	nop
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop
 80010ec:	20000008 	.word	0x20000008
 80010f0:	20004544 	.word	0x20004544

080010f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0
  return uwTick;
 80010f8:	4b03      	ldr	r3, [pc, #12]	; (8001108 <HAL_GetTick+0x14>)
 80010fa:	681b      	ldr	r3, [r3, #0]
}
 80010fc:	4618      	mov	r0, r3
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop
 8001108:	20004544 	.word	0x20004544

0800110c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b084      	sub	sp, #16
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001114:	f7ff ffee 	bl	80010f4 <HAL_GetTick>
 8001118:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001124:	d005      	beq.n	8001132 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001126:	4b09      	ldr	r3, [pc, #36]	; (800114c <HAL_Delay+0x40>)
 8001128:	781b      	ldrb	r3, [r3, #0]
 800112a:	461a      	mov	r2, r3
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	4413      	add	r3, r2
 8001130:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001132:	bf00      	nop
 8001134:	f7ff ffde 	bl	80010f4 <HAL_GetTick>
 8001138:	4602      	mov	r2, r0
 800113a:	68bb      	ldr	r3, [r7, #8]
 800113c:	1ad3      	subs	r3, r2, r3
 800113e:	68fa      	ldr	r2, [r7, #12]
 8001140:	429a      	cmp	r2, r3
 8001142:	d8f7      	bhi.n	8001134 <HAL_Delay+0x28>
  {
  }
}
 8001144:	bf00      	nop
 8001146:	3710      	adds	r7, #16
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	20000008 	.word	0x20000008

08001150 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b084      	sub	sp, #16
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001158:	2300      	movs	r3, #0
 800115a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d101      	bne.n	8001166 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001162:	2301      	movs	r3, #1
 8001164:	e033      	b.n	80011ce <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800116a:	2b00      	cmp	r3, #0
 800116c:	d109      	bne.n	8001182 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800116e:	6878      	ldr	r0, [r7, #4]
 8001170:	f7ff fda4 	bl	8000cbc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	2200      	movs	r2, #0
 8001178:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	2200      	movs	r2, #0
 800117e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001186:	f003 0310 	and.w	r3, r3, #16
 800118a:	2b00      	cmp	r3, #0
 800118c:	d118      	bne.n	80011c0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001192:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001196:	f023 0302 	bic.w	r3, r3, #2
 800119a:	f043 0202 	orr.w	r2, r3, #2
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80011a2:	6878      	ldr	r0, [r7, #4]
 80011a4:	f000 fa82 	bl	80016ac <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	2200      	movs	r2, #0
 80011ac:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b2:	f023 0303 	bic.w	r3, r3, #3
 80011b6:	f043 0201 	orr.w	r2, r3, #1
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	641a      	str	r2, [r3, #64]	; 0x40
 80011be:	e001      	b.n	80011c4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80011c0:	2301      	movs	r3, #1
 80011c2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	2200      	movs	r2, #0
 80011c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80011cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	3710      	adds	r7, #16
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
	...

080011d8 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80011d8:	b480      	push	{r7}
 80011da:	b085      	sub	sp, #20
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80011e0:	2300      	movs	r3, #0
 80011e2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80011ea:	2b01      	cmp	r3, #1
 80011ec:	d101      	bne.n	80011f2 <HAL_ADC_Start+0x1a>
 80011ee:	2302      	movs	r3, #2
 80011f0:	e08a      	b.n	8001308 <HAL_ADC_Start+0x130>
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	2201      	movs	r2, #1
 80011f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	689b      	ldr	r3, [r3, #8]
 8001200:	f003 0301 	and.w	r3, r3, #1
 8001204:	2b01      	cmp	r3, #1
 8001206:	d018      	beq.n	800123a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	689a      	ldr	r2, [r3, #8]
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f042 0201 	orr.w	r2, r2, #1
 8001216:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001218:	4b3e      	ldr	r3, [pc, #248]	; (8001314 <HAL_ADC_Start+0x13c>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4a3e      	ldr	r2, [pc, #248]	; (8001318 <HAL_ADC_Start+0x140>)
 800121e:	fba2 2303 	umull	r2, r3, r2, r3
 8001222:	0c9a      	lsrs	r2, r3, #18
 8001224:	4613      	mov	r3, r2
 8001226:	005b      	lsls	r3, r3, #1
 8001228:	4413      	add	r3, r2
 800122a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800122c:	e002      	b.n	8001234 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800122e:	68bb      	ldr	r3, [r7, #8]
 8001230:	3b01      	subs	r3, #1
 8001232:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001234:	68bb      	ldr	r3, [r7, #8]
 8001236:	2b00      	cmp	r3, #0
 8001238:	d1f9      	bne.n	800122e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	689b      	ldr	r3, [r3, #8]
 8001240:	f003 0301 	and.w	r3, r3, #1
 8001244:	2b01      	cmp	r3, #1
 8001246:	d15e      	bne.n	8001306 <HAL_ADC_Start+0x12e>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800124c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001250:	f023 0301 	bic.w	r3, r3, #1
 8001254:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001266:	2b00      	cmp	r3, #0
 8001268:	d007      	beq.n	800127a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800126e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001272:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800127e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001282:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001286:	d106      	bne.n	8001296 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800128c:	f023 0206 	bic.w	r2, r3, #6
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	645a      	str	r2, [r3, #68]	; 0x44
 8001294:	e002      	b.n	800129c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	2200      	movs	r2, #0
 800129a:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	2200      	movs	r2, #0
 80012a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80012a4:	4b1d      	ldr	r3, [pc, #116]	; (800131c <HAL_ADC_Start+0x144>)
 80012a6:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80012b0:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	f003 031f 	and.w	r3, r3, #31
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d10f      	bne.n	80012de <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	689b      	ldr	r3, [r3, #8]
 80012c4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d11c      	bne.n	8001306 <HAL_ADC_Start+0x12e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	689a      	ldr	r2, [r3, #8]
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80012da:	609a      	str	r2, [r3, #8]
 80012dc:	e013      	b.n	8001306 <HAL_ADC_Start+0x12e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	4a0f      	ldr	r2, [pc, #60]	; (8001320 <HAL_ADC_Start+0x148>)
 80012e4:	4293      	cmp	r3, r2
 80012e6:	d10e      	bne.n	8001306 <HAL_ADC_Start+0x12e>
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	689b      	ldr	r3, [r3, #8]
 80012ee:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d107      	bne.n	8001306 <HAL_ADC_Start+0x12e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	689a      	ldr	r2, [r3, #8]
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001304:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8001306:	2300      	movs	r3, #0
}
 8001308:	4618      	mov	r0, r3
 800130a:	3714      	adds	r7, #20
 800130c:	46bd      	mov	sp, r7
 800130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001312:	4770      	bx	lr
 8001314:	20000000 	.word	0x20000000
 8001318:	431bde83 	.word	0x431bde83
 800131c:	40012300 	.word	0x40012300
 8001320:	40012000 	.word	0x40012000

08001324 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b084      	sub	sp, #16
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
 800132c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800132e:	2300      	movs	r3, #0
 8001330:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	689b      	ldr	r3, [r3, #8]
 8001338:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800133c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001340:	d113      	bne.n	800136a <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	689b      	ldr	r3, [r3, #8]
 8001348:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800134c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001350:	d10b      	bne.n	800136a <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001356:	f043 0220 	orr.w	r2, r3, #32
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	2200      	movs	r2, #0
 8001362:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001366:	2301      	movs	r3, #1
 8001368:	e05c      	b.n	8001424 <HAL_ADC_PollForConversion+0x100>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 800136a:	f7ff fec3 	bl	80010f4 <HAL_GetTick>
 800136e:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001370:	e01a      	b.n	80013a8 <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001378:	d016      	beq.n	80013a8 <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d007      	beq.n	8001390 <HAL_ADC_PollForConversion+0x6c>
 8001380:	f7ff feb8 	bl	80010f4 <HAL_GetTick>
 8001384:	4602      	mov	r2, r0
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	1ad3      	subs	r3, r2, r3
 800138a:	683a      	ldr	r2, [r7, #0]
 800138c:	429a      	cmp	r2, r3
 800138e:	d20b      	bcs.n	80013a8 <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001394:	f043 0204 	orr.w	r2, r3, #4
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	2200      	movs	r2, #0
 80013a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 80013a4:	2303      	movs	r3, #3
 80013a6:	e03d      	b.n	8001424 <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f003 0302 	and.w	r3, r3, #2
 80013b2:	2b02      	cmp	r3, #2
 80013b4:	d1dd      	bne.n	8001372 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f06f 0212 	mvn.w	r2, #18
 80013be:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	689b      	ldr	r3, [r3, #8]
 80013d2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d123      	bne.n	8001422 <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d11f      	bne.n	8001422 <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013e8:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d006      	beq.n	80013fe <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	689b      	ldr	r3, [r3, #8]
 80013f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d111      	bne.n	8001422 <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001402:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800140e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001412:	2b00      	cmp	r3, #0
 8001414:	d105      	bne.n	8001422 <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800141a:	f043 0201 	orr.w	r2, r3, #1
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001422:	2300      	movs	r3, #0
}
 8001424:	4618      	mov	r0, r3
 8001426:	3710      	adds	r7, #16
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}

0800142c <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800142c:	b480      	push	{r7}
 800142e:	b083      	sub	sp, #12
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800143a:	4618      	mov	r0, r3
 800143c:	370c      	adds	r7, #12
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr
	...

08001448 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001448:	b480      	push	{r7}
 800144a:	b085      	sub	sp, #20
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
 8001450:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001452:	2300      	movs	r3, #0
 8001454:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800145c:	2b01      	cmp	r3, #1
 800145e:	d101      	bne.n	8001464 <HAL_ADC_ConfigChannel+0x1c>
 8001460:	2302      	movs	r3, #2
 8001462:	e113      	b.n	800168c <HAL_ADC_ConfigChannel+0x244>
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	2201      	movs	r2, #1
 8001468:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	2b09      	cmp	r3, #9
 8001472:	d925      	bls.n	80014c0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	68d9      	ldr	r1, [r3, #12]
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	b29b      	uxth	r3, r3
 8001480:	461a      	mov	r2, r3
 8001482:	4613      	mov	r3, r2
 8001484:	005b      	lsls	r3, r3, #1
 8001486:	4413      	add	r3, r2
 8001488:	3b1e      	subs	r3, #30
 800148a:	2207      	movs	r2, #7
 800148c:	fa02 f303 	lsl.w	r3, r2, r3
 8001490:	43da      	mvns	r2, r3
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	400a      	ands	r2, r1
 8001498:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	68d9      	ldr	r1, [r3, #12]
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	689a      	ldr	r2, [r3, #8]
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	b29b      	uxth	r3, r3
 80014aa:	4618      	mov	r0, r3
 80014ac:	4603      	mov	r3, r0
 80014ae:	005b      	lsls	r3, r3, #1
 80014b0:	4403      	add	r3, r0
 80014b2:	3b1e      	subs	r3, #30
 80014b4:	409a      	lsls	r2, r3
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	430a      	orrs	r2, r1
 80014bc:	60da      	str	r2, [r3, #12]
 80014be:	e022      	b.n	8001506 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	6919      	ldr	r1, [r3, #16]
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	b29b      	uxth	r3, r3
 80014cc:	461a      	mov	r2, r3
 80014ce:	4613      	mov	r3, r2
 80014d0:	005b      	lsls	r3, r3, #1
 80014d2:	4413      	add	r3, r2
 80014d4:	2207      	movs	r2, #7
 80014d6:	fa02 f303 	lsl.w	r3, r2, r3
 80014da:	43da      	mvns	r2, r3
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	400a      	ands	r2, r1
 80014e2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	6919      	ldr	r1, [r3, #16]
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	689a      	ldr	r2, [r3, #8]
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	b29b      	uxth	r3, r3
 80014f4:	4618      	mov	r0, r3
 80014f6:	4603      	mov	r3, r0
 80014f8:	005b      	lsls	r3, r3, #1
 80014fa:	4403      	add	r3, r0
 80014fc:	409a      	lsls	r2, r3
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	430a      	orrs	r2, r1
 8001504:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	2b06      	cmp	r3, #6
 800150c:	d824      	bhi.n	8001558 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	685a      	ldr	r2, [r3, #4]
 8001518:	4613      	mov	r3, r2
 800151a:	009b      	lsls	r3, r3, #2
 800151c:	4413      	add	r3, r2
 800151e:	3b05      	subs	r3, #5
 8001520:	221f      	movs	r2, #31
 8001522:	fa02 f303 	lsl.w	r3, r2, r3
 8001526:	43da      	mvns	r2, r3
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	400a      	ands	r2, r1
 800152e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	b29b      	uxth	r3, r3
 800153c:	4618      	mov	r0, r3
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	685a      	ldr	r2, [r3, #4]
 8001542:	4613      	mov	r3, r2
 8001544:	009b      	lsls	r3, r3, #2
 8001546:	4413      	add	r3, r2
 8001548:	3b05      	subs	r3, #5
 800154a:	fa00 f203 	lsl.w	r2, r0, r3
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	430a      	orrs	r2, r1
 8001554:	635a      	str	r2, [r3, #52]	; 0x34
 8001556:	e04c      	b.n	80015f2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	2b0c      	cmp	r3, #12
 800155e:	d824      	bhi.n	80015aa <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	685a      	ldr	r2, [r3, #4]
 800156a:	4613      	mov	r3, r2
 800156c:	009b      	lsls	r3, r3, #2
 800156e:	4413      	add	r3, r2
 8001570:	3b23      	subs	r3, #35	; 0x23
 8001572:	221f      	movs	r2, #31
 8001574:	fa02 f303 	lsl.w	r3, r2, r3
 8001578:	43da      	mvns	r2, r3
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	400a      	ands	r2, r1
 8001580:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	b29b      	uxth	r3, r3
 800158e:	4618      	mov	r0, r3
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	685a      	ldr	r2, [r3, #4]
 8001594:	4613      	mov	r3, r2
 8001596:	009b      	lsls	r3, r3, #2
 8001598:	4413      	add	r3, r2
 800159a:	3b23      	subs	r3, #35	; 0x23
 800159c:	fa00 f203 	lsl.w	r2, r0, r3
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	430a      	orrs	r2, r1
 80015a6:	631a      	str	r2, [r3, #48]	; 0x30
 80015a8:	e023      	b.n	80015f2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	685a      	ldr	r2, [r3, #4]
 80015b4:	4613      	mov	r3, r2
 80015b6:	009b      	lsls	r3, r3, #2
 80015b8:	4413      	add	r3, r2
 80015ba:	3b41      	subs	r3, #65	; 0x41
 80015bc:	221f      	movs	r2, #31
 80015be:	fa02 f303 	lsl.w	r3, r2, r3
 80015c2:	43da      	mvns	r2, r3
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	400a      	ands	r2, r1
 80015ca:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	b29b      	uxth	r3, r3
 80015d8:	4618      	mov	r0, r3
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	685a      	ldr	r2, [r3, #4]
 80015de:	4613      	mov	r3, r2
 80015e0:	009b      	lsls	r3, r3, #2
 80015e2:	4413      	add	r3, r2
 80015e4:	3b41      	subs	r3, #65	; 0x41
 80015e6:	fa00 f203 	lsl.w	r2, r0, r3
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	430a      	orrs	r2, r1
 80015f0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80015f2:	4b29      	ldr	r3, [pc, #164]	; (8001698 <HAL_ADC_ConfigChannel+0x250>)
 80015f4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4a28      	ldr	r2, [pc, #160]	; (800169c <HAL_ADC_ConfigChannel+0x254>)
 80015fc:	4293      	cmp	r3, r2
 80015fe:	d10f      	bne.n	8001620 <HAL_ADC_ConfigChannel+0x1d8>
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	2b12      	cmp	r3, #18
 8001606:	d10b      	bne.n	8001620 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a1d      	ldr	r2, [pc, #116]	; (800169c <HAL_ADC_ConfigChannel+0x254>)
 8001626:	4293      	cmp	r3, r2
 8001628:	d12b      	bne.n	8001682 <HAL_ADC_ConfigChannel+0x23a>
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4a1c      	ldr	r2, [pc, #112]	; (80016a0 <HAL_ADC_ConfigChannel+0x258>)
 8001630:	4293      	cmp	r3, r2
 8001632:	d003      	beq.n	800163c <HAL_ADC_ConfigChannel+0x1f4>
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	2b11      	cmp	r3, #17
 800163a:	d122      	bne.n	8001682 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a11      	ldr	r2, [pc, #68]	; (80016a0 <HAL_ADC_ConfigChannel+0x258>)
 800165a:	4293      	cmp	r3, r2
 800165c:	d111      	bne.n	8001682 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800165e:	4b11      	ldr	r3, [pc, #68]	; (80016a4 <HAL_ADC_ConfigChannel+0x25c>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4a11      	ldr	r2, [pc, #68]	; (80016a8 <HAL_ADC_ConfigChannel+0x260>)
 8001664:	fba2 2303 	umull	r2, r3, r2, r3
 8001668:	0c9a      	lsrs	r2, r3, #18
 800166a:	4613      	mov	r3, r2
 800166c:	009b      	lsls	r3, r3, #2
 800166e:	4413      	add	r3, r2
 8001670:	005b      	lsls	r3, r3, #1
 8001672:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001674:	e002      	b.n	800167c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001676:	68bb      	ldr	r3, [r7, #8]
 8001678:	3b01      	subs	r3, #1
 800167a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800167c:	68bb      	ldr	r3, [r7, #8]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d1f9      	bne.n	8001676 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2200      	movs	r2, #0
 8001686:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800168a:	2300      	movs	r3, #0
}
 800168c:	4618      	mov	r0, r3
 800168e:	3714      	adds	r7, #20
 8001690:	46bd      	mov	sp, r7
 8001692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001696:	4770      	bx	lr
 8001698:	40012300 	.word	0x40012300
 800169c:	40012000 	.word	0x40012000
 80016a0:	10000012 	.word	0x10000012
 80016a4:	20000000 	.word	0x20000000
 80016a8:	431bde83 	.word	0x431bde83

080016ac <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80016ac:	b480      	push	{r7}
 80016ae:	b085      	sub	sp, #20
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80016b4:	4b79      	ldr	r3, [pc, #484]	; (800189c <ADC_Init+0x1f0>)
 80016b6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	685a      	ldr	r2, [r3, #4]
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	431a      	orrs	r2, r3
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	685a      	ldr	r2, [r3, #4]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80016e0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	6859      	ldr	r1, [r3, #4]
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	691b      	ldr	r3, [r3, #16]
 80016ec:	021a      	lsls	r2, r3, #8
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	430a      	orrs	r2, r1
 80016f4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	685a      	ldr	r2, [r3, #4]
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001704:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	6859      	ldr	r1, [r3, #4]
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	689a      	ldr	r2, [r3, #8]
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	430a      	orrs	r2, r1
 8001716:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	689a      	ldr	r2, [r3, #8]
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001726:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	6899      	ldr	r1, [r3, #8]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	68da      	ldr	r2, [r3, #12]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	430a      	orrs	r2, r1
 8001738:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800173e:	4a58      	ldr	r2, [pc, #352]	; (80018a0 <ADC_Init+0x1f4>)
 8001740:	4293      	cmp	r3, r2
 8001742:	d022      	beq.n	800178a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	689a      	ldr	r2, [r3, #8]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001752:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	6899      	ldr	r1, [r3, #8]
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	430a      	orrs	r2, r1
 8001764:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	689a      	ldr	r2, [r3, #8]
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001774:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	6899      	ldr	r1, [r3, #8]
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	430a      	orrs	r2, r1
 8001786:	609a      	str	r2, [r3, #8]
 8001788:	e00f      	b.n	80017aa <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	689a      	ldr	r2, [r3, #8]
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001798:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	689a      	ldr	r2, [r3, #8]
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80017a8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	689a      	ldr	r2, [r3, #8]
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f022 0202 	bic.w	r2, r2, #2
 80017b8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	6899      	ldr	r1, [r3, #8]
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	7e1b      	ldrb	r3, [r3, #24]
 80017c4:	005a      	lsls	r2, r3, #1
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	430a      	orrs	r2, r1
 80017cc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d01b      	beq.n	8001810 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	685a      	ldr	r2, [r3, #4]
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80017e6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	685a      	ldr	r2, [r3, #4]
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80017f6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	6859      	ldr	r1, [r3, #4]
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001802:	3b01      	subs	r3, #1
 8001804:	035a      	lsls	r2, r3, #13
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	430a      	orrs	r2, r1
 800180c:	605a      	str	r2, [r3, #4]
 800180e:	e007      	b.n	8001820 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	685a      	ldr	r2, [r3, #4]
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800181e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800182e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	69db      	ldr	r3, [r3, #28]
 800183a:	3b01      	subs	r3, #1
 800183c:	051a      	lsls	r2, r3, #20
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	430a      	orrs	r2, r1
 8001844:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	689a      	ldr	r2, [r3, #8]
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001854:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	6899      	ldr	r1, [r3, #8]
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001862:	025a      	lsls	r2, r3, #9
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	430a      	orrs	r2, r1
 800186a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	689a      	ldr	r2, [r3, #8]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800187a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	6899      	ldr	r1, [r3, #8]
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	695b      	ldr	r3, [r3, #20]
 8001886:	029a      	lsls	r2, r3, #10
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	430a      	orrs	r2, r1
 800188e:	609a      	str	r2, [r3, #8]
}
 8001890:	bf00      	nop
 8001892:	3714      	adds	r7, #20
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr
 800189c:	40012300 	.word	0x40012300
 80018a0:	0f000001 	.word	0x0f000001

080018a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b085      	sub	sp, #20
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	f003 0307 	and.w	r3, r3, #7
 80018b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018b4:	4b0c      	ldr	r3, [pc, #48]	; (80018e8 <__NVIC_SetPriorityGrouping+0x44>)
 80018b6:	68db      	ldr	r3, [r3, #12]
 80018b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018ba:	68ba      	ldr	r2, [r7, #8]
 80018bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018c0:	4013      	ands	r3, r2
 80018c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018c8:	68bb      	ldr	r3, [r7, #8]
 80018ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018d6:	4a04      	ldr	r2, [pc, #16]	; (80018e8 <__NVIC_SetPriorityGrouping+0x44>)
 80018d8:	68bb      	ldr	r3, [r7, #8]
 80018da:	60d3      	str	r3, [r2, #12]
}
 80018dc:	bf00      	nop
 80018de:	3714      	adds	r7, #20
 80018e0:	46bd      	mov	sp, r7
 80018e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e6:	4770      	bx	lr
 80018e8:	e000ed00 	.word	0xe000ed00

080018ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018ec:	b480      	push	{r7}
 80018ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018f0:	4b04      	ldr	r3, [pc, #16]	; (8001904 <__NVIC_GetPriorityGrouping+0x18>)
 80018f2:	68db      	ldr	r3, [r3, #12]
 80018f4:	0a1b      	lsrs	r3, r3, #8
 80018f6:	f003 0307 	and.w	r3, r3, #7
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	46bd      	mov	sp, r7
 80018fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001902:	4770      	bx	lr
 8001904:	e000ed00 	.word	0xe000ed00

08001908 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001908:	b480      	push	{r7}
 800190a:	b083      	sub	sp, #12
 800190c:	af00      	add	r7, sp, #0
 800190e:	4603      	mov	r3, r0
 8001910:	6039      	str	r1, [r7, #0]
 8001912:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001914:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001918:	2b00      	cmp	r3, #0
 800191a:	db0a      	blt.n	8001932 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	b2da      	uxtb	r2, r3
 8001920:	490c      	ldr	r1, [pc, #48]	; (8001954 <__NVIC_SetPriority+0x4c>)
 8001922:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001926:	0112      	lsls	r2, r2, #4
 8001928:	b2d2      	uxtb	r2, r2
 800192a:	440b      	add	r3, r1
 800192c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001930:	e00a      	b.n	8001948 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	b2da      	uxtb	r2, r3
 8001936:	4908      	ldr	r1, [pc, #32]	; (8001958 <__NVIC_SetPriority+0x50>)
 8001938:	79fb      	ldrb	r3, [r7, #7]
 800193a:	f003 030f 	and.w	r3, r3, #15
 800193e:	3b04      	subs	r3, #4
 8001940:	0112      	lsls	r2, r2, #4
 8001942:	b2d2      	uxtb	r2, r2
 8001944:	440b      	add	r3, r1
 8001946:	761a      	strb	r2, [r3, #24]
}
 8001948:	bf00      	nop
 800194a:	370c      	adds	r7, #12
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr
 8001954:	e000e100 	.word	0xe000e100
 8001958:	e000ed00 	.word	0xe000ed00

0800195c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800195c:	b480      	push	{r7}
 800195e:	b089      	sub	sp, #36	; 0x24
 8001960:	af00      	add	r7, sp, #0
 8001962:	60f8      	str	r0, [r7, #12]
 8001964:	60b9      	str	r1, [r7, #8]
 8001966:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	f003 0307 	and.w	r3, r3, #7
 800196e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001970:	69fb      	ldr	r3, [r7, #28]
 8001972:	f1c3 0307 	rsb	r3, r3, #7
 8001976:	2b04      	cmp	r3, #4
 8001978:	bf28      	it	cs
 800197a:	2304      	movcs	r3, #4
 800197c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800197e:	69fb      	ldr	r3, [r7, #28]
 8001980:	3304      	adds	r3, #4
 8001982:	2b06      	cmp	r3, #6
 8001984:	d902      	bls.n	800198c <NVIC_EncodePriority+0x30>
 8001986:	69fb      	ldr	r3, [r7, #28]
 8001988:	3b03      	subs	r3, #3
 800198a:	e000      	b.n	800198e <NVIC_EncodePriority+0x32>
 800198c:	2300      	movs	r3, #0
 800198e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001990:	f04f 32ff 	mov.w	r2, #4294967295
 8001994:	69bb      	ldr	r3, [r7, #24]
 8001996:	fa02 f303 	lsl.w	r3, r2, r3
 800199a:	43da      	mvns	r2, r3
 800199c:	68bb      	ldr	r3, [r7, #8]
 800199e:	401a      	ands	r2, r3
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019a4:	f04f 31ff 	mov.w	r1, #4294967295
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	fa01 f303 	lsl.w	r3, r1, r3
 80019ae:	43d9      	mvns	r1, r3
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019b4:	4313      	orrs	r3, r2
         );
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	3724      	adds	r7, #36	; 0x24
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr
	...

080019c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b082      	sub	sp, #8
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	3b01      	subs	r3, #1
 80019d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019d4:	d301      	bcc.n	80019da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019d6:	2301      	movs	r3, #1
 80019d8:	e00f      	b.n	80019fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019da:	4a0a      	ldr	r2, [pc, #40]	; (8001a04 <SysTick_Config+0x40>)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	3b01      	subs	r3, #1
 80019e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019e2:	210f      	movs	r1, #15
 80019e4:	f04f 30ff 	mov.w	r0, #4294967295
 80019e8:	f7ff ff8e 	bl	8001908 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019ec:	4b05      	ldr	r3, [pc, #20]	; (8001a04 <SysTick_Config+0x40>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019f2:	4b04      	ldr	r3, [pc, #16]	; (8001a04 <SysTick_Config+0x40>)
 80019f4:	2207      	movs	r2, #7
 80019f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019f8:	2300      	movs	r3, #0
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	3708      	adds	r7, #8
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	e000e010 	.word	0xe000e010

08001a08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b082      	sub	sp, #8
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a10:	6878      	ldr	r0, [r7, #4]
 8001a12:	f7ff ff47 	bl	80018a4 <__NVIC_SetPriorityGrouping>
}
 8001a16:	bf00      	nop
 8001a18:	3708      	adds	r7, #8
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}

08001a1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a1e:	b580      	push	{r7, lr}
 8001a20:	b086      	sub	sp, #24
 8001a22:	af00      	add	r7, sp, #0
 8001a24:	4603      	mov	r3, r0
 8001a26:	60b9      	str	r1, [r7, #8]
 8001a28:	607a      	str	r2, [r7, #4]
 8001a2a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a30:	f7ff ff5c 	bl	80018ec <__NVIC_GetPriorityGrouping>
 8001a34:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a36:	687a      	ldr	r2, [r7, #4]
 8001a38:	68b9      	ldr	r1, [r7, #8]
 8001a3a:	6978      	ldr	r0, [r7, #20]
 8001a3c:	f7ff ff8e 	bl	800195c <NVIC_EncodePriority>
 8001a40:	4602      	mov	r2, r0
 8001a42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a46:	4611      	mov	r1, r2
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f7ff ff5d 	bl	8001908 <__NVIC_SetPriority>
}
 8001a4e:	bf00      	nop
 8001a50:	3718      	adds	r7, #24
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}

08001a56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a56:	b580      	push	{r7, lr}
 8001a58:	b082      	sub	sp, #8
 8001a5a:	af00      	add	r7, sp, #0
 8001a5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a5e:	6878      	ldr	r0, [r7, #4]
 8001a60:	f7ff ffb0 	bl	80019c4 <SysTick_Config>
 8001a64:	4603      	mov	r3, r0
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	3708      	adds	r7, #8
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
	...

08001a70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b089      	sub	sp, #36	; 0x24
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
 8001a78:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a82:	2300      	movs	r3, #0
 8001a84:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a86:	2300      	movs	r3, #0
 8001a88:	61fb      	str	r3, [r7, #28]
 8001a8a:	e159      	b.n	8001d40 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	69fb      	ldr	r3, [r7, #28]
 8001a90:	fa02 f303 	lsl.w	r3, r2, r3
 8001a94:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	697a      	ldr	r2, [r7, #20]
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001aa0:	693a      	ldr	r2, [r7, #16]
 8001aa2:	697b      	ldr	r3, [r7, #20]
 8001aa4:	429a      	cmp	r2, r3
 8001aa6:	f040 8148 	bne.w	8001d3a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	2b01      	cmp	r3, #1
 8001ab0:	d00b      	beq.n	8001aca <HAL_GPIO_Init+0x5a>
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	2b02      	cmp	r3, #2
 8001ab8:	d007      	beq.n	8001aca <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001abe:	2b11      	cmp	r3, #17
 8001ac0:	d003      	beq.n	8001aca <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	2b12      	cmp	r3, #18
 8001ac8:	d130      	bne.n	8001b2c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	689b      	ldr	r3, [r3, #8]
 8001ace:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ad0:	69fb      	ldr	r3, [r7, #28]
 8001ad2:	005b      	lsls	r3, r3, #1
 8001ad4:	2203      	movs	r2, #3
 8001ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8001ada:	43db      	mvns	r3, r3
 8001adc:	69ba      	ldr	r2, [r7, #24]
 8001ade:	4013      	ands	r3, r2
 8001ae0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	68da      	ldr	r2, [r3, #12]
 8001ae6:	69fb      	ldr	r3, [r7, #28]
 8001ae8:	005b      	lsls	r3, r3, #1
 8001aea:	fa02 f303 	lsl.w	r3, r2, r3
 8001aee:	69ba      	ldr	r2, [r7, #24]
 8001af0:	4313      	orrs	r3, r2
 8001af2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	69ba      	ldr	r2, [r7, #24]
 8001af8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b00:	2201      	movs	r2, #1
 8001b02:	69fb      	ldr	r3, [r7, #28]
 8001b04:	fa02 f303 	lsl.w	r3, r2, r3
 8001b08:	43db      	mvns	r3, r3
 8001b0a:	69ba      	ldr	r2, [r7, #24]
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	091b      	lsrs	r3, r3, #4
 8001b16:	f003 0201 	and.w	r2, r3, #1
 8001b1a:	69fb      	ldr	r3, [r7, #28]
 8001b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b20:	69ba      	ldr	r2, [r7, #24]
 8001b22:	4313      	orrs	r3, r2
 8001b24:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	69ba      	ldr	r2, [r7, #24]
 8001b2a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	68db      	ldr	r3, [r3, #12]
 8001b30:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b32:	69fb      	ldr	r3, [r7, #28]
 8001b34:	005b      	lsls	r3, r3, #1
 8001b36:	2203      	movs	r2, #3
 8001b38:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3c:	43db      	mvns	r3, r3
 8001b3e:	69ba      	ldr	r2, [r7, #24]
 8001b40:	4013      	ands	r3, r2
 8001b42:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	689a      	ldr	r2, [r3, #8]
 8001b48:	69fb      	ldr	r3, [r7, #28]
 8001b4a:	005b      	lsls	r3, r3, #1
 8001b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b50:	69ba      	ldr	r2, [r7, #24]
 8001b52:	4313      	orrs	r3, r2
 8001b54:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	69ba      	ldr	r2, [r7, #24]
 8001b5a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	2b02      	cmp	r3, #2
 8001b62:	d003      	beq.n	8001b6c <HAL_GPIO_Init+0xfc>
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	2b12      	cmp	r3, #18
 8001b6a:	d123      	bne.n	8001bb4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b6c:	69fb      	ldr	r3, [r7, #28]
 8001b6e:	08da      	lsrs	r2, r3, #3
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	3208      	adds	r2, #8
 8001b74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b78:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b7a:	69fb      	ldr	r3, [r7, #28]
 8001b7c:	f003 0307 	and.w	r3, r3, #7
 8001b80:	009b      	lsls	r3, r3, #2
 8001b82:	220f      	movs	r2, #15
 8001b84:	fa02 f303 	lsl.w	r3, r2, r3
 8001b88:	43db      	mvns	r3, r3
 8001b8a:	69ba      	ldr	r2, [r7, #24]
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	691a      	ldr	r2, [r3, #16]
 8001b94:	69fb      	ldr	r3, [r7, #28]
 8001b96:	f003 0307 	and.w	r3, r3, #7
 8001b9a:	009b      	lsls	r3, r3, #2
 8001b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba0:	69ba      	ldr	r2, [r7, #24]
 8001ba2:	4313      	orrs	r3, r2
 8001ba4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001ba6:	69fb      	ldr	r3, [r7, #28]
 8001ba8:	08da      	lsrs	r2, r3, #3
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	3208      	adds	r2, #8
 8001bae:	69b9      	ldr	r1, [r7, #24]
 8001bb0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001bba:	69fb      	ldr	r3, [r7, #28]
 8001bbc:	005b      	lsls	r3, r3, #1
 8001bbe:	2203      	movs	r2, #3
 8001bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc4:	43db      	mvns	r3, r3
 8001bc6:	69ba      	ldr	r2, [r7, #24]
 8001bc8:	4013      	ands	r3, r2
 8001bca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	f003 0203 	and.w	r2, r3, #3
 8001bd4:	69fb      	ldr	r3, [r7, #28]
 8001bd6:	005b      	lsls	r3, r3, #1
 8001bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bdc:	69ba      	ldr	r2, [r7, #24]
 8001bde:	4313      	orrs	r3, r2
 8001be0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	69ba      	ldr	r2, [r7, #24]
 8001be6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	f000 80a2 	beq.w	8001d3a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	60fb      	str	r3, [r7, #12]
 8001bfa:	4b56      	ldr	r3, [pc, #344]	; (8001d54 <HAL_GPIO_Init+0x2e4>)
 8001bfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bfe:	4a55      	ldr	r2, [pc, #340]	; (8001d54 <HAL_GPIO_Init+0x2e4>)
 8001c00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c04:	6453      	str	r3, [r2, #68]	; 0x44
 8001c06:	4b53      	ldr	r3, [pc, #332]	; (8001d54 <HAL_GPIO_Init+0x2e4>)
 8001c08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c0e:	60fb      	str	r3, [r7, #12]
 8001c10:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c12:	4a51      	ldr	r2, [pc, #324]	; (8001d58 <HAL_GPIO_Init+0x2e8>)
 8001c14:	69fb      	ldr	r3, [r7, #28]
 8001c16:	089b      	lsrs	r3, r3, #2
 8001c18:	3302      	adds	r3, #2
 8001c1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c20:	69fb      	ldr	r3, [r7, #28]
 8001c22:	f003 0303 	and.w	r3, r3, #3
 8001c26:	009b      	lsls	r3, r3, #2
 8001c28:	220f      	movs	r2, #15
 8001c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2e:	43db      	mvns	r3, r3
 8001c30:	69ba      	ldr	r2, [r7, #24]
 8001c32:	4013      	ands	r3, r2
 8001c34:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	4a48      	ldr	r2, [pc, #288]	; (8001d5c <HAL_GPIO_Init+0x2ec>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d019      	beq.n	8001c72 <HAL_GPIO_Init+0x202>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	4a47      	ldr	r2, [pc, #284]	; (8001d60 <HAL_GPIO_Init+0x2f0>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d013      	beq.n	8001c6e <HAL_GPIO_Init+0x1fe>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	4a46      	ldr	r2, [pc, #280]	; (8001d64 <HAL_GPIO_Init+0x2f4>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d00d      	beq.n	8001c6a <HAL_GPIO_Init+0x1fa>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	4a45      	ldr	r2, [pc, #276]	; (8001d68 <HAL_GPIO_Init+0x2f8>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d007      	beq.n	8001c66 <HAL_GPIO_Init+0x1f6>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	4a44      	ldr	r2, [pc, #272]	; (8001d6c <HAL_GPIO_Init+0x2fc>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d101      	bne.n	8001c62 <HAL_GPIO_Init+0x1f2>
 8001c5e:	2304      	movs	r3, #4
 8001c60:	e008      	b.n	8001c74 <HAL_GPIO_Init+0x204>
 8001c62:	2307      	movs	r3, #7
 8001c64:	e006      	b.n	8001c74 <HAL_GPIO_Init+0x204>
 8001c66:	2303      	movs	r3, #3
 8001c68:	e004      	b.n	8001c74 <HAL_GPIO_Init+0x204>
 8001c6a:	2302      	movs	r3, #2
 8001c6c:	e002      	b.n	8001c74 <HAL_GPIO_Init+0x204>
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e000      	b.n	8001c74 <HAL_GPIO_Init+0x204>
 8001c72:	2300      	movs	r3, #0
 8001c74:	69fa      	ldr	r2, [r7, #28]
 8001c76:	f002 0203 	and.w	r2, r2, #3
 8001c7a:	0092      	lsls	r2, r2, #2
 8001c7c:	4093      	lsls	r3, r2
 8001c7e:	69ba      	ldr	r2, [r7, #24]
 8001c80:	4313      	orrs	r3, r2
 8001c82:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c84:	4934      	ldr	r1, [pc, #208]	; (8001d58 <HAL_GPIO_Init+0x2e8>)
 8001c86:	69fb      	ldr	r3, [r7, #28]
 8001c88:	089b      	lsrs	r3, r3, #2
 8001c8a:	3302      	adds	r3, #2
 8001c8c:	69ba      	ldr	r2, [r7, #24]
 8001c8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c92:	4b37      	ldr	r3, [pc, #220]	; (8001d70 <HAL_GPIO_Init+0x300>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c98:	693b      	ldr	r3, [r7, #16]
 8001c9a:	43db      	mvns	r3, r3
 8001c9c:	69ba      	ldr	r2, [r7, #24]
 8001c9e:	4013      	ands	r3, r2
 8001ca0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d003      	beq.n	8001cb6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001cae:	69ba      	ldr	r2, [r7, #24]
 8001cb0:	693b      	ldr	r3, [r7, #16]
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001cb6:	4a2e      	ldr	r2, [pc, #184]	; (8001d70 <HAL_GPIO_Init+0x300>)
 8001cb8:	69bb      	ldr	r3, [r7, #24]
 8001cba:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001cbc:	4b2c      	ldr	r3, [pc, #176]	; (8001d70 <HAL_GPIO_Init+0x300>)
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cc2:	693b      	ldr	r3, [r7, #16]
 8001cc4:	43db      	mvns	r3, r3
 8001cc6:	69ba      	ldr	r2, [r7, #24]
 8001cc8:	4013      	ands	r3, r2
 8001cca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d003      	beq.n	8001ce0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001cd8:	69ba      	ldr	r2, [r7, #24]
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	4313      	orrs	r3, r2
 8001cde:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ce0:	4a23      	ldr	r2, [pc, #140]	; (8001d70 <HAL_GPIO_Init+0x300>)
 8001ce2:	69bb      	ldr	r3, [r7, #24]
 8001ce4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ce6:	4b22      	ldr	r3, [pc, #136]	; (8001d70 <HAL_GPIO_Init+0x300>)
 8001ce8:	689b      	ldr	r3, [r3, #8]
 8001cea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	43db      	mvns	r3, r3
 8001cf0:	69ba      	ldr	r2, [r7, #24]
 8001cf2:	4013      	ands	r3, r2
 8001cf4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d003      	beq.n	8001d0a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001d02:	69ba      	ldr	r2, [r7, #24]
 8001d04:	693b      	ldr	r3, [r7, #16]
 8001d06:	4313      	orrs	r3, r2
 8001d08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d0a:	4a19      	ldr	r2, [pc, #100]	; (8001d70 <HAL_GPIO_Init+0x300>)
 8001d0c:	69bb      	ldr	r3, [r7, #24]
 8001d0e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d10:	4b17      	ldr	r3, [pc, #92]	; (8001d70 <HAL_GPIO_Init+0x300>)
 8001d12:	68db      	ldr	r3, [r3, #12]
 8001d14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	43db      	mvns	r3, r3
 8001d1a:	69ba      	ldr	r2, [r7, #24]
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d003      	beq.n	8001d34 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001d2c:	69ba      	ldr	r2, [r7, #24]
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	4313      	orrs	r3, r2
 8001d32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d34:	4a0e      	ldr	r2, [pc, #56]	; (8001d70 <HAL_GPIO_Init+0x300>)
 8001d36:	69bb      	ldr	r3, [r7, #24]
 8001d38:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d3a:	69fb      	ldr	r3, [r7, #28]
 8001d3c:	3301      	adds	r3, #1
 8001d3e:	61fb      	str	r3, [r7, #28]
 8001d40:	69fb      	ldr	r3, [r7, #28]
 8001d42:	2b0f      	cmp	r3, #15
 8001d44:	f67f aea2 	bls.w	8001a8c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d48:	bf00      	nop
 8001d4a:	3724      	adds	r7, #36	; 0x24
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d52:	4770      	bx	lr
 8001d54:	40023800 	.word	0x40023800
 8001d58:	40013800 	.word	0x40013800
 8001d5c:	40020000 	.word	0x40020000
 8001d60:	40020400 	.word	0x40020400
 8001d64:	40020800 	.word	0x40020800
 8001d68:	40020c00 	.word	0x40020c00
 8001d6c:	40021000 	.word	0x40021000
 8001d70:	40013c00 	.word	0x40013c00

08001d74 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b085      	sub	sp, #20
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
 8001d7c:	460b      	mov	r3, r1
 8001d7e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	691a      	ldr	r2, [r3, #16]
 8001d84:	887b      	ldrh	r3, [r7, #2]
 8001d86:	4013      	ands	r3, r2
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d002      	beq.n	8001d92 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	73fb      	strb	r3, [r7, #15]
 8001d90:	e001      	b.n	8001d96 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001d92:	2300      	movs	r3, #0
 8001d94:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001d96:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d98:	4618      	mov	r0, r3
 8001d9a:	3714      	adds	r7, #20
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da2:	4770      	bx	lr

08001da4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b083      	sub	sp, #12
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
 8001dac:	460b      	mov	r3, r1
 8001dae:	807b      	strh	r3, [r7, #2]
 8001db0:	4613      	mov	r3, r2
 8001db2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001db4:	787b      	ldrb	r3, [r7, #1]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d003      	beq.n	8001dc2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001dba:	887a      	ldrh	r2, [r7, #2]
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001dc0:	e003      	b.n	8001dca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001dc2:	887b      	ldrh	r3, [r7, #2]
 8001dc4:	041a      	lsls	r2, r3, #16
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	619a      	str	r2, [r3, #24]
}
 8001dca:	bf00      	nop
 8001dcc:	370c      	adds	r7, #12
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr

08001dd6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001dd6:	b480      	push	{r7}
 8001dd8:	b083      	sub	sp, #12
 8001dda:	af00      	add	r7, sp, #0
 8001ddc:	6078      	str	r0, [r7, #4]
 8001dde:	460b      	mov	r3, r1
 8001de0:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	695a      	ldr	r2, [r3, #20]
 8001de6:	887b      	ldrh	r3, [r7, #2]
 8001de8:	401a      	ands	r2, r3
 8001dea:	887b      	ldrh	r3, [r7, #2]
 8001dec:	429a      	cmp	r2, r3
 8001dee:	d104      	bne.n	8001dfa <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001df0:	887b      	ldrh	r3, [r7, #2]
 8001df2:	041a      	lsls	r2, r3, #16
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8001df8:	e002      	b.n	8001e00 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8001dfa:	887a      	ldrh	r2, [r7, #2]
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	619a      	str	r2, [r3, #24]
}
 8001e00:	bf00      	nop
 8001e02:	370c      	adds	r7, #12
 8001e04:	46bd      	mov	sp, r7
 8001e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0a:	4770      	bx	lr

08001e0c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b086      	sub	sp, #24
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d101      	bne.n	8001e1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e25b      	b.n	80022d6 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f003 0301 	and.w	r3, r3, #1
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d075      	beq.n	8001f16 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001e2a:	4ba3      	ldr	r3, [pc, #652]	; (80020b8 <HAL_RCC_OscConfig+0x2ac>)
 8001e2c:	689b      	ldr	r3, [r3, #8]
 8001e2e:	f003 030c 	and.w	r3, r3, #12
 8001e32:	2b04      	cmp	r3, #4
 8001e34:	d00c      	beq.n	8001e50 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e36:	4ba0      	ldr	r3, [pc, #640]	; (80020b8 <HAL_RCC_OscConfig+0x2ac>)
 8001e38:	689b      	ldr	r3, [r3, #8]
 8001e3a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001e3e:	2b08      	cmp	r3, #8
 8001e40:	d112      	bne.n	8001e68 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e42:	4b9d      	ldr	r3, [pc, #628]	; (80020b8 <HAL_RCC_OscConfig+0x2ac>)
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e4a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e4e:	d10b      	bne.n	8001e68 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e50:	4b99      	ldr	r3, [pc, #612]	; (80020b8 <HAL_RCC_OscConfig+0x2ac>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d05b      	beq.n	8001f14 <HAL_RCC_OscConfig+0x108>
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d157      	bne.n	8001f14 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001e64:	2301      	movs	r3, #1
 8001e66:	e236      	b.n	80022d6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e70:	d106      	bne.n	8001e80 <HAL_RCC_OscConfig+0x74>
 8001e72:	4b91      	ldr	r3, [pc, #580]	; (80020b8 <HAL_RCC_OscConfig+0x2ac>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a90      	ldr	r2, [pc, #576]	; (80020b8 <HAL_RCC_OscConfig+0x2ac>)
 8001e78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e7c:	6013      	str	r3, [r2, #0]
 8001e7e:	e01d      	b.n	8001ebc <HAL_RCC_OscConfig+0xb0>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e88:	d10c      	bne.n	8001ea4 <HAL_RCC_OscConfig+0x98>
 8001e8a:	4b8b      	ldr	r3, [pc, #556]	; (80020b8 <HAL_RCC_OscConfig+0x2ac>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a8a      	ldr	r2, [pc, #552]	; (80020b8 <HAL_RCC_OscConfig+0x2ac>)
 8001e90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e94:	6013      	str	r3, [r2, #0]
 8001e96:	4b88      	ldr	r3, [pc, #544]	; (80020b8 <HAL_RCC_OscConfig+0x2ac>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4a87      	ldr	r2, [pc, #540]	; (80020b8 <HAL_RCC_OscConfig+0x2ac>)
 8001e9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ea0:	6013      	str	r3, [r2, #0]
 8001ea2:	e00b      	b.n	8001ebc <HAL_RCC_OscConfig+0xb0>
 8001ea4:	4b84      	ldr	r3, [pc, #528]	; (80020b8 <HAL_RCC_OscConfig+0x2ac>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a83      	ldr	r2, [pc, #524]	; (80020b8 <HAL_RCC_OscConfig+0x2ac>)
 8001eaa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001eae:	6013      	str	r3, [r2, #0]
 8001eb0:	4b81      	ldr	r3, [pc, #516]	; (80020b8 <HAL_RCC_OscConfig+0x2ac>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a80      	ldr	r2, [pc, #512]	; (80020b8 <HAL_RCC_OscConfig+0x2ac>)
 8001eb6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001eba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d013      	beq.n	8001eec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ec4:	f7ff f916 	bl	80010f4 <HAL_GetTick>
 8001ec8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eca:	e008      	b.n	8001ede <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ecc:	f7ff f912 	bl	80010f4 <HAL_GetTick>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	1ad3      	subs	r3, r2, r3
 8001ed6:	2b64      	cmp	r3, #100	; 0x64
 8001ed8:	d901      	bls.n	8001ede <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001eda:	2303      	movs	r3, #3
 8001edc:	e1fb      	b.n	80022d6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ede:	4b76      	ldr	r3, [pc, #472]	; (80020b8 <HAL_RCC_OscConfig+0x2ac>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d0f0      	beq.n	8001ecc <HAL_RCC_OscConfig+0xc0>
 8001eea:	e014      	b.n	8001f16 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eec:	f7ff f902 	bl	80010f4 <HAL_GetTick>
 8001ef0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ef2:	e008      	b.n	8001f06 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ef4:	f7ff f8fe 	bl	80010f4 <HAL_GetTick>
 8001ef8:	4602      	mov	r2, r0
 8001efa:	693b      	ldr	r3, [r7, #16]
 8001efc:	1ad3      	subs	r3, r2, r3
 8001efe:	2b64      	cmp	r3, #100	; 0x64
 8001f00:	d901      	bls.n	8001f06 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f02:	2303      	movs	r3, #3
 8001f04:	e1e7      	b.n	80022d6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f06:	4b6c      	ldr	r3, [pc, #432]	; (80020b8 <HAL_RCC_OscConfig+0x2ac>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d1f0      	bne.n	8001ef4 <HAL_RCC_OscConfig+0xe8>
 8001f12:	e000      	b.n	8001f16 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f003 0302 	and.w	r3, r3, #2
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d063      	beq.n	8001fea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f22:	4b65      	ldr	r3, [pc, #404]	; (80020b8 <HAL_RCC_OscConfig+0x2ac>)
 8001f24:	689b      	ldr	r3, [r3, #8]
 8001f26:	f003 030c 	and.w	r3, r3, #12
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d00b      	beq.n	8001f46 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f2e:	4b62      	ldr	r3, [pc, #392]	; (80020b8 <HAL_RCC_OscConfig+0x2ac>)
 8001f30:	689b      	ldr	r3, [r3, #8]
 8001f32:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f36:	2b08      	cmp	r3, #8
 8001f38:	d11c      	bne.n	8001f74 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f3a:	4b5f      	ldr	r3, [pc, #380]	; (80020b8 <HAL_RCC_OscConfig+0x2ac>)
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d116      	bne.n	8001f74 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f46:	4b5c      	ldr	r3, [pc, #368]	; (80020b8 <HAL_RCC_OscConfig+0x2ac>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f003 0302 	and.w	r3, r3, #2
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d005      	beq.n	8001f5e <HAL_RCC_OscConfig+0x152>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	68db      	ldr	r3, [r3, #12]
 8001f56:	2b01      	cmp	r3, #1
 8001f58:	d001      	beq.n	8001f5e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e1bb      	b.n	80022d6 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f5e:	4b56      	ldr	r3, [pc, #344]	; (80020b8 <HAL_RCC_OscConfig+0x2ac>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	691b      	ldr	r3, [r3, #16]
 8001f6a:	00db      	lsls	r3, r3, #3
 8001f6c:	4952      	ldr	r1, [pc, #328]	; (80020b8 <HAL_RCC_OscConfig+0x2ac>)
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f72:	e03a      	b.n	8001fea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	68db      	ldr	r3, [r3, #12]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d020      	beq.n	8001fbe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f7c:	4b4f      	ldr	r3, [pc, #316]	; (80020bc <HAL_RCC_OscConfig+0x2b0>)
 8001f7e:	2201      	movs	r2, #1
 8001f80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f82:	f7ff f8b7 	bl	80010f4 <HAL_GetTick>
 8001f86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f88:	e008      	b.n	8001f9c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f8a:	f7ff f8b3 	bl	80010f4 <HAL_GetTick>
 8001f8e:	4602      	mov	r2, r0
 8001f90:	693b      	ldr	r3, [r7, #16]
 8001f92:	1ad3      	subs	r3, r2, r3
 8001f94:	2b02      	cmp	r3, #2
 8001f96:	d901      	bls.n	8001f9c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001f98:	2303      	movs	r3, #3
 8001f9a:	e19c      	b.n	80022d6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f9c:	4b46      	ldr	r3, [pc, #280]	; (80020b8 <HAL_RCC_OscConfig+0x2ac>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f003 0302 	and.w	r3, r3, #2
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d0f0      	beq.n	8001f8a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fa8:	4b43      	ldr	r3, [pc, #268]	; (80020b8 <HAL_RCC_OscConfig+0x2ac>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	691b      	ldr	r3, [r3, #16]
 8001fb4:	00db      	lsls	r3, r3, #3
 8001fb6:	4940      	ldr	r1, [pc, #256]	; (80020b8 <HAL_RCC_OscConfig+0x2ac>)
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	600b      	str	r3, [r1, #0]
 8001fbc:	e015      	b.n	8001fea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fbe:	4b3f      	ldr	r3, [pc, #252]	; (80020bc <HAL_RCC_OscConfig+0x2b0>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fc4:	f7ff f896 	bl	80010f4 <HAL_GetTick>
 8001fc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fca:	e008      	b.n	8001fde <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fcc:	f7ff f892 	bl	80010f4 <HAL_GetTick>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	693b      	ldr	r3, [r7, #16]
 8001fd4:	1ad3      	subs	r3, r2, r3
 8001fd6:	2b02      	cmp	r3, #2
 8001fd8:	d901      	bls.n	8001fde <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001fda:	2303      	movs	r3, #3
 8001fdc:	e17b      	b.n	80022d6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fde:	4b36      	ldr	r3, [pc, #216]	; (80020b8 <HAL_RCC_OscConfig+0x2ac>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f003 0302 	and.w	r3, r3, #2
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d1f0      	bne.n	8001fcc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f003 0308 	and.w	r3, r3, #8
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d030      	beq.n	8002058 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	695b      	ldr	r3, [r3, #20]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d016      	beq.n	800202c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ffe:	4b30      	ldr	r3, [pc, #192]	; (80020c0 <HAL_RCC_OscConfig+0x2b4>)
 8002000:	2201      	movs	r2, #1
 8002002:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002004:	f7ff f876 	bl	80010f4 <HAL_GetTick>
 8002008:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800200a:	e008      	b.n	800201e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800200c:	f7ff f872 	bl	80010f4 <HAL_GetTick>
 8002010:	4602      	mov	r2, r0
 8002012:	693b      	ldr	r3, [r7, #16]
 8002014:	1ad3      	subs	r3, r2, r3
 8002016:	2b02      	cmp	r3, #2
 8002018:	d901      	bls.n	800201e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800201a:	2303      	movs	r3, #3
 800201c:	e15b      	b.n	80022d6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800201e:	4b26      	ldr	r3, [pc, #152]	; (80020b8 <HAL_RCC_OscConfig+0x2ac>)
 8002020:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002022:	f003 0302 	and.w	r3, r3, #2
 8002026:	2b00      	cmp	r3, #0
 8002028:	d0f0      	beq.n	800200c <HAL_RCC_OscConfig+0x200>
 800202a:	e015      	b.n	8002058 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800202c:	4b24      	ldr	r3, [pc, #144]	; (80020c0 <HAL_RCC_OscConfig+0x2b4>)
 800202e:	2200      	movs	r2, #0
 8002030:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002032:	f7ff f85f 	bl	80010f4 <HAL_GetTick>
 8002036:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002038:	e008      	b.n	800204c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800203a:	f7ff f85b 	bl	80010f4 <HAL_GetTick>
 800203e:	4602      	mov	r2, r0
 8002040:	693b      	ldr	r3, [r7, #16]
 8002042:	1ad3      	subs	r3, r2, r3
 8002044:	2b02      	cmp	r3, #2
 8002046:	d901      	bls.n	800204c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002048:	2303      	movs	r3, #3
 800204a:	e144      	b.n	80022d6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800204c:	4b1a      	ldr	r3, [pc, #104]	; (80020b8 <HAL_RCC_OscConfig+0x2ac>)
 800204e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002050:	f003 0302 	and.w	r3, r3, #2
 8002054:	2b00      	cmp	r3, #0
 8002056:	d1f0      	bne.n	800203a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f003 0304 	and.w	r3, r3, #4
 8002060:	2b00      	cmp	r3, #0
 8002062:	f000 80a0 	beq.w	80021a6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002066:	2300      	movs	r3, #0
 8002068:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800206a:	4b13      	ldr	r3, [pc, #76]	; (80020b8 <HAL_RCC_OscConfig+0x2ac>)
 800206c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800206e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002072:	2b00      	cmp	r3, #0
 8002074:	d10f      	bne.n	8002096 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002076:	2300      	movs	r3, #0
 8002078:	60bb      	str	r3, [r7, #8]
 800207a:	4b0f      	ldr	r3, [pc, #60]	; (80020b8 <HAL_RCC_OscConfig+0x2ac>)
 800207c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800207e:	4a0e      	ldr	r2, [pc, #56]	; (80020b8 <HAL_RCC_OscConfig+0x2ac>)
 8002080:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002084:	6413      	str	r3, [r2, #64]	; 0x40
 8002086:	4b0c      	ldr	r3, [pc, #48]	; (80020b8 <HAL_RCC_OscConfig+0x2ac>)
 8002088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800208a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800208e:	60bb      	str	r3, [r7, #8]
 8002090:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002092:	2301      	movs	r3, #1
 8002094:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002096:	4b0b      	ldr	r3, [pc, #44]	; (80020c4 <HAL_RCC_OscConfig+0x2b8>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d121      	bne.n	80020e6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020a2:	4b08      	ldr	r3, [pc, #32]	; (80020c4 <HAL_RCC_OscConfig+0x2b8>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4a07      	ldr	r2, [pc, #28]	; (80020c4 <HAL_RCC_OscConfig+0x2b8>)
 80020a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020ae:	f7ff f821 	bl	80010f4 <HAL_GetTick>
 80020b2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020b4:	e011      	b.n	80020da <HAL_RCC_OscConfig+0x2ce>
 80020b6:	bf00      	nop
 80020b8:	40023800 	.word	0x40023800
 80020bc:	42470000 	.word	0x42470000
 80020c0:	42470e80 	.word	0x42470e80
 80020c4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020c8:	f7ff f814 	bl	80010f4 <HAL_GetTick>
 80020cc:	4602      	mov	r2, r0
 80020ce:	693b      	ldr	r3, [r7, #16]
 80020d0:	1ad3      	subs	r3, r2, r3
 80020d2:	2b02      	cmp	r3, #2
 80020d4:	d901      	bls.n	80020da <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80020d6:	2303      	movs	r3, #3
 80020d8:	e0fd      	b.n	80022d6 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020da:	4b81      	ldr	r3, [pc, #516]	; (80022e0 <HAL_RCC_OscConfig+0x4d4>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d0f0      	beq.n	80020c8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	689b      	ldr	r3, [r3, #8]
 80020ea:	2b01      	cmp	r3, #1
 80020ec:	d106      	bne.n	80020fc <HAL_RCC_OscConfig+0x2f0>
 80020ee:	4b7d      	ldr	r3, [pc, #500]	; (80022e4 <HAL_RCC_OscConfig+0x4d8>)
 80020f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020f2:	4a7c      	ldr	r2, [pc, #496]	; (80022e4 <HAL_RCC_OscConfig+0x4d8>)
 80020f4:	f043 0301 	orr.w	r3, r3, #1
 80020f8:	6713      	str	r3, [r2, #112]	; 0x70
 80020fa:	e01c      	b.n	8002136 <HAL_RCC_OscConfig+0x32a>
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	689b      	ldr	r3, [r3, #8]
 8002100:	2b05      	cmp	r3, #5
 8002102:	d10c      	bne.n	800211e <HAL_RCC_OscConfig+0x312>
 8002104:	4b77      	ldr	r3, [pc, #476]	; (80022e4 <HAL_RCC_OscConfig+0x4d8>)
 8002106:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002108:	4a76      	ldr	r2, [pc, #472]	; (80022e4 <HAL_RCC_OscConfig+0x4d8>)
 800210a:	f043 0304 	orr.w	r3, r3, #4
 800210e:	6713      	str	r3, [r2, #112]	; 0x70
 8002110:	4b74      	ldr	r3, [pc, #464]	; (80022e4 <HAL_RCC_OscConfig+0x4d8>)
 8002112:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002114:	4a73      	ldr	r2, [pc, #460]	; (80022e4 <HAL_RCC_OscConfig+0x4d8>)
 8002116:	f043 0301 	orr.w	r3, r3, #1
 800211a:	6713      	str	r3, [r2, #112]	; 0x70
 800211c:	e00b      	b.n	8002136 <HAL_RCC_OscConfig+0x32a>
 800211e:	4b71      	ldr	r3, [pc, #452]	; (80022e4 <HAL_RCC_OscConfig+0x4d8>)
 8002120:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002122:	4a70      	ldr	r2, [pc, #448]	; (80022e4 <HAL_RCC_OscConfig+0x4d8>)
 8002124:	f023 0301 	bic.w	r3, r3, #1
 8002128:	6713      	str	r3, [r2, #112]	; 0x70
 800212a:	4b6e      	ldr	r3, [pc, #440]	; (80022e4 <HAL_RCC_OscConfig+0x4d8>)
 800212c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800212e:	4a6d      	ldr	r2, [pc, #436]	; (80022e4 <HAL_RCC_OscConfig+0x4d8>)
 8002130:	f023 0304 	bic.w	r3, r3, #4
 8002134:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	689b      	ldr	r3, [r3, #8]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d015      	beq.n	800216a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800213e:	f7fe ffd9 	bl	80010f4 <HAL_GetTick>
 8002142:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002144:	e00a      	b.n	800215c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002146:	f7fe ffd5 	bl	80010f4 <HAL_GetTick>
 800214a:	4602      	mov	r2, r0
 800214c:	693b      	ldr	r3, [r7, #16]
 800214e:	1ad3      	subs	r3, r2, r3
 8002150:	f241 3288 	movw	r2, #5000	; 0x1388
 8002154:	4293      	cmp	r3, r2
 8002156:	d901      	bls.n	800215c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002158:	2303      	movs	r3, #3
 800215a:	e0bc      	b.n	80022d6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800215c:	4b61      	ldr	r3, [pc, #388]	; (80022e4 <HAL_RCC_OscConfig+0x4d8>)
 800215e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002160:	f003 0302 	and.w	r3, r3, #2
 8002164:	2b00      	cmp	r3, #0
 8002166:	d0ee      	beq.n	8002146 <HAL_RCC_OscConfig+0x33a>
 8002168:	e014      	b.n	8002194 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800216a:	f7fe ffc3 	bl	80010f4 <HAL_GetTick>
 800216e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002170:	e00a      	b.n	8002188 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002172:	f7fe ffbf 	bl	80010f4 <HAL_GetTick>
 8002176:	4602      	mov	r2, r0
 8002178:	693b      	ldr	r3, [r7, #16]
 800217a:	1ad3      	subs	r3, r2, r3
 800217c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002180:	4293      	cmp	r3, r2
 8002182:	d901      	bls.n	8002188 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002184:	2303      	movs	r3, #3
 8002186:	e0a6      	b.n	80022d6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002188:	4b56      	ldr	r3, [pc, #344]	; (80022e4 <HAL_RCC_OscConfig+0x4d8>)
 800218a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800218c:	f003 0302 	and.w	r3, r3, #2
 8002190:	2b00      	cmp	r3, #0
 8002192:	d1ee      	bne.n	8002172 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002194:	7dfb      	ldrb	r3, [r7, #23]
 8002196:	2b01      	cmp	r3, #1
 8002198:	d105      	bne.n	80021a6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800219a:	4b52      	ldr	r3, [pc, #328]	; (80022e4 <HAL_RCC_OscConfig+0x4d8>)
 800219c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800219e:	4a51      	ldr	r2, [pc, #324]	; (80022e4 <HAL_RCC_OscConfig+0x4d8>)
 80021a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021a4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	699b      	ldr	r3, [r3, #24]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	f000 8092 	beq.w	80022d4 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80021b0:	4b4c      	ldr	r3, [pc, #304]	; (80022e4 <HAL_RCC_OscConfig+0x4d8>)
 80021b2:	689b      	ldr	r3, [r3, #8]
 80021b4:	f003 030c 	and.w	r3, r3, #12
 80021b8:	2b08      	cmp	r3, #8
 80021ba:	d05c      	beq.n	8002276 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	699b      	ldr	r3, [r3, #24]
 80021c0:	2b02      	cmp	r3, #2
 80021c2:	d141      	bne.n	8002248 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021c4:	4b48      	ldr	r3, [pc, #288]	; (80022e8 <HAL_RCC_OscConfig+0x4dc>)
 80021c6:	2200      	movs	r2, #0
 80021c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021ca:	f7fe ff93 	bl	80010f4 <HAL_GetTick>
 80021ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021d0:	e008      	b.n	80021e4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021d2:	f7fe ff8f 	bl	80010f4 <HAL_GetTick>
 80021d6:	4602      	mov	r2, r0
 80021d8:	693b      	ldr	r3, [r7, #16]
 80021da:	1ad3      	subs	r3, r2, r3
 80021dc:	2b02      	cmp	r3, #2
 80021de:	d901      	bls.n	80021e4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80021e0:	2303      	movs	r3, #3
 80021e2:	e078      	b.n	80022d6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021e4:	4b3f      	ldr	r3, [pc, #252]	; (80022e4 <HAL_RCC_OscConfig+0x4d8>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d1f0      	bne.n	80021d2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	69da      	ldr	r2, [r3, #28]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6a1b      	ldr	r3, [r3, #32]
 80021f8:	431a      	orrs	r2, r3
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021fe:	019b      	lsls	r3, r3, #6
 8002200:	431a      	orrs	r2, r3
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002206:	085b      	lsrs	r3, r3, #1
 8002208:	3b01      	subs	r3, #1
 800220a:	041b      	lsls	r3, r3, #16
 800220c:	431a      	orrs	r2, r3
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002212:	061b      	lsls	r3, r3, #24
 8002214:	4933      	ldr	r1, [pc, #204]	; (80022e4 <HAL_RCC_OscConfig+0x4d8>)
 8002216:	4313      	orrs	r3, r2
 8002218:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800221a:	4b33      	ldr	r3, [pc, #204]	; (80022e8 <HAL_RCC_OscConfig+0x4dc>)
 800221c:	2201      	movs	r2, #1
 800221e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002220:	f7fe ff68 	bl	80010f4 <HAL_GetTick>
 8002224:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002226:	e008      	b.n	800223a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002228:	f7fe ff64 	bl	80010f4 <HAL_GetTick>
 800222c:	4602      	mov	r2, r0
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	1ad3      	subs	r3, r2, r3
 8002232:	2b02      	cmp	r3, #2
 8002234:	d901      	bls.n	800223a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002236:	2303      	movs	r3, #3
 8002238:	e04d      	b.n	80022d6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800223a:	4b2a      	ldr	r3, [pc, #168]	; (80022e4 <HAL_RCC_OscConfig+0x4d8>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002242:	2b00      	cmp	r3, #0
 8002244:	d0f0      	beq.n	8002228 <HAL_RCC_OscConfig+0x41c>
 8002246:	e045      	b.n	80022d4 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002248:	4b27      	ldr	r3, [pc, #156]	; (80022e8 <HAL_RCC_OscConfig+0x4dc>)
 800224a:	2200      	movs	r2, #0
 800224c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800224e:	f7fe ff51 	bl	80010f4 <HAL_GetTick>
 8002252:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002254:	e008      	b.n	8002268 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002256:	f7fe ff4d 	bl	80010f4 <HAL_GetTick>
 800225a:	4602      	mov	r2, r0
 800225c:	693b      	ldr	r3, [r7, #16]
 800225e:	1ad3      	subs	r3, r2, r3
 8002260:	2b02      	cmp	r3, #2
 8002262:	d901      	bls.n	8002268 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002264:	2303      	movs	r3, #3
 8002266:	e036      	b.n	80022d6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002268:	4b1e      	ldr	r3, [pc, #120]	; (80022e4 <HAL_RCC_OscConfig+0x4d8>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002270:	2b00      	cmp	r3, #0
 8002272:	d1f0      	bne.n	8002256 <HAL_RCC_OscConfig+0x44a>
 8002274:	e02e      	b.n	80022d4 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	699b      	ldr	r3, [r3, #24]
 800227a:	2b01      	cmp	r3, #1
 800227c:	d101      	bne.n	8002282 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800227e:	2301      	movs	r3, #1
 8002280:	e029      	b.n	80022d6 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002282:	4b18      	ldr	r3, [pc, #96]	; (80022e4 <HAL_RCC_OscConfig+0x4d8>)
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	69db      	ldr	r3, [r3, #28]
 8002292:	429a      	cmp	r2, r3
 8002294:	d11c      	bne.n	80022d0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022a0:	429a      	cmp	r2, r3
 80022a2:	d115      	bne.n	80022d0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80022a4:	68fa      	ldr	r2, [r7, #12]
 80022a6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80022aa:	4013      	ands	r3, r2
 80022ac:	687a      	ldr	r2, [r7, #4]
 80022ae:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d10d      	bne.n	80022d0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80022be:	429a      	cmp	r2, r3
 80022c0:	d106      	bne.n	80022d0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80022cc:	429a      	cmp	r2, r3
 80022ce:	d001      	beq.n	80022d4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80022d0:	2301      	movs	r3, #1
 80022d2:	e000      	b.n	80022d6 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80022d4:	2300      	movs	r3, #0
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	3718      	adds	r7, #24
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop
 80022e0:	40007000 	.word	0x40007000
 80022e4:	40023800 	.word	0x40023800
 80022e8:	42470060 	.word	0x42470060

080022ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b084      	sub	sp, #16
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
 80022f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d101      	bne.n	8002300 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022fc:	2301      	movs	r3, #1
 80022fe:	e0cc      	b.n	800249a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002300:	4b68      	ldr	r3, [pc, #416]	; (80024a4 <HAL_RCC_ClockConfig+0x1b8>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f003 030f 	and.w	r3, r3, #15
 8002308:	683a      	ldr	r2, [r7, #0]
 800230a:	429a      	cmp	r2, r3
 800230c:	d90c      	bls.n	8002328 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800230e:	4b65      	ldr	r3, [pc, #404]	; (80024a4 <HAL_RCC_ClockConfig+0x1b8>)
 8002310:	683a      	ldr	r2, [r7, #0]
 8002312:	b2d2      	uxtb	r2, r2
 8002314:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002316:	4b63      	ldr	r3, [pc, #396]	; (80024a4 <HAL_RCC_ClockConfig+0x1b8>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f003 030f 	and.w	r3, r3, #15
 800231e:	683a      	ldr	r2, [r7, #0]
 8002320:	429a      	cmp	r2, r3
 8002322:	d001      	beq.n	8002328 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002324:	2301      	movs	r3, #1
 8002326:	e0b8      	b.n	800249a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f003 0302 	and.w	r3, r3, #2
 8002330:	2b00      	cmp	r3, #0
 8002332:	d020      	beq.n	8002376 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f003 0304 	and.w	r3, r3, #4
 800233c:	2b00      	cmp	r3, #0
 800233e:	d005      	beq.n	800234c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002340:	4b59      	ldr	r3, [pc, #356]	; (80024a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002342:	689b      	ldr	r3, [r3, #8]
 8002344:	4a58      	ldr	r2, [pc, #352]	; (80024a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002346:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800234a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f003 0308 	and.w	r3, r3, #8
 8002354:	2b00      	cmp	r3, #0
 8002356:	d005      	beq.n	8002364 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002358:	4b53      	ldr	r3, [pc, #332]	; (80024a8 <HAL_RCC_ClockConfig+0x1bc>)
 800235a:	689b      	ldr	r3, [r3, #8]
 800235c:	4a52      	ldr	r2, [pc, #328]	; (80024a8 <HAL_RCC_ClockConfig+0x1bc>)
 800235e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002362:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002364:	4b50      	ldr	r3, [pc, #320]	; (80024a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002366:	689b      	ldr	r3, [r3, #8]
 8002368:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	689b      	ldr	r3, [r3, #8]
 8002370:	494d      	ldr	r1, [pc, #308]	; (80024a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002372:	4313      	orrs	r3, r2
 8002374:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f003 0301 	and.w	r3, r3, #1
 800237e:	2b00      	cmp	r3, #0
 8002380:	d044      	beq.n	800240c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	2b01      	cmp	r3, #1
 8002388:	d107      	bne.n	800239a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800238a:	4b47      	ldr	r3, [pc, #284]	; (80024a8 <HAL_RCC_ClockConfig+0x1bc>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002392:	2b00      	cmp	r3, #0
 8002394:	d119      	bne.n	80023ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002396:	2301      	movs	r3, #1
 8002398:	e07f      	b.n	800249a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	2b02      	cmp	r3, #2
 80023a0:	d003      	beq.n	80023aa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80023a6:	2b03      	cmp	r3, #3
 80023a8:	d107      	bne.n	80023ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023aa:	4b3f      	ldr	r3, [pc, #252]	; (80024a8 <HAL_RCC_ClockConfig+0x1bc>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d109      	bne.n	80023ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
 80023b8:	e06f      	b.n	800249a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023ba:	4b3b      	ldr	r3, [pc, #236]	; (80024a8 <HAL_RCC_ClockConfig+0x1bc>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f003 0302 	and.w	r3, r3, #2
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d101      	bne.n	80023ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
 80023c8:	e067      	b.n	800249a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023ca:	4b37      	ldr	r3, [pc, #220]	; (80024a8 <HAL_RCC_ClockConfig+0x1bc>)
 80023cc:	689b      	ldr	r3, [r3, #8]
 80023ce:	f023 0203 	bic.w	r2, r3, #3
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	4934      	ldr	r1, [pc, #208]	; (80024a8 <HAL_RCC_ClockConfig+0x1bc>)
 80023d8:	4313      	orrs	r3, r2
 80023da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023dc:	f7fe fe8a 	bl	80010f4 <HAL_GetTick>
 80023e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023e2:	e00a      	b.n	80023fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023e4:	f7fe fe86 	bl	80010f4 <HAL_GetTick>
 80023e8:	4602      	mov	r2, r0
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	1ad3      	subs	r3, r2, r3
 80023ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d901      	bls.n	80023fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80023f6:	2303      	movs	r3, #3
 80023f8:	e04f      	b.n	800249a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023fa:	4b2b      	ldr	r3, [pc, #172]	; (80024a8 <HAL_RCC_ClockConfig+0x1bc>)
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	f003 020c 	and.w	r2, r3, #12
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	009b      	lsls	r3, r3, #2
 8002408:	429a      	cmp	r2, r3
 800240a:	d1eb      	bne.n	80023e4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800240c:	4b25      	ldr	r3, [pc, #148]	; (80024a4 <HAL_RCC_ClockConfig+0x1b8>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f003 030f 	and.w	r3, r3, #15
 8002414:	683a      	ldr	r2, [r7, #0]
 8002416:	429a      	cmp	r2, r3
 8002418:	d20c      	bcs.n	8002434 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800241a:	4b22      	ldr	r3, [pc, #136]	; (80024a4 <HAL_RCC_ClockConfig+0x1b8>)
 800241c:	683a      	ldr	r2, [r7, #0]
 800241e:	b2d2      	uxtb	r2, r2
 8002420:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002422:	4b20      	ldr	r3, [pc, #128]	; (80024a4 <HAL_RCC_ClockConfig+0x1b8>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f003 030f 	and.w	r3, r3, #15
 800242a:	683a      	ldr	r2, [r7, #0]
 800242c:	429a      	cmp	r2, r3
 800242e:	d001      	beq.n	8002434 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002430:	2301      	movs	r3, #1
 8002432:	e032      	b.n	800249a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f003 0304 	and.w	r3, r3, #4
 800243c:	2b00      	cmp	r3, #0
 800243e:	d008      	beq.n	8002452 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002440:	4b19      	ldr	r3, [pc, #100]	; (80024a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002442:	689b      	ldr	r3, [r3, #8]
 8002444:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	68db      	ldr	r3, [r3, #12]
 800244c:	4916      	ldr	r1, [pc, #88]	; (80024a8 <HAL_RCC_ClockConfig+0x1bc>)
 800244e:	4313      	orrs	r3, r2
 8002450:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f003 0308 	and.w	r3, r3, #8
 800245a:	2b00      	cmp	r3, #0
 800245c:	d009      	beq.n	8002472 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800245e:	4b12      	ldr	r3, [pc, #72]	; (80024a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002460:	689b      	ldr	r3, [r3, #8]
 8002462:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	691b      	ldr	r3, [r3, #16]
 800246a:	00db      	lsls	r3, r3, #3
 800246c:	490e      	ldr	r1, [pc, #56]	; (80024a8 <HAL_RCC_ClockConfig+0x1bc>)
 800246e:	4313      	orrs	r3, r2
 8002470:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002472:	f000 f821 	bl	80024b8 <HAL_RCC_GetSysClockFreq>
 8002476:	4601      	mov	r1, r0
 8002478:	4b0b      	ldr	r3, [pc, #44]	; (80024a8 <HAL_RCC_ClockConfig+0x1bc>)
 800247a:	689b      	ldr	r3, [r3, #8]
 800247c:	091b      	lsrs	r3, r3, #4
 800247e:	f003 030f 	and.w	r3, r3, #15
 8002482:	4a0a      	ldr	r2, [pc, #40]	; (80024ac <HAL_RCC_ClockConfig+0x1c0>)
 8002484:	5cd3      	ldrb	r3, [r2, r3]
 8002486:	fa21 f303 	lsr.w	r3, r1, r3
 800248a:	4a09      	ldr	r2, [pc, #36]	; (80024b0 <HAL_RCC_ClockConfig+0x1c4>)
 800248c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800248e:	4b09      	ldr	r3, [pc, #36]	; (80024b4 <HAL_RCC_ClockConfig+0x1c8>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4618      	mov	r0, r3
 8002494:	f7fe fdea 	bl	800106c <HAL_InitTick>

  return HAL_OK;
 8002498:	2300      	movs	r3, #0
}
 800249a:	4618      	mov	r0, r3
 800249c:	3710      	adds	r7, #16
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	bf00      	nop
 80024a4:	40023c00 	.word	0x40023c00
 80024a8:	40023800 	.word	0x40023800
 80024ac:	080059b4 	.word	0x080059b4
 80024b0:	20000000 	.word	0x20000000
 80024b4:	20000004 	.word	0x20000004

080024b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024ba:	b085      	sub	sp, #20
 80024bc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80024be:	2300      	movs	r3, #0
 80024c0:	607b      	str	r3, [r7, #4]
 80024c2:	2300      	movs	r3, #0
 80024c4:	60fb      	str	r3, [r7, #12]
 80024c6:	2300      	movs	r3, #0
 80024c8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80024ca:	2300      	movs	r3, #0
 80024cc:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80024ce:	4b63      	ldr	r3, [pc, #396]	; (800265c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80024d0:	689b      	ldr	r3, [r3, #8]
 80024d2:	f003 030c 	and.w	r3, r3, #12
 80024d6:	2b04      	cmp	r3, #4
 80024d8:	d007      	beq.n	80024ea <HAL_RCC_GetSysClockFreq+0x32>
 80024da:	2b08      	cmp	r3, #8
 80024dc:	d008      	beq.n	80024f0 <HAL_RCC_GetSysClockFreq+0x38>
 80024de:	2b00      	cmp	r3, #0
 80024e0:	f040 80b4 	bne.w	800264c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80024e4:	4b5e      	ldr	r3, [pc, #376]	; (8002660 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80024e6:	60bb      	str	r3, [r7, #8]
       break;
 80024e8:	e0b3      	b.n	8002652 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80024ea:	4b5e      	ldr	r3, [pc, #376]	; (8002664 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80024ec:	60bb      	str	r3, [r7, #8]
      break;
 80024ee:	e0b0      	b.n	8002652 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80024f0:	4b5a      	ldr	r3, [pc, #360]	; (800265c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80024f8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80024fa:	4b58      	ldr	r3, [pc, #352]	; (800265c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002502:	2b00      	cmp	r3, #0
 8002504:	d04a      	beq.n	800259c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002506:	4b55      	ldr	r3, [pc, #340]	; (800265c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	099b      	lsrs	r3, r3, #6
 800250c:	f04f 0400 	mov.w	r4, #0
 8002510:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002514:	f04f 0200 	mov.w	r2, #0
 8002518:	ea03 0501 	and.w	r5, r3, r1
 800251c:	ea04 0602 	and.w	r6, r4, r2
 8002520:	4629      	mov	r1, r5
 8002522:	4632      	mov	r2, r6
 8002524:	f04f 0300 	mov.w	r3, #0
 8002528:	f04f 0400 	mov.w	r4, #0
 800252c:	0154      	lsls	r4, r2, #5
 800252e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002532:	014b      	lsls	r3, r1, #5
 8002534:	4619      	mov	r1, r3
 8002536:	4622      	mov	r2, r4
 8002538:	1b49      	subs	r1, r1, r5
 800253a:	eb62 0206 	sbc.w	r2, r2, r6
 800253e:	f04f 0300 	mov.w	r3, #0
 8002542:	f04f 0400 	mov.w	r4, #0
 8002546:	0194      	lsls	r4, r2, #6
 8002548:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800254c:	018b      	lsls	r3, r1, #6
 800254e:	1a5b      	subs	r3, r3, r1
 8002550:	eb64 0402 	sbc.w	r4, r4, r2
 8002554:	f04f 0100 	mov.w	r1, #0
 8002558:	f04f 0200 	mov.w	r2, #0
 800255c:	00e2      	lsls	r2, r4, #3
 800255e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002562:	00d9      	lsls	r1, r3, #3
 8002564:	460b      	mov	r3, r1
 8002566:	4614      	mov	r4, r2
 8002568:	195b      	adds	r3, r3, r5
 800256a:	eb44 0406 	adc.w	r4, r4, r6
 800256e:	f04f 0100 	mov.w	r1, #0
 8002572:	f04f 0200 	mov.w	r2, #0
 8002576:	0262      	lsls	r2, r4, #9
 8002578:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800257c:	0259      	lsls	r1, r3, #9
 800257e:	460b      	mov	r3, r1
 8002580:	4614      	mov	r4, r2
 8002582:	4618      	mov	r0, r3
 8002584:	4621      	mov	r1, r4
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	f04f 0400 	mov.w	r4, #0
 800258c:	461a      	mov	r2, r3
 800258e:	4623      	mov	r3, r4
 8002590:	f7fd fe76 	bl	8000280 <__aeabi_uldivmod>
 8002594:	4603      	mov	r3, r0
 8002596:	460c      	mov	r4, r1
 8002598:	60fb      	str	r3, [r7, #12]
 800259a:	e049      	b.n	8002630 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800259c:	4b2f      	ldr	r3, [pc, #188]	; (800265c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	099b      	lsrs	r3, r3, #6
 80025a2:	f04f 0400 	mov.w	r4, #0
 80025a6:	f240 11ff 	movw	r1, #511	; 0x1ff
 80025aa:	f04f 0200 	mov.w	r2, #0
 80025ae:	ea03 0501 	and.w	r5, r3, r1
 80025b2:	ea04 0602 	and.w	r6, r4, r2
 80025b6:	4629      	mov	r1, r5
 80025b8:	4632      	mov	r2, r6
 80025ba:	f04f 0300 	mov.w	r3, #0
 80025be:	f04f 0400 	mov.w	r4, #0
 80025c2:	0154      	lsls	r4, r2, #5
 80025c4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80025c8:	014b      	lsls	r3, r1, #5
 80025ca:	4619      	mov	r1, r3
 80025cc:	4622      	mov	r2, r4
 80025ce:	1b49      	subs	r1, r1, r5
 80025d0:	eb62 0206 	sbc.w	r2, r2, r6
 80025d4:	f04f 0300 	mov.w	r3, #0
 80025d8:	f04f 0400 	mov.w	r4, #0
 80025dc:	0194      	lsls	r4, r2, #6
 80025de:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80025e2:	018b      	lsls	r3, r1, #6
 80025e4:	1a5b      	subs	r3, r3, r1
 80025e6:	eb64 0402 	sbc.w	r4, r4, r2
 80025ea:	f04f 0100 	mov.w	r1, #0
 80025ee:	f04f 0200 	mov.w	r2, #0
 80025f2:	00e2      	lsls	r2, r4, #3
 80025f4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80025f8:	00d9      	lsls	r1, r3, #3
 80025fa:	460b      	mov	r3, r1
 80025fc:	4614      	mov	r4, r2
 80025fe:	195b      	adds	r3, r3, r5
 8002600:	eb44 0406 	adc.w	r4, r4, r6
 8002604:	f04f 0100 	mov.w	r1, #0
 8002608:	f04f 0200 	mov.w	r2, #0
 800260c:	02a2      	lsls	r2, r4, #10
 800260e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002612:	0299      	lsls	r1, r3, #10
 8002614:	460b      	mov	r3, r1
 8002616:	4614      	mov	r4, r2
 8002618:	4618      	mov	r0, r3
 800261a:	4621      	mov	r1, r4
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	f04f 0400 	mov.w	r4, #0
 8002622:	461a      	mov	r2, r3
 8002624:	4623      	mov	r3, r4
 8002626:	f7fd fe2b 	bl	8000280 <__aeabi_uldivmod>
 800262a:	4603      	mov	r3, r0
 800262c:	460c      	mov	r4, r1
 800262e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002630:	4b0a      	ldr	r3, [pc, #40]	; (800265c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	0c1b      	lsrs	r3, r3, #16
 8002636:	f003 0303 	and.w	r3, r3, #3
 800263a:	3301      	adds	r3, #1
 800263c:	005b      	lsls	r3, r3, #1
 800263e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002640:	68fa      	ldr	r2, [r7, #12]
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	fbb2 f3f3 	udiv	r3, r2, r3
 8002648:	60bb      	str	r3, [r7, #8]
      break;
 800264a:	e002      	b.n	8002652 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800264c:	4b04      	ldr	r3, [pc, #16]	; (8002660 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800264e:	60bb      	str	r3, [r7, #8]
      break;
 8002650:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002652:	68bb      	ldr	r3, [r7, #8]
}
 8002654:	4618      	mov	r0, r3
 8002656:	3714      	adds	r7, #20
 8002658:	46bd      	mov	sp, r7
 800265a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800265c:	40023800 	.word	0x40023800
 8002660:	00f42400 	.word	0x00f42400
 8002664:	007a1200 	.word	0x007a1200

08002668 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002668:	b480      	push	{r7}
 800266a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800266c:	4b03      	ldr	r3, [pc, #12]	; (800267c <HAL_RCC_GetHCLKFreq+0x14>)
 800266e:	681b      	ldr	r3, [r3, #0]
}
 8002670:	4618      	mov	r0, r3
 8002672:	46bd      	mov	sp, r7
 8002674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002678:	4770      	bx	lr
 800267a:	bf00      	nop
 800267c:	20000000 	.word	0x20000000

08002680 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002684:	f7ff fff0 	bl	8002668 <HAL_RCC_GetHCLKFreq>
 8002688:	4601      	mov	r1, r0
 800268a:	4b05      	ldr	r3, [pc, #20]	; (80026a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	0a9b      	lsrs	r3, r3, #10
 8002690:	f003 0307 	and.w	r3, r3, #7
 8002694:	4a03      	ldr	r2, [pc, #12]	; (80026a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002696:	5cd3      	ldrb	r3, [r2, r3]
 8002698:	fa21 f303 	lsr.w	r3, r1, r3
}
 800269c:	4618      	mov	r0, r3
 800269e:	bd80      	pop	{r7, pc}
 80026a0:	40023800 	.word	0x40023800
 80026a4:	080059c4 	.word	0x080059c4

080026a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80026ac:	f7ff ffdc 	bl	8002668 <HAL_RCC_GetHCLKFreq>
 80026b0:	4601      	mov	r1, r0
 80026b2:	4b05      	ldr	r3, [pc, #20]	; (80026c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80026b4:	689b      	ldr	r3, [r3, #8]
 80026b6:	0b5b      	lsrs	r3, r3, #13
 80026b8:	f003 0307 	and.w	r3, r3, #7
 80026bc:	4a03      	ldr	r2, [pc, #12]	; (80026cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80026be:	5cd3      	ldrb	r3, [r2, r3]
 80026c0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	bd80      	pop	{r7, pc}
 80026c8:	40023800 	.word	0x40023800
 80026cc:	080059c4 	.word	0x080059c4

080026d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b082      	sub	sp, #8
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d101      	bne.n	80026e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80026de:	2301      	movs	r3, #1
 80026e0:	e01d      	b.n	800271e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026e8:	b2db      	uxtb	r3, r3
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d106      	bne.n	80026fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2200      	movs	r2, #0
 80026f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80026f6:	6878      	ldr	r0, [r7, #4]
 80026f8:	f7fe fb24 	bl	8000d44 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2202      	movs	r2, #2
 8002700:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681a      	ldr	r2, [r3, #0]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	3304      	adds	r3, #4
 800270c:	4619      	mov	r1, r3
 800270e:	4610      	mov	r0, r2
 8002710:	f000 f9ee 	bl	8002af0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2201      	movs	r2, #1
 8002718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800271c:	2300      	movs	r3, #0
}
 800271e:	4618      	mov	r0, r3
 8002720:	3708      	adds	r7, #8
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}

08002726 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002726:	b580      	push	{r7, lr}
 8002728:	b082      	sub	sp, #8
 800272a:	af00      	add	r7, sp, #0
 800272c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d101      	bne.n	8002738 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002734:	2301      	movs	r3, #1
 8002736:	e01d      	b.n	8002774 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800273e:	b2db      	uxtb	r3, r3
 8002740:	2b00      	cmp	r3, #0
 8002742:	d106      	bne.n	8002752 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2200      	movs	r2, #0
 8002748:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800274c:	6878      	ldr	r0, [r7, #4]
 800274e:	f000 f815 	bl	800277c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2202      	movs	r2, #2
 8002756:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681a      	ldr	r2, [r3, #0]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	3304      	adds	r3, #4
 8002762:	4619      	mov	r1, r3
 8002764:	4610      	mov	r0, r2
 8002766:	f000 f9c3 	bl	8002af0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2201      	movs	r2, #1
 800276e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002772:	2300      	movs	r3, #0
}
 8002774:	4618      	mov	r0, r3
 8002776:	3708      	adds	r7, #8
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}

0800277c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800277c:	b480      	push	{r7}
 800277e:	b083      	sub	sp, #12
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002784:	bf00      	nop
 8002786:	370c      	adds	r7, #12
 8002788:	46bd      	mov	sp, r7
 800278a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278e:	4770      	bx	lr

08002790 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b084      	sub	sp, #16
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
 8002798:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	2201      	movs	r2, #1
 80027a0:	6839      	ldr	r1, [r7, #0]
 80027a2:	4618      	mov	r0, r3
 80027a4:	f000 fc4a 	bl	800303c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a10      	ldr	r2, [pc, #64]	; (80027f0 <HAL_TIM_PWM_Start+0x60>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d107      	bne.n	80027c2 <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80027c0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	689b      	ldr	r3, [r3, #8]
 80027c8:	f003 0307 	and.w	r3, r3, #7
 80027cc:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	2b06      	cmp	r3, #6
 80027d2:	d007      	beq.n	80027e4 <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	681a      	ldr	r2, [r3, #0]
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f042 0201 	orr.w	r2, r2, #1
 80027e2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80027e4:	2300      	movs	r3, #0
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	3710      	adds	r7, #16
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}
 80027ee:	bf00      	nop
 80027f0:	40010000 	.word	0x40010000

080027f4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b084      	sub	sp, #16
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	60f8      	str	r0, [r7, #12]
 80027fc:	60b9      	str	r1, [r7, #8]
 80027fe:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002806:	2b01      	cmp	r3, #1
 8002808:	d101      	bne.n	800280e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800280a:	2302      	movs	r3, #2
 800280c:	e0b4      	b.n	8002978 <HAL_TIM_PWM_ConfigChannel+0x184>
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	2201      	movs	r2, #1
 8002812:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	2202      	movs	r2, #2
 800281a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2b0c      	cmp	r3, #12
 8002822:	f200 809f 	bhi.w	8002964 <HAL_TIM_PWM_ConfigChannel+0x170>
 8002826:	a201      	add	r2, pc, #4	; (adr r2, 800282c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8002828:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800282c:	08002861 	.word	0x08002861
 8002830:	08002965 	.word	0x08002965
 8002834:	08002965 	.word	0x08002965
 8002838:	08002965 	.word	0x08002965
 800283c:	080028a1 	.word	0x080028a1
 8002840:	08002965 	.word	0x08002965
 8002844:	08002965 	.word	0x08002965
 8002848:	08002965 	.word	0x08002965
 800284c:	080028e3 	.word	0x080028e3
 8002850:	08002965 	.word	0x08002965
 8002854:	08002965 	.word	0x08002965
 8002858:	08002965 	.word	0x08002965
 800285c:	08002923 	.word	0x08002923
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	68b9      	ldr	r1, [r7, #8]
 8002866:	4618      	mov	r0, r3
 8002868:	f000 f9c2 	bl	8002bf0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	699a      	ldr	r2, [r3, #24]
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f042 0208 	orr.w	r2, r2, #8
 800287a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	699a      	ldr	r2, [r3, #24]
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f022 0204 	bic.w	r2, r2, #4
 800288a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	6999      	ldr	r1, [r3, #24]
 8002892:	68bb      	ldr	r3, [r7, #8]
 8002894:	691a      	ldr	r2, [r3, #16]
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	430a      	orrs	r2, r1
 800289c:	619a      	str	r2, [r3, #24]
      break;
 800289e:	e062      	b.n	8002966 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	68b9      	ldr	r1, [r7, #8]
 80028a6:	4618      	mov	r0, r3
 80028a8:	f000 fa08 	bl	8002cbc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	699a      	ldr	r2, [r3, #24]
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80028ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	699a      	ldr	r2, [r3, #24]
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	6999      	ldr	r1, [r3, #24]
 80028d2:	68bb      	ldr	r3, [r7, #8]
 80028d4:	691b      	ldr	r3, [r3, #16]
 80028d6:	021a      	lsls	r2, r3, #8
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	430a      	orrs	r2, r1
 80028de:	619a      	str	r2, [r3, #24]
      break;
 80028e0:	e041      	b.n	8002966 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	68b9      	ldr	r1, [r7, #8]
 80028e8:	4618      	mov	r0, r3
 80028ea:	f000 fa53 	bl	8002d94 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	69da      	ldr	r2, [r3, #28]
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f042 0208 	orr.w	r2, r2, #8
 80028fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	69da      	ldr	r2, [r3, #28]
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f022 0204 	bic.w	r2, r2, #4
 800290c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	69d9      	ldr	r1, [r3, #28]
 8002914:	68bb      	ldr	r3, [r7, #8]
 8002916:	691a      	ldr	r2, [r3, #16]
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	430a      	orrs	r2, r1
 800291e:	61da      	str	r2, [r3, #28]
      break;
 8002920:	e021      	b.n	8002966 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	68b9      	ldr	r1, [r7, #8]
 8002928:	4618      	mov	r0, r3
 800292a:	f000 fa9d 	bl	8002e68 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	69da      	ldr	r2, [r3, #28]
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800293c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	69da      	ldr	r2, [r3, #28]
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800294c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	69d9      	ldr	r1, [r3, #28]
 8002954:	68bb      	ldr	r3, [r7, #8]
 8002956:	691b      	ldr	r3, [r3, #16]
 8002958:	021a      	lsls	r2, r3, #8
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	430a      	orrs	r2, r1
 8002960:	61da      	str	r2, [r3, #28]
      break;
 8002962:	e000      	b.n	8002966 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8002964:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	2201      	movs	r2, #1
 800296a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	2200      	movs	r2, #0
 8002972:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002976:	2300      	movs	r3, #0
}
 8002978:	4618      	mov	r0, r3
 800297a:	3710      	adds	r7, #16
 800297c:	46bd      	mov	sp, r7
 800297e:	bd80      	pop	{r7, pc}

08002980 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b084      	sub	sp, #16
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
 8002988:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002990:	2b01      	cmp	r3, #1
 8002992:	d101      	bne.n	8002998 <HAL_TIM_ConfigClockSource+0x18>
 8002994:	2302      	movs	r3, #2
 8002996:	e0a6      	b.n	8002ae6 <HAL_TIM_ConfigClockSource+0x166>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2201      	movs	r2, #1
 800299c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2202      	movs	r2, #2
 80029a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	689b      	ldr	r3, [r3, #8]
 80029ae:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80029b6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80029be:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	68fa      	ldr	r2, [r7, #12]
 80029c6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	2b40      	cmp	r3, #64	; 0x40
 80029ce:	d067      	beq.n	8002aa0 <HAL_TIM_ConfigClockSource+0x120>
 80029d0:	2b40      	cmp	r3, #64	; 0x40
 80029d2:	d80b      	bhi.n	80029ec <HAL_TIM_ConfigClockSource+0x6c>
 80029d4:	2b10      	cmp	r3, #16
 80029d6:	d073      	beq.n	8002ac0 <HAL_TIM_ConfigClockSource+0x140>
 80029d8:	2b10      	cmp	r3, #16
 80029da:	d802      	bhi.n	80029e2 <HAL_TIM_ConfigClockSource+0x62>
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d06f      	beq.n	8002ac0 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80029e0:	e078      	b.n	8002ad4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80029e2:	2b20      	cmp	r3, #32
 80029e4:	d06c      	beq.n	8002ac0 <HAL_TIM_ConfigClockSource+0x140>
 80029e6:	2b30      	cmp	r3, #48	; 0x30
 80029e8:	d06a      	beq.n	8002ac0 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80029ea:	e073      	b.n	8002ad4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80029ec:	2b70      	cmp	r3, #112	; 0x70
 80029ee:	d00d      	beq.n	8002a0c <HAL_TIM_ConfigClockSource+0x8c>
 80029f0:	2b70      	cmp	r3, #112	; 0x70
 80029f2:	d804      	bhi.n	80029fe <HAL_TIM_ConfigClockSource+0x7e>
 80029f4:	2b50      	cmp	r3, #80	; 0x50
 80029f6:	d033      	beq.n	8002a60 <HAL_TIM_ConfigClockSource+0xe0>
 80029f8:	2b60      	cmp	r3, #96	; 0x60
 80029fa:	d041      	beq.n	8002a80 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80029fc:	e06a      	b.n	8002ad4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80029fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a02:	d066      	beq.n	8002ad2 <HAL_TIM_ConfigClockSource+0x152>
 8002a04:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a08:	d017      	beq.n	8002a3a <HAL_TIM_ConfigClockSource+0xba>
      break;
 8002a0a:	e063      	b.n	8002ad4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6818      	ldr	r0, [r3, #0]
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	6899      	ldr	r1, [r3, #8]
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	685a      	ldr	r2, [r3, #4]
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	68db      	ldr	r3, [r3, #12]
 8002a1c:	f000 faee 	bl	8002ffc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	689b      	ldr	r3, [r3, #8]
 8002a26:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002a2e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	68fa      	ldr	r2, [r7, #12]
 8002a36:	609a      	str	r2, [r3, #8]
      break;
 8002a38:	e04c      	b.n	8002ad4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6818      	ldr	r0, [r3, #0]
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	6899      	ldr	r1, [r3, #8]
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	685a      	ldr	r2, [r3, #4]
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	68db      	ldr	r3, [r3, #12]
 8002a4a:	f000 fad7 	bl	8002ffc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	689a      	ldr	r2, [r3, #8]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002a5c:	609a      	str	r2, [r3, #8]
      break;
 8002a5e:	e039      	b.n	8002ad4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6818      	ldr	r0, [r3, #0]
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	6859      	ldr	r1, [r3, #4]
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	68db      	ldr	r3, [r3, #12]
 8002a6c:	461a      	mov	r2, r3
 8002a6e:	f000 fa4b 	bl	8002f08 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	2150      	movs	r1, #80	; 0x50
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f000 faa4 	bl	8002fc6 <TIM_ITRx_SetConfig>
      break;
 8002a7e:	e029      	b.n	8002ad4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6818      	ldr	r0, [r3, #0]
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	6859      	ldr	r1, [r3, #4]
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	68db      	ldr	r3, [r3, #12]
 8002a8c:	461a      	mov	r2, r3
 8002a8e:	f000 fa6a 	bl	8002f66 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	2160      	movs	r1, #96	; 0x60
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f000 fa94 	bl	8002fc6 <TIM_ITRx_SetConfig>
      break;
 8002a9e:	e019      	b.n	8002ad4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6818      	ldr	r0, [r3, #0]
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	6859      	ldr	r1, [r3, #4]
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	68db      	ldr	r3, [r3, #12]
 8002aac:	461a      	mov	r2, r3
 8002aae:	f000 fa2b 	bl	8002f08 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	2140      	movs	r1, #64	; 0x40
 8002ab8:	4618      	mov	r0, r3
 8002aba:	f000 fa84 	bl	8002fc6 <TIM_ITRx_SetConfig>
      break;
 8002abe:	e009      	b.n	8002ad4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681a      	ldr	r2, [r3, #0]
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4619      	mov	r1, r3
 8002aca:	4610      	mov	r0, r2
 8002acc:	f000 fa7b 	bl	8002fc6 <TIM_ITRx_SetConfig>
      break;
 8002ad0:	e000      	b.n	8002ad4 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8002ad2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2200      	movs	r2, #0
 8002ae0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002ae4:	2300      	movs	r3, #0
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	3710      	adds	r7, #16
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}
	...

08002af0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002af0:	b480      	push	{r7}
 8002af2:	b085      	sub	sp, #20
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
 8002af8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	4a34      	ldr	r2, [pc, #208]	; (8002bd4 <TIM_Base_SetConfig+0xe4>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d00f      	beq.n	8002b28 <TIM_Base_SetConfig+0x38>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b0e:	d00b      	beq.n	8002b28 <TIM_Base_SetConfig+0x38>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	4a31      	ldr	r2, [pc, #196]	; (8002bd8 <TIM_Base_SetConfig+0xe8>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d007      	beq.n	8002b28 <TIM_Base_SetConfig+0x38>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	4a30      	ldr	r2, [pc, #192]	; (8002bdc <TIM_Base_SetConfig+0xec>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d003      	beq.n	8002b28 <TIM_Base_SetConfig+0x38>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	4a2f      	ldr	r2, [pc, #188]	; (8002be0 <TIM_Base_SetConfig+0xf0>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d108      	bne.n	8002b3a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b2e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	68fa      	ldr	r2, [r7, #12]
 8002b36:	4313      	orrs	r3, r2
 8002b38:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	4a25      	ldr	r2, [pc, #148]	; (8002bd4 <TIM_Base_SetConfig+0xe4>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d01b      	beq.n	8002b7a <TIM_Base_SetConfig+0x8a>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b48:	d017      	beq.n	8002b7a <TIM_Base_SetConfig+0x8a>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	4a22      	ldr	r2, [pc, #136]	; (8002bd8 <TIM_Base_SetConfig+0xe8>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d013      	beq.n	8002b7a <TIM_Base_SetConfig+0x8a>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	4a21      	ldr	r2, [pc, #132]	; (8002bdc <TIM_Base_SetConfig+0xec>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d00f      	beq.n	8002b7a <TIM_Base_SetConfig+0x8a>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	4a20      	ldr	r2, [pc, #128]	; (8002be0 <TIM_Base_SetConfig+0xf0>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d00b      	beq.n	8002b7a <TIM_Base_SetConfig+0x8a>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	4a1f      	ldr	r2, [pc, #124]	; (8002be4 <TIM_Base_SetConfig+0xf4>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d007      	beq.n	8002b7a <TIM_Base_SetConfig+0x8a>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	4a1e      	ldr	r2, [pc, #120]	; (8002be8 <TIM_Base_SetConfig+0xf8>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d003      	beq.n	8002b7a <TIM_Base_SetConfig+0x8a>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	4a1d      	ldr	r2, [pc, #116]	; (8002bec <TIM_Base_SetConfig+0xfc>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d108      	bne.n	8002b8c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	68db      	ldr	r3, [r3, #12]
 8002b86:	68fa      	ldr	r2, [r7, #12]
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	695b      	ldr	r3, [r3, #20]
 8002b96:	4313      	orrs	r3, r2
 8002b98:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	68fa      	ldr	r2, [r7, #12]
 8002b9e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	689a      	ldr	r2, [r3, #8]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	681a      	ldr	r2, [r3, #0]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	4a08      	ldr	r2, [pc, #32]	; (8002bd4 <TIM_Base_SetConfig+0xe4>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d103      	bne.n	8002bc0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	691a      	ldr	r2, [r3, #16]
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	615a      	str	r2, [r3, #20]
}
 8002bc6:	bf00      	nop
 8002bc8:	3714      	adds	r7, #20
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd0:	4770      	bx	lr
 8002bd2:	bf00      	nop
 8002bd4:	40010000 	.word	0x40010000
 8002bd8:	40000400 	.word	0x40000400
 8002bdc:	40000800 	.word	0x40000800
 8002be0:	40000c00 	.word	0x40000c00
 8002be4:	40014000 	.word	0x40014000
 8002be8:	40014400 	.word	0x40014400
 8002bec:	40014800 	.word	0x40014800

08002bf0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b087      	sub	sp, #28
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
 8002bf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6a1b      	ldr	r3, [r3, #32]
 8002bfe:	f023 0201 	bic.w	r2, r3, #1
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6a1b      	ldr	r3, [r3, #32]
 8002c0a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	699b      	ldr	r3, [r3, #24]
 8002c16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	f023 0303 	bic.w	r3, r3, #3
 8002c26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	68fa      	ldr	r2, [r7, #12]
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002c32:	697b      	ldr	r3, [r7, #20]
 8002c34:	f023 0302 	bic.w	r3, r3, #2
 8002c38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	689b      	ldr	r3, [r3, #8]
 8002c3e:	697a      	ldr	r2, [r7, #20]
 8002c40:	4313      	orrs	r3, r2
 8002c42:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	4a1c      	ldr	r2, [pc, #112]	; (8002cb8 <TIM_OC1_SetConfig+0xc8>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d10c      	bne.n	8002c66 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002c4c:	697b      	ldr	r3, [r7, #20]
 8002c4e:	f023 0308 	bic.w	r3, r3, #8
 8002c52:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	68db      	ldr	r3, [r3, #12]
 8002c58:	697a      	ldr	r2, [r7, #20]
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002c5e:	697b      	ldr	r3, [r7, #20]
 8002c60:	f023 0304 	bic.w	r3, r3, #4
 8002c64:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	4a13      	ldr	r2, [pc, #76]	; (8002cb8 <TIM_OC1_SetConfig+0xc8>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d111      	bne.n	8002c92 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c74:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002c76:	693b      	ldr	r3, [r7, #16]
 8002c78:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002c7c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	695b      	ldr	r3, [r3, #20]
 8002c82:	693a      	ldr	r2, [r7, #16]
 8002c84:	4313      	orrs	r3, r2
 8002c86:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	699b      	ldr	r3, [r3, #24]
 8002c8c:	693a      	ldr	r2, [r7, #16]
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	693a      	ldr	r2, [r7, #16]
 8002c96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	68fa      	ldr	r2, [r7, #12]
 8002c9c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	685a      	ldr	r2, [r3, #4]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	697a      	ldr	r2, [r7, #20]
 8002caa:	621a      	str	r2, [r3, #32]
}
 8002cac:	bf00      	nop
 8002cae:	371c      	adds	r7, #28
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb6:	4770      	bx	lr
 8002cb8:	40010000 	.word	0x40010000

08002cbc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b087      	sub	sp, #28
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
 8002cc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6a1b      	ldr	r3, [r3, #32]
 8002cca:	f023 0210 	bic.w	r2, r3, #16
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6a1b      	ldr	r3, [r3, #32]
 8002cd6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	699b      	ldr	r3, [r3, #24]
 8002ce2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002cea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cf2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	021b      	lsls	r3, r3, #8
 8002cfa:	68fa      	ldr	r2, [r7, #12]
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002d00:	697b      	ldr	r3, [r7, #20]
 8002d02:	f023 0320 	bic.w	r3, r3, #32
 8002d06:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	689b      	ldr	r3, [r3, #8]
 8002d0c:	011b      	lsls	r3, r3, #4
 8002d0e:	697a      	ldr	r2, [r7, #20]
 8002d10:	4313      	orrs	r3, r2
 8002d12:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	4a1e      	ldr	r2, [pc, #120]	; (8002d90 <TIM_OC2_SetConfig+0xd4>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d10d      	bne.n	8002d38 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d22:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	68db      	ldr	r3, [r3, #12]
 8002d28:	011b      	lsls	r3, r3, #4
 8002d2a:	697a      	ldr	r2, [r7, #20]
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d36:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	4a15      	ldr	r2, [pc, #84]	; (8002d90 <TIM_OC2_SetConfig+0xd4>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d113      	bne.n	8002d68 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002d40:	693b      	ldr	r3, [r7, #16]
 8002d42:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002d46:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002d48:	693b      	ldr	r3, [r7, #16]
 8002d4a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002d4e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	695b      	ldr	r3, [r3, #20]
 8002d54:	009b      	lsls	r3, r3, #2
 8002d56:	693a      	ldr	r2, [r7, #16]
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	699b      	ldr	r3, [r3, #24]
 8002d60:	009b      	lsls	r3, r3, #2
 8002d62:	693a      	ldr	r2, [r7, #16]
 8002d64:	4313      	orrs	r3, r2
 8002d66:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	693a      	ldr	r2, [r7, #16]
 8002d6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	68fa      	ldr	r2, [r7, #12]
 8002d72:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	685a      	ldr	r2, [r3, #4]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	697a      	ldr	r2, [r7, #20]
 8002d80:	621a      	str	r2, [r3, #32]
}
 8002d82:	bf00      	nop
 8002d84:	371c      	adds	r7, #28
 8002d86:	46bd      	mov	sp, r7
 8002d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8c:	4770      	bx	lr
 8002d8e:	bf00      	nop
 8002d90:	40010000 	.word	0x40010000

08002d94 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b087      	sub	sp, #28
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
 8002d9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6a1b      	ldr	r3, [r3, #32]
 8002da2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6a1b      	ldr	r3, [r3, #32]
 8002dae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	69db      	ldr	r3, [r3, #28]
 8002dba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	f023 0303 	bic.w	r3, r3, #3
 8002dca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	68fa      	ldr	r2, [r7, #12]
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002ddc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	689b      	ldr	r3, [r3, #8]
 8002de2:	021b      	lsls	r3, r3, #8
 8002de4:	697a      	ldr	r2, [r7, #20]
 8002de6:	4313      	orrs	r3, r2
 8002de8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	4a1d      	ldr	r2, [pc, #116]	; (8002e64 <TIM_OC3_SetConfig+0xd0>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d10d      	bne.n	8002e0e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002df8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	68db      	ldr	r3, [r3, #12]
 8002dfe:	021b      	lsls	r3, r3, #8
 8002e00:	697a      	ldr	r2, [r7, #20]
 8002e02:	4313      	orrs	r3, r2
 8002e04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002e06:	697b      	ldr	r3, [r7, #20]
 8002e08:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002e0c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	4a14      	ldr	r2, [pc, #80]	; (8002e64 <TIM_OC3_SetConfig+0xd0>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d113      	bne.n	8002e3e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002e1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002e1e:	693b      	ldr	r3, [r7, #16]
 8002e20:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002e24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	695b      	ldr	r3, [r3, #20]
 8002e2a:	011b      	lsls	r3, r3, #4
 8002e2c:	693a      	ldr	r2, [r7, #16]
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	699b      	ldr	r3, [r3, #24]
 8002e36:	011b      	lsls	r3, r3, #4
 8002e38:	693a      	ldr	r2, [r7, #16]
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	693a      	ldr	r2, [r7, #16]
 8002e42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	68fa      	ldr	r2, [r7, #12]
 8002e48:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	685a      	ldr	r2, [r3, #4]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	697a      	ldr	r2, [r7, #20]
 8002e56:	621a      	str	r2, [r3, #32]
}
 8002e58:	bf00      	nop
 8002e5a:	371c      	adds	r7, #28
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e62:	4770      	bx	lr
 8002e64:	40010000 	.word	0x40010000

08002e68 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b087      	sub	sp, #28
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
 8002e70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6a1b      	ldr	r3, [r3, #32]
 8002e76:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6a1b      	ldr	r3, [r3, #32]
 8002e82:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	69db      	ldr	r3, [r3, #28]
 8002e8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e9e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	021b      	lsls	r3, r3, #8
 8002ea6:	68fa      	ldr	r2, [r7, #12]
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002eac:	693b      	ldr	r3, [r7, #16]
 8002eae:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002eb2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	689b      	ldr	r3, [r3, #8]
 8002eb8:	031b      	lsls	r3, r3, #12
 8002eba:	693a      	ldr	r2, [r7, #16]
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	4a10      	ldr	r2, [pc, #64]	; (8002f04 <TIM_OC4_SetConfig+0x9c>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d109      	bne.n	8002edc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002ece:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	695b      	ldr	r3, [r3, #20]
 8002ed4:	019b      	lsls	r3, r3, #6
 8002ed6:	697a      	ldr	r2, [r7, #20]
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	697a      	ldr	r2, [r7, #20]
 8002ee0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	68fa      	ldr	r2, [r7, #12]
 8002ee6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	685a      	ldr	r2, [r3, #4]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	693a      	ldr	r2, [r7, #16]
 8002ef4:	621a      	str	r2, [r3, #32]
}
 8002ef6:	bf00      	nop
 8002ef8:	371c      	adds	r7, #28
 8002efa:	46bd      	mov	sp, r7
 8002efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f00:	4770      	bx	lr
 8002f02:	bf00      	nop
 8002f04:	40010000 	.word	0x40010000

08002f08 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b087      	sub	sp, #28
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	60f8      	str	r0, [r7, #12]
 8002f10:	60b9      	str	r1, [r7, #8]
 8002f12:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	6a1b      	ldr	r3, [r3, #32]
 8002f18:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	6a1b      	ldr	r3, [r3, #32]
 8002f1e:	f023 0201 	bic.w	r2, r3, #1
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	699b      	ldr	r3, [r3, #24]
 8002f2a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002f2c:	693b      	ldr	r3, [r7, #16]
 8002f2e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002f32:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	011b      	lsls	r3, r3, #4
 8002f38:	693a      	ldr	r2, [r7, #16]
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002f3e:	697b      	ldr	r3, [r7, #20]
 8002f40:	f023 030a 	bic.w	r3, r3, #10
 8002f44:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002f46:	697a      	ldr	r2, [r7, #20]
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	693a      	ldr	r2, [r7, #16]
 8002f52:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	697a      	ldr	r2, [r7, #20]
 8002f58:	621a      	str	r2, [r3, #32]
}
 8002f5a:	bf00      	nop
 8002f5c:	371c      	adds	r7, #28
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f64:	4770      	bx	lr

08002f66 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f66:	b480      	push	{r7}
 8002f68:	b087      	sub	sp, #28
 8002f6a:	af00      	add	r7, sp, #0
 8002f6c:	60f8      	str	r0, [r7, #12]
 8002f6e:	60b9      	str	r1, [r7, #8]
 8002f70:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	6a1b      	ldr	r3, [r3, #32]
 8002f76:	f023 0210 	bic.w	r2, r3, #16
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	699b      	ldr	r3, [r3, #24]
 8002f82:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	6a1b      	ldr	r3, [r3, #32]
 8002f88:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002f8a:	697b      	ldr	r3, [r7, #20]
 8002f8c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002f90:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	031b      	lsls	r3, r3, #12
 8002f96:	697a      	ldr	r2, [r7, #20]
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002f9c:	693b      	ldr	r3, [r7, #16]
 8002f9e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002fa2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	011b      	lsls	r3, r3, #4
 8002fa8:	693a      	ldr	r2, [r7, #16]
 8002faa:	4313      	orrs	r3, r2
 8002fac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	697a      	ldr	r2, [r7, #20]
 8002fb2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	693a      	ldr	r2, [r7, #16]
 8002fb8:	621a      	str	r2, [r3, #32]
}
 8002fba:	bf00      	nop
 8002fbc:	371c      	adds	r7, #28
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc4:	4770      	bx	lr

08002fc6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002fc6:	b480      	push	{r7}
 8002fc8:	b085      	sub	sp, #20
 8002fca:	af00      	add	r7, sp, #0
 8002fcc:	6078      	str	r0, [r7, #4]
 8002fce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	689b      	ldr	r3, [r3, #8]
 8002fd4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fdc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002fde:	683a      	ldr	r2, [r7, #0]
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	f043 0307 	orr.w	r3, r3, #7
 8002fe8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	68fa      	ldr	r2, [r7, #12]
 8002fee:	609a      	str	r2, [r3, #8]
}
 8002ff0:	bf00      	nop
 8002ff2:	3714      	adds	r7, #20
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffa:	4770      	bx	lr

08002ffc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b087      	sub	sp, #28
 8003000:	af00      	add	r7, sp, #0
 8003002:	60f8      	str	r0, [r7, #12]
 8003004:	60b9      	str	r1, [r7, #8]
 8003006:	607a      	str	r2, [r7, #4]
 8003008:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	689b      	ldr	r3, [r3, #8]
 800300e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003016:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	021a      	lsls	r2, r3, #8
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	431a      	orrs	r2, r3
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	4313      	orrs	r3, r2
 8003024:	697a      	ldr	r2, [r7, #20]
 8003026:	4313      	orrs	r3, r2
 8003028:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	697a      	ldr	r2, [r7, #20]
 800302e:	609a      	str	r2, [r3, #8]
}
 8003030:	bf00      	nop
 8003032:	371c      	adds	r7, #28
 8003034:	46bd      	mov	sp, r7
 8003036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303a:	4770      	bx	lr

0800303c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800303c:	b480      	push	{r7}
 800303e:	b087      	sub	sp, #28
 8003040:	af00      	add	r7, sp, #0
 8003042:	60f8      	str	r0, [r7, #12]
 8003044:	60b9      	str	r1, [r7, #8]
 8003046:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003048:	68bb      	ldr	r3, [r7, #8]
 800304a:	f003 031f 	and.w	r3, r3, #31
 800304e:	2201      	movs	r2, #1
 8003050:	fa02 f303 	lsl.w	r3, r2, r3
 8003054:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	6a1a      	ldr	r2, [r3, #32]
 800305a:	697b      	ldr	r3, [r7, #20]
 800305c:	43db      	mvns	r3, r3
 800305e:	401a      	ands	r2, r3
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	6a1a      	ldr	r2, [r3, #32]
 8003068:	68bb      	ldr	r3, [r7, #8]
 800306a:	f003 031f 	and.w	r3, r3, #31
 800306e:	6879      	ldr	r1, [r7, #4]
 8003070:	fa01 f303 	lsl.w	r3, r1, r3
 8003074:	431a      	orrs	r2, r3
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	621a      	str	r2, [r3, #32]
}
 800307a:	bf00      	nop
 800307c:	371c      	adds	r7, #28
 800307e:	46bd      	mov	sp, r7
 8003080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003084:	4770      	bx	lr
	...

08003088 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003088:	b480      	push	{r7}
 800308a:	b085      	sub	sp, #20
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
 8003090:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003098:	2b01      	cmp	r3, #1
 800309a:	d101      	bne.n	80030a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800309c:	2302      	movs	r3, #2
 800309e:	e050      	b.n	8003142 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2201      	movs	r2, #1
 80030a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2202      	movs	r2, #2
 80030ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	689b      	ldr	r3, [r3, #8]
 80030be:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030c6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	68fa      	ldr	r2, [r7, #12]
 80030ce:	4313      	orrs	r3, r2
 80030d0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	68fa      	ldr	r2, [r7, #12]
 80030d8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a1c      	ldr	r2, [pc, #112]	; (8003150 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d018      	beq.n	8003116 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030ec:	d013      	beq.n	8003116 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a18      	ldr	r2, [pc, #96]	; (8003154 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d00e      	beq.n	8003116 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a16      	ldr	r2, [pc, #88]	; (8003158 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d009      	beq.n	8003116 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a15      	ldr	r2, [pc, #84]	; (800315c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d004      	beq.n	8003116 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a13      	ldr	r2, [pc, #76]	; (8003160 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d10c      	bne.n	8003130 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003116:	68bb      	ldr	r3, [r7, #8]
 8003118:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800311c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	68ba      	ldr	r2, [r7, #8]
 8003124:	4313      	orrs	r3, r2
 8003126:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	68ba      	ldr	r2, [r7, #8]
 800312e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2201      	movs	r2, #1
 8003134:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2200      	movs	r2, #0
 800313c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003140:	2300      	movs	r3, #0
}
 8003142:	4618      	mov	r0, r3
 8003144:	3714      	adds	r7, #20
 8003146:	46bd      	mov	sp, r7
 8003148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314c:	4770      	bx	lr
 800314e:	bf00      	nop
 8003150:	40010000 	.word	0x40010000
 8003154:	40000400 	.word	0x40000400
 8003158:	40000800 	.word	0x40000800
 800315c:	40000c00 	.word	0x40000c00
 8003160:	40014000 	.word	0x40014000

08003164 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b082      	sub	sp, #8
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d101      	bne.n	8003176 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	e03f      	b.n	80031f6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800317c:	b2db      	uxtb	r3, r3
 800317e:	2b00      	cmp	r3, #0
 8003180:	d106      	bne.n	8003190 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2200      	movs	r2, #0
 8003186:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800318a:	6878      	ldr	r0, [r7, #4]
 800318c:	f7fd fe36 	bl	8000dfc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2224      	movs	r2, #36	; 0x24
 8003194:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	68da      	ldr	r2, [r3, #12]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80031a6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80031a8:	6878      	ldr	r0, [r7, #4]
 80031aa:	f000 f9b1 	bl	8003510 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	691a      	ldr	r2, [r3, #16]
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80031bc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	695a      	ldr	r2, [r3, #20]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80031cc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	68da      	ldr	r2, [r3, #12]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80031dc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2200      	movs	r2, #0
 80031e2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2220      	movs	r2, #32
 80031e8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2220      	movs	r2, #32
 80031f0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80031f4:	2300      	movs	r3, #0
}
 80031f6:	4618      	mov	r0, r3
 80031f8:	3708      	adds	r7, #8
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}

080031fe <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031fe:	b580      	push	{r7, lr}
 8003200:	b088      	sub	sp, #32
 8003202:	af02      	add	r7, sp, #8
 8003204:	60f8      	str	r0, [r7, #12]
 8003206:	60b9      	str	r1, [r7, #8]
 8003208:	603b      	str	r3, [r7, #0]
 800320a:	4613      	mov	r3, r2
 800320c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800320e:	2300      	movs	r3, #0
 8003210:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003218:	b2db      	uxtb	r3, r3
 800321a:	2b20      	cmp	r3, #32
 800321c:	f040 8083 	bne.w	8003326 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8003220:	68bb      	ldr	r3, [r7, #8]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d002      	beq.n	800322c <HAL_UART_Transmit+0x2e>
 8003226:	88fb      	ldrh	r3, [r7, #6]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d101      	bne.n	8003230 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800322c:	2301      	movs	r3, #1
 800322e:	e07b      	b.n	8003328 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003236:	2b01      	cmp	r3, #1
 8003238:	d101      	bne.n	800323e <HAL_UART_Transmit+0x40>
 800323a:	2302      	movs	r3, #2
 800323c:	e074      	b.n	8003328 <HAL_UART_Transmit+0x12a>
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	2201      	movs	r2, #1
 8003242:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	2200      	movs	r2, #0
 800324a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	2221      	movs	r2, #33	; 0x21
 8003250:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003254:	f7fd ff4e 	bl	80010f4 <HAL_GetTick>
 8003258:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	88fa      	ldrh	r2, [r7, #6]
 800325e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	88fa      	ldrh	r2, [r7, #6]
 8003264:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	2200      	movs	r2, #0
 800326a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800326e:	e042      	b.n	80032f6 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003274:	b29b      	uxth	r3, r3
 8003276:	3b01      	subs	r3, #1
 8003278:	b29a      	uxth	r2, r3
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	689b      	ldr	r3, [r3, #8]
 8003282:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003286:	d122      	bne.n	80032ce <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	9300      	str	r3, [sp, #0]
 800328c:	697b      	ldr	r3, [r7, #20]
 800328e:	2200      	movs	r2, #0
 8003290:	2180      	movs	r1, #128	; 0x80
 8003292:	68f8      	ldr	r0, [r7, #12]
 8003294:	f000 f8f2 	bl	800347c <UART_WaitOnFlagUntilTimeout>
 8003298:	4603      	mov	r3, r0
 800329a:	2b00      	cmp	r3, #0
 800329c:	d001      	beq.n	80032a2 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800329e:	2303      	movs	r3, #3
 80032a0:	e042      	b.n	8003328 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80032a2:	68bb      	ldr	r3, [r7, #8]
 80032a4:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80032a6:	693b      	ldr	r3, [r7, #16]
 80032a8:	881b      	ldrh	r3, [r3, #0]
 80032aa:	461a      	mov	r2, r3
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80032b4:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	691b      	ldr	r3, [r3, #16]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d103      	bne.n	80032c6 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80032be:	68bb      	ldr	r3, [r7, #8]
 80032c0:	3302      	adds	r3, #2
 80032c2:	60bb      	str	r3, [r7, #8]
 80032c4:	e017      	b.n	80032f6 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80032c6:	68bb      	ldr	r3, [r7, #8]
 80032c8:	3301      	adds	r3, #1
 80032ca:	60bb      	str	r3, [r7, #8]
 80032cc:	e013      	b.n	80032f6 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	9300      	str	r3, [sp, #0]
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	2200      	movs	r2, #0
 80032d6:	2180      	movs	r1, #128	; 0x80
 80032d8:	68f8      	ldr	r0, [r7, #12]
 80032da:	f000 f8cf 	bl	800347c <UART_WaitOnFlagUntilTimeout>
 80032de:	4603      	mov	r3, r0
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d001      	beq.n	80032e8 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80032e4:	2303      	movs	r3, #3
 80032e6:	e01f      	b.n	8003328 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80032e8:	68bb      	ldr	r3, [r7, #8]
 80032ea:	1c5a      	adds	r2, r3, #1
 80032ec:	60ba      	str	r2, [r7, #8]
 80032ee:	781a      	ldrb	r2, [r3, #0]
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80032fa:	b29b      	uxth	r3, r3
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d1b7      	bne.n	8003270 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	9300      	str	r3, [sp, #0]
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	2200      	movs	r2, #0
 8003308:	2140      	movs	r1, #64	; 0x40
 800330a:	68f8      	ldr	r0, [r7, #12]
 800330c:	f000 f8b6 	bl	800347c <UART_WaitOnFlagUntilTimeout>
 8003310:	4603      	mov	r3, r0
 8003312:	2b00      	cmp	r3, #0
 8003314:	d001      	beq.n	800331a <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8003316:	2303      	movs	r3, #3
 8003318:	e006      	b.n	8003328 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	2220      	movs	r2, #32
 800331e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8003322:	2300      	movs	r3, #0
 8003324:	e000      	b.n	8003328 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8003326:	2302      	movs	r3, #2
  }
}
 8003328:	4618      	mov	r0, r3
 800332a:	3718      	adds	r7, #24
 800332c:	46bd      	mov	sp, r7
 800332e:	bd80      	pop	{r7, pc}

08003330 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b088      	sub	sp, #32
 8003334:	af02      	add	r7, sp, #8
 8003336:	60f8      	str	r0, [r7, #12]
 8003338:	60b9      	str	r1, [r7, #8]
 800333a:	603b      	str	r3, [r7, #0]
 800333c:	4613      	mov	r3, r2
 800333e:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8003340:	2300      	movs	r3, #0
 8003342:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800334a:	b2db      	uxtb	r3, r3
 800334c:	2b20      	cmp	r3, #32
 800334e:	f040 8090 	bne.w	8003472 <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 8003352:	68bb      	ldr	r3, [r7, #8]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d002      	beq.n	800335e <HAL_UART_Receive+0x2e>
 8003358:	88fb      	ldrh	r3, [r7, #6]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d101      	bne.n	8003362 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800335e:	2301      	movs	r3, #1
 8003360:	e088      	b.n	8003474 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003368:	2b01      	cmp	r3, #1
 800336a:	d101      	bne.n	8003370 <HAL_UART_Receive+0x40>
 800336c:	2302      	movs	r3, #2
 800336e:	e081      	b.n	8003474 <HAL_UART_Receive+0x144>
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	2201      	movs	r2, #1
 8003374:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	2200      	movs	r2, #0
 800337c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	2222      	movs	r2, #34	; 0x22
 8003382:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003386:	f7fd feb5 	bl	80010f4 <HAL_GetTick>
 800338a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	88fa      	ldrh	r2, [r7, #6]
 8003390:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	88fa      	ldrh	r2, [r7, #6]
 8003396:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	2200      	movs	r2, #0
 800339c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80033a0:	e05c      	b.n	800345c <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80033a6:	b29b      	uxth	r3, r3
 80033a8:	3b01      	subs	r3, #1
 80033aa:	b29a      	uxth	r2, r3
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	689b      	ldr	r3, [r3, #8]
 80033b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033b8:	d12b      	bne.n	8003412 <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	9300      	str	r3, [sp, #0]
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	2200      	movs	r2, #0
 80033c2:	2120      	movs	r1, #32
 80033c4:	68f8      	ldr	r0, [r7, #12]
 80033c6:	f000 f859 	bl	800347c <UART_WaitOnFlagUntilTimeout>
 80033ca:	4603      	mov	r3, r0
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d001      	beq.n	80033d4 <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 80033d0:	2303      	movs	r3, #3
 80033d2:	e04f      	b.n	8003474 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	691b      	ldr	r3, [r3, #16]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d10c      	bne.n	80033fa <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	b29b      	uxth	r3, r3
 80033e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033ec:	b29a      	uxth	r2, r3
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 80033f2:	68bb      	ldr	r3, [r7, #8]
 80033f4:	3302      	adds	r3, #2
 80033f6:	60bb      	str	r3, [r7, #8]
 80033f8:	e030      	b.n	800345c <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	b29b      	uxth	r3, r3
 8003402:	b2db      	uxtb	r3, r3
 8003404:	b29a      	uxth	r2, r3
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 800340a:	68bb      	ldr	r3, [r7, #8]
 800340c:	3301      	adds	r3, #1
 800340e:	60bb      	str	r3, [r7, #8]
 8003410:	e024      	b.n	800345c <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	9300      	str	r3, [sp, #0]
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	2200      	movs	r2, #0
 800341a:	2120      	movs	r1, #32
 800341c:	68f8      	ldr	r0, [r7, #12]
 800341e:	f000 f82d 	bl	800347c <UART_WaitOnFlagUntilTimeout>
 8003422:	4603      	mov	r3, r0
 8003424:	2b00      	cmp	r3, #0
 8003426:	d001      	beq.n	800342c <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 8003428:	2303      	movs	r3, #3
 800342a:	e023      	b.n	8003474 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	691b      	ldr	r3, [r3, #16]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d108      	bne.n	8003446 <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	6859      	ldr	r1, [r3, #4]
 800343a:	68bb      	ldr	r3, [r7, #8]
 800343c:	1c5a      	adds	r2, r3, #1
 800343e:	60ba      	str	r2, [r7, #8]
 8003440:	b2ca      	uxtb	r2, r1
 8003442:	701a      	strb	r2, [r3, #0]
 8003444:	e00a      	b.n	800345c <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	b2da      	uxtb	r2, r3
 800344e:	68bb      	ldr	r3, [r7, #8]
 8003450:	1c59      	adds	r1, r3, #1
 8003452:	60b9      	str	r1, [r7, #8]
 8003454:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003458:	b2d2      	uxtb	r2, r2
 800345a:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003460:	b29b      	uxth	r3, r3
 8003462:	2b00      	cmp	r3, #0
 8003464:	d19d      	bne.n	80033a2 <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	2220      	movs	r2, #32
 800346a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 800346e:	2300      	movs	r3, #0
 8003470:	e000      	b.n	8003474 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 8003472:	2302      	movs	r3, #2
  }
}
 8003474:	4618      	mov	r0, r3
 8003476:	3718      	adds	r7, #24
 8003478:	46bd      	mov	sp, r7
 800347a:	bd80      	pop	{r7, pc}

0800347c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b084      	sub	sp, #16
 8003480:	af00      	add	r7, sp, #0
 8003482:	60f8      	str	r0, [r7, #12]
 8003484:	60b9      	str	r1, [r7, #8]
 8003486:	603b      	str	r3, [r7, #0]
 8003488:	4613      	mov	r3, r2
 800348a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800348c:	e02c      	b.n	80034e8 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800348e:	69bb      	ldr	r3, [r7, #24]
 8003490:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003494:	d028      	beq.n	80034e8 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003496:	69bb      	ldr	r3, [r7, #24]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d007      	beq.n	80034ac <UART_WaitOnFlagUntilTimeout+0x30>
 800349c:	f7fd fe2a 	bl	80010f4 <HAL_GetTick>
 80034a0:	4602      	mov	r2, r0
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	1ad3      	subs	r3, r2, r3
 80034a6:	69ba      	ldr	r2, [r7, #24]
 80034a8:	429a      	cmp	r2, r3
 80034aa:	d21d      	bcs.n	80034e8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	68da      	ldr	r2, [r3, #12]
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80034ba:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	695a      	ldr	r2, [r3, #20]
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f022 0201 	bic.w	r2, r2, #1
 80034ca:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	2220      	movs	r2, #32
 80034d0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	2220      	movs	r2, #32
 80034d8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	2200      	movs	r2, #0
 80034e0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80034e4:	2303      	movs	r3, #3
 80034e6:	e00f      	b.n	8003508 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	681a      	ldr	r2, [r3, #0]
 80034ee:	68bb      	ldr	r3, [r7, #8]
 80034f0:	4013      	ands	r3, r2
 80034f2:	68ba      	ldr	r2, [r7, #8]
 80034f4:	429a      	cmp	r2, r3
 80034f6:	bf0c      	ite	eq
 80034f8:	2301      	moveq	r3, #1
 80034fa:	2300      	movne	r3, #0
 80034fc:	b2db      	uxtb	r3, r3
 80034fe:	461a      	mov	r2, r3
 8003500:	79fb      	ldrb	r3, [r7, #7]
 8003502:	429a      	cmp	r2, r3
 8003504:	d0c3      	beq.n	800348e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003506:	2300      	movs	r3, #0
}
 8003508:	4618      	mov	r0, r3
 800350a:	3710      	adds	r7, #16
 800350c:	46bd      	mov	sp, r7
 800350e:	bd80      	pop	{r7, pc}

08003510 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003514:	b085      	sub	sp, #20
 8003516:	af00      	add	r7, sp, #0
 8003518:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	691b      	ldr	r3, [r3, #16]
 8003520:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	68da      	ldr	r2, [r3, #12]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	430a      	orrs	r2, r1
 800352e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	689a      	ldr	r2, [r3, #8]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	691b      	ldr	r3, [r3, #16]
 8003538:	431a      	orrs	r2, r3
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	695b      	ldr	r3, [r3, #20]
 800353e:	431a      	orrs	r2, r3
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	69db      	ldr	r3, [r3, #28]
 8003544:	4313      	orrs	r3, r2
 8003546:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	68db      	ldr	r3, [r3, #12]
 800354e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003552:	f023 030c 	bic.w	r3, r3, #12
 8003556:	687a      	ldr	r2, [r7, #4]
 8003558:	6812      	ldr	r2, [r2, #0]
 800355a:	68f9      	ldr	r1, [r7, #12]
 800355c:	430b      	orrs	r3, r1
 800355e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	695b      	ldr	r3, [r3, #20]
 8003566:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	699a      	ldr	r2, [r3, #24]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	430a      	orrs	r2, r1
 8003574:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	69db      	ldr	r3, [r3, #28]
 800357a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800357e:	f040 818b 	bne.w	8003898 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4ac1      	ldr	r2, [pc, #772]	; (800388c <UART_SetConfig+0x37c>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d005      	beq.n	8003598 <UART_SetConfig+0x88>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4abf      	ldr	r2, [pc, #764]	; (8003890 <UART_SetConfig+0x380>)
 8003592:	4293      	cmp	r3, r2
 8003594:	f040 80bd 	bne.w	8003712 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003598:	f7ff f886 	bl	80026a8 <HAL_RCC_GetPCLK2Freq>
 800359c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800359e:	68bb      	ldr	r3, [r7, #8]
 80035a0:	461d      	mov	r5, r3
 80035a2:	f04f 0600 	mov.w	r6, #0
 80035a6:	46a8      	mov	r8, r5
 80035a8:	46b1      	mov	r9, r6
 80035aa:	eb18 0308 	adds.w	r3, r8, r8
 80035ae:	eb49 0409 	adc.w	r4, r9, r9
 80035b2:	4698      	mov	r8, r3
 80035b4:	46a1      	mov	r9, r4
 80035b6:	eb18 0805 	adds.w	r8, r8, r5
 80035ba:	eb49 0906 	adc.w	r9, r9, r6
 80035be:	f04f 0100 	mov.w	r1, #0
 80035c2:	f04f 0200 	mov.w	r2, #0
 80035c6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80035ca:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80035ce:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80035d2:	4688      	mov	r8, r1
 80035d4:	4691      	mov	r9, r2
 80035d6:	eb18 0005 	adds.w	r0, r8, r5
 80035da:	eb49 0106 	adc.w	r1, r9, r6
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	461d      	mov	r5, r3
 80035e4:	f04f 0600 	mov.w	r6, #0
 80035e8:	196b      	adds	r3, r5, r5
 80035ea:	eb46 0406 	adc.w	r4, r6, r6
 80035ee:	461a      	mov	r2, r3
 80035f0:	4623      	mov	r3, r4
 80035f2:	f7fc fe45 	bl	8000280 <__aeabi_uldivmod>
 80035f6:	4603      	mov	r3, r0
 80035f8:	460c      	mov	r4, r1
 80035fa:	461a      	mov	r2, r3
 80035fc:	4ba5      	ldr	r3, [pc, #660]	; (8003894 <UART_SetConfig+0x384>)
 80035fe:	fba3 2302 	umull	r2, r3, r3, r2
 8003602:	095b      	lsrs	r3, r3, #5
 8003604:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	461d      	mov	r5, r3
 800360c:	f04f 0600 	mov.w	r6, #0
 8003610:	46a9      	mov	r9, r5
 8003612:	46b2      	mov	sl, r6
 8003614:	eb19 0309 	adds.w	r3, r9, r9
 8003618:	eb4a 040a 	adc.w	r4, sl, sl
 800361c:	4699      	mov	r9, r3
 800361e:	46a2      	mov	sl, r4
 8003620:	eb19 0905 	adds.w	r9, r9, r5
 8003624:	eb4a 0a06 	adc.w	sl, sl, r6
 8003628:	f04f 0100 	mov.w	r1, #0
 800362c:	f04f 0200 	mov.w	r2, #0
 8003630:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003634:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003638:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800363c:	4689      	mov	r9, r1
 800363e:	4692      	mov	sl, r2
 8003640:	eb19 0005 	adds.w	r0, r9, r5
 8003644:	eb4a 0106 	adc.w	r1, sl, r6
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	461d      	mov	r5, r3
 800364e:	f04f 0600 	mov.w	r6, #0
 8003652:	196b      	adds	r3, r5, r5
 8003654:	eb46 0406 	adc.w	r4, r6, r6
 8003658:	461a      	mov	r2, r3
 800365a:	4623      	mov	r3, r4
 800365c:	f7fc fe10 	bl	8000280 <__aeabi_uldivmod>
 8003660:	4603      	mov	r3, r0
 8003662:	460c      	mov	r4, r1
 8003664:	461a      	mov	r2, r3
 8003666:	4b8b      	ldr	r3, [pc, #556]	; (8003894 <UART_SetConfig+0x384>)
 8003668:	fba3 1302 	umull	r1, r3, r3, r2
 800366c:	095b      	lsrs	r3, r3, #5
 800366e:	2164      	movs	r1, #100	; 0x64
 8003670:	fb01 f303 	mul.w	r3, r1, r3
 8003674:	1ad3      	subs	r3, r2, r3
 8003676:	00db      	lsls	r3, r3, #3
 8003678:	3332      	adds	r3, #50	; 0x32
 800367a:	4a86      	ldr	r2, [pc, #536]	; (8003894 <UART_SetConfig+0x384>)
 800367c:	fba2 2303 	umull	r2, r3, r2, r3
 8003680:	095b      	lsrs	r3, r3, #5
 8003682:	005b      	lsls	r3, r3, #1
 8003684:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003688:	4498      	add	r8, r3
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	461d      	mov	r5, r3
 800368e:	f04f 0600 	mov.w	r6, #0
 8003692:	46a9      	mov	r9, r5
 8003694:	46b2      	mov	sl, r6
 8003696:	eb19 0309 	adds.w	r3, r9, r9
 800369a:	eb4a 040a 	adc.w	r4, sl, sl
 800369e:	4699      	mov	r9, r3
 80036a0:	46a2      	mov	sl, r4
 80036a2:	eb19 0905 	adds.w	r9, r9, r5
 80036a6:	eb4a 0a06 	adc.w	sl, sl, r6
 80036aa:	f04f 0100 	mov.w	r1, #0
 80036ae:	f04f 0200 	mov.w	r2, #0
 80036b2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80036b6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80036ba:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80036be:	4689      	mov	r9, r1
 80036c0:	4692      	mov	sl, r2
 80036c2:	eb19 0005 	adds.w	r0, r9, r5
 80036c6:	eb4a 0106 	adc.w	r1, sl, r6
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	461d      	mov	r5, r3
 80036d0:	f04f 0600 	mov.w	r6, #0
 80036d4:	196b      	adds	r3, r5, r5
 80036d6:	eb46 0406 	adc.w	r4, r6, r6
 80036da:	461a      	mov	r2, r3
 80036dc:	4623      	mov	r3, r4
 80036de:	f7fc fdcf 	bl	8000280 <__aeabi_uldivmod>
 80036e2:	4603      	mov	r3, r0
 80036e4:	460c      	mov	r4, r1
 80036e6:	461a      	mov	r2, r3
 80036e8:	4b6a      	ldr	r3, [pc, #424]	; (8003894 <UART_SetConfig+0x384>)
 80036ea:	fba3 1302 	umull	r1, r3, r3, r2
 80036ee:	095b      	lsrs	r3, r3, #5
 80036f0:	2164      	movs	r1, #100	; 0x64
 80036f2:	fb01 f303 	mul.w	r3, r1, r3
 80036f6:	1ad3      	subs	r3, r2, r3
 80036f8:	00db      	lsls	r3, r3, #3
 80036fa:	3332      	adds	r3, #50	; 0x32
 80036fc:	4a65      	ldr	r2, [pc, #404]	; (8003894 <UART_SetConfig+0x384>)
 80036fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003702:	095b      	lsrs	r3, r3, #5
 8003704:	f003 0207 	and.w	r2, r3, #7
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4442      	add	r2, r8
 800370e:	609a      	str	r2, [r3, #8]
 8003710:	e26f      	b.n	8003bf2 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003712:	f7fe ffb5 	bl	8002680 <HAL_RCC_GetPCLK1Freq>
 8003716:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	461d      	mov	r5, r3
 800371c:	f04f 0600 	mov.w	r6, #0
 8003720:	46a8      	mov	r8, r5
 8003722:	46b1      	mov	r9, r6
 8003724:	eb18 0308 	adds.w	r3, r8, r8
 8003728:	eb49 0409 	adc.w	r4, r9, r9
 800372c:	4698      	mov	r8, r3
 800372e:	46a1      	mov	r9, r4
 8003730:	eb18 0805 	adds.w	r8, r8, r5
 8003734:	eb49 0906 	adc.w	r9, r9, r6
 8003738:	f04f 0100 	mov.w	r1, #0
 800373c:	f04f 0200 	mov.w	r2, #0
 8003740:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003744:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003748:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800374c:	4688      	mov	r8, r1
 800374e:	4691      	mov	r9, r2
 8003750:	eb18 0005 	adds.w	r0, r8, r5
 8003754:	eb49 0106 	adc.w	r1, r9, r6
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	461d      	mov	r5, r3
 800375e:	f04f 0600 	mov.w	r6, #0
 8003762:	196b      	adds	r3, r5, r5
 8003764:	eb46 0406 	adc.w	r4, r6, r6
 8003768:	461a      	mov	r2, r3
 800376a:	4623      	mov	r3, r4
 800376c:	f7fc fd88 	bl	8000280 <__aeabi_uldivmod>
 8003770:	4603      	mov	r3, r0
 8003772:	460c      	mov	r4, r1
 8003774:	461a      	mov	r2, r3
 8003776:	4b47      	ldr	r3, [pc, #284]	; (8003894 <UART_SetConfig+0x384>)
 8003778:	fba3 2302 	umull	r2, r3, r3, r2
 800377c:	095b      	lsrs	r3, r3, #5
 800377e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	461d      	mov	r5, r3
 8003786:	f04f 0600 	mov.w	r6, #0
 800378a:	46a9      	mov	r9, r5
 800378c:	46b2      	mov	sl, r6
 800378e:	eb19 0309 	adds.w	r3, r9, r9
 8003792:	eb4a 040a 	adc.w	r4, sl, sl
 8003796:	4699      	mov	r9, r3
 8003798:	46a2      	mov	sl, r4
 800379a:	eb19 0905 	adds.w	r9, r9, r5
 800379e:	eb4a 0a06 	adc.w	sl, sl, r6
 80037a2:	f04f 0100 	mov.w	r1, #0
 80037a6:	f04f 0200 	mov.w	r2, #0
 80037aa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80037ae:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80037b2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80037b6:	4689      	mov	r9, r1
 80037b8:	4692      	mov	sl, r2
 80037ba:	eb19 0005 	adds.w	r0, r9, r5
 80037be:	eb4a 0106 	adc.w	r1, sl, r6
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	461d      	mov	r5, r3
 80037c8:	f04f 0600 	mov.w	r6, #0
 80037cc:	196b      	adds	r3, r5, r5
 80037ce:	eb46 0406 	adc.w	r4, r6, r6
 80037d2:	461a      	mov	r2, r3
 80037d4:	4623      	mov	r3, r4
 80037d6:	f7fc fd53 	bl	8000280 <__aeabi_uldivmod>
 80037da:	4603      	mov	r3, r0
 80037dc:	460c      	mov	r4, r1
 80037de:	461a      	mov	r2, r3
 80037e0:	4b2c      	ldr	r3, [pc, #176]	; (8003894 <UART_SetConfig+0x384>)
 80037e2:	fba3 1302 	umull	r1, r3, r3, r2
 80037e6:	095b      	lsrs	r3, r3, #5
 80037e8:	2164      	movs	r1, #100	; 0x64
 80037ea:	fb01 f303 	mul.w	r3, r1, r3
 80037ee:	1ad3      	subs	r3, r2, r3
 80037f0:	00db      	lsls	r3, r3, #3
 80037f2:	3332      	adds	r3, #50	; 0x32
 80037f4:	4a27      	ldr	r2, [pc, #156]	; (8003894 <UART_SetConfig+0x384>)
 80037f6:	fba2 2303 	umull	r2, r3, r2, r3
 80037fa:	095b      	lsrs	r3, r3, #5
 80037fc:	005b      	lsls	r3, r3, #1
 80037fe:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003802:	4498      	add	r8, r3
 8003804:	68bb      	ldr	r3, [r7, #8]
 8003806:	461d      	mov	r5, r3
 8003808:	f04f 0600 	mov.w	r6, #0
 800380c:	46a9      	mov	r9, r5
 800380e:	46b2      	mov	sl, r6
 8003810:	eb19 0309 	adds.w	r3, r9, r9
 8003814:	eb4a 040a 	adc.w	r4, sl, sl
 8003818:	4699      	mov	r9, r3
 800381a:	46a2      	mov	sl, r4
 800381c:	eb19 0905 	adds.w	r9, r9, r5
 8003820:	eb4a 0a06 	adc.w	sl, sl, r6
 8003824:	f04f 0100 	mov.w	r1, #0
 8003828:	f04f 0200 	mov.w	r2, #0
 800382c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003830:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003834:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003838:	4689      	mov	r9, r1
 800383a:	4692      	mov	sl, r2
 800383c:	eb19 0005 	adds.w	r0, r9, r5
 8003840:	eb4a 0106 	adc.w	r1, sl, r6
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	461d      	mov	r5, r3
 800384a:	f04f 0600 	mov.w	r6, #0
 800384e:	196b      	adds	r3, r5, r5
 8003850:	eb46 0406 	adc.w	r4, r6, r6
 8003854:	461a      	mov	r2, r3
 8003856:	4623      	mov	r3, r4
 8003858:	f7fc fd12 	bl	8000280 <__aeabi_uldivmod>
 800385c:	4603      	mov	r3, r0
 800385e:	460c      	mov	r4, r1
 8003860:	461a      	mov	r2, r3
 8003862:	4b0c      	ldr	r3, [pc, #48]	; (8003894 <UART_SetConfig+0x384>)
 8003864:	fba3 1302 	umull	r1, r3, r3, r2
 8003868:	095b      	lsrs	r3, r3, #5
 800386a:	2164      	movs	r1, #100	; 0x64
 800386c:	fb01 f303 	mul.w	r3, r1, r3
 8003870:	1ad3      	subs	r3, r2, r3
 8003872:	00db      	lsls	r3, r3, #3
 8003874:	3332      	adds	r3, #50	; 0x32
 8003876:	4a07      	ldr	r2, [pc, #28]	; (8003894 <UART_SetConfig+0x384>)
 8003878:	fba2 2303 	umull	r2, r3, r2, r3
 800387c:	095b      	lsrs	r3, r3, #5
 800387e:	f003 0207 	and.w	r2, r3, #7
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4442      	add	r2, r8
 8003888:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800388a:	e1b2      	b.n	8003bf2 <UART_SetConfig+0x6e2>
 800388c:	40011000 	.word	0x40011000
 8003890:	40011400 	.word	0x40011400
 8003894:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4ad7      	ldr	r2, [pc, #860]	; (8003bfc <UART_SetConfig+0x6ec>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d005      	beq.n	80038ae <UART_SetConfig+0x39e>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4ad6      	ldr	r2, [pc, #856]	; (8003c00 <UART_SetConfig+0x6f0>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	f040 80d1 	bne.w	8003a50 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80038ae:	f7fe fefb 	bl	80026a8 <HAL_RCC_GetPCLK2Freq>
 80038b2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80038b4:	68bb      	ldr	r3, [r7, #8]
 80038b6:	469a      	mov	sl, r3
 80038b8:	f04f 0b00 	mov.w	fp, #0
 80038bc:	46d0      	mov	r8, sl
 80038be:	46d9      	mov	r9, fp
 80038c0:	eb18 0308 	adds.w	r3, r8, r8
 80038c4:	eb49 0409 	adc.w	r4, r9, r9
 80038c8:	4698      	mov	r8, r3
 80038ca:	46a1      	mov	r9, r4
 80038cc:	eb18 080a 	adds.w	r8, r8, sl
 80038d0:	eb49 090b 	adc.w	r9, r9, fp
 80038d4:	f04f 0100 	mov.w	r1, #0
 80038d8:	f04f 0200 	mov.w	r2, #0
 80038dc:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80038e0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80038e4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80038e8:	4688      	mov	r8, r1
 80038ea:	4691      	mov	r9, r2
 80038ec:	eb1a 0508 	adds.w	r5, sl, r8
 80038f0:	eb4b 0609 	adc.w	r6, fp, r9
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	4619      	mov	r1, r3
 80038fa:	f04f 0200 	mov.w	r2, #0
 80038fe:	f04f 0300 	mov.w	r3, #0
 8003902:	f04f 0400 	mov.w	r4, #0
 8003906:	0094      	lsls	r4, r2, #2
 8003908:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800390c:	008b      	lsls	r3, r1, #2
 800390e:	461a      	mov	r2, r3
 8003910:	4623      	mov	r3, r4
 8003912:	4628      	mov	r0, r5
 8003914:	4631      	mov	r1, r6
 8003916:	f7fc fcb3 	bl	8000280 <__aeabi_uldivmod>
 800391a:	4603      	mov	r3, r0
 800391c:	460c      	mov	r4, r1
 800391e:	461a      	mov	r2, r3
 8003920:	4bb8      	ldr	r3, [pc, #736]	; (8003c04 <UART_SetConfig+0x6f4>)
 8003922:	fba3 2302 	umull	r2, r3, r3, r2
 8003926:	095b      	lsrs	r3, r3, #5
 8003928:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	469b      	mov	fp, r3
 8003930:	f04f 0c00 	mov.w	ip, #0
 8003934:	46d9      	mov	r9, fp
 8003936:	46e2      	mov	sl, ip
 8003938:	eb19 0309 	adds.w	r3, r9, r9
 800393c:	eb4a 040a 	adc.w	r4, sl, sl
 8003940:	4699      	mov	r9, r3
 8003942:	46a2      	mov	sl, r4
 8003944:	eb19 090b 	adds.w	r9, r9, fp
 8003948:	eb4a 0a0c 	adc.w	sl, sl, ip
 800394c:	f04f 0100 	mov.w	r1, #0
 8003950:	f04f 0200 	mov.w	r2, #0
 8003954:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003958:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800395c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003960:	4689      	mov	r9, r1
 8003962:	4692      	mov	sl, r2
 8003964:	eb1b 0509 	adds.w	r5, fp, r9
 8003968:	eb4c 060a 	adc.w	r6, ip, sl
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	4619      	mov	r1, r3
 8003972:	f04f 0200 	mov.w	r2, #0
 8003976:	f04f 0300 	mov.w	r3, #0
 800397a:	f04f 0400 	mov.w	r4, #0
 800397e:	0094      	lsls	r4, r2, #2
 8003980:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003984:	008b      	lsls	r3, r1, #2
 8003986:	461a      	mov	r2, r3
 8003988:	4623      	mov	r3, r4
 800398a:	4628      	mov	r0, r5
 800398c:	4631      	mov	r1, r6
 800398e:	f7fc fc77 	bl	8000280 <__aeabi_uldivmod>
 8003992:	4603      	mov	r3, r0
 8003994:	460c      	mov	r4, r1
 8003996:	461a      	mov	r2, r3
 8003998:	4b9a      	ldr	r3, [pc, #616]	; (8003c04 <UART_SetConfig+0x6f4>)
 800399a:	fba3 1302 	umull	r1, r3, r3, r2
 800399e:	095b      	lsrs	r3, r3, #5
 80039a0:	2164      	movs	r1, #100	; 0x64
 80039a2:	fb01 f303 	mul.w	r3, r1, r3
 80039a6:	1ad3      	subs	r3, r2, r3
 80039a8:	011b      	lsls	r3, r3, #4
 80039aa:	3332      	adds	r3, #50	; 0x32
 80039ac:	4a95      	ldr	r2, [pc, #596]	; (8003c04 <UART_SetConfig+0x6f4>)
 80039ae:	fba2 2303 	umull	r2, r3, r2, r3
 80039b2:	095b      	lsrs	r3, r3, #5
 80039b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80039b8:	4498      	add	r8, r3
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	469b      	mov	fp, r3
 80039be:	f04f 0c00 	mov.w	ip, #0
 80039c2:	46d9      	mov	r9, fp
 80039c4:	46e2      	mov	sl, ip
 80039c6:	eb19 0309 	adds.w	r3, r9, r9
 80039ca:	eb4a 040a 	adc.w	r4, sl, sl
 80039ce:	4699      	mov	r9, r3
 80039d0:	46a2      	mov	sl, r4
 80039d2:	eb19 090b 	adds.w	r9, r9, fp
 80039d6:	eb4a 0a0c 	adc.w	sl, sl, ip
 80039da:	f04f 0100 	mov.w	r1, #0
 80039de:	f04f 0200 	mov.w	r2, #0
 80039e2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80039e6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80039ea:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80039ee:	4689      	mov	r9, r1
 80039f0:	4692      	mov	sl, r2
 80039f2:	eb1b 0509 	adds.w	r5, fp, r9
 80039f6:	eb4c 060a 	adc.w	r6, ip, sl
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	4619      	mov	r1, r3
 8003a00:	f04f 0200 	mov.w	r2, #0
 8003a04:	f04f 0300 	mov.w	r3, #0
 8003a08:	f04f 0400 	mov.w	r4, #0
 8003a0c:	0094      	lsls	r4, r2, #2
 8003a0e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003a12:	008b      	lsls	r3, r1, #2
 8003a14:	461a      	mov	r2, r3
 8003a16:	4623      	mov	r3, r4
 8003a18:	4628      	mov	r0, r5
 8003a1a:	4631      	mov	r1, r6
 8003a1c:	f7fc fc30 	bl	8000280 <__aeabi_uldivmod>
 8003a20:	4603      	mov	r3, r0
 8003a22:	460c      	mov	r4, r1
 8003a24:	461a      	mov	r2, r3
 8003a26:	4b77      	ldr	r3, [pc, #476]	; (8003c04 <UART_SetConfig+0x6f4>)
 8003a28:	fba3 1302 	umull	r1, r3, r3, r2
 8003a2c:	095b      	lsrs	r3, r3, #5
 8003a2e:	2164      	movs	r1, #100	; 0x64
 8003a30:	fb01 f303 	mul.w	r3, r1, r3
 8003a34:	1ad3      	subs	r3, r2, r3
 8003a36:	011b      	lsls	r3, r3, #4
 8003a38:	3332      	adds	r3, #50	; 0x32
 8003a3a:	4a72      	ldr	r2, [pc, #456]	; (8003c04 <UART_SetConfig+0x6f4>)
 8003a3c:	fba2 2303 	umull	r2, r3, r2, r3
 8003a40:	095b      	lsrs	r3, r3, #5
 8003a42:	f003 020f 	and.w	r2, r3, #15
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4442      	add	r2, r8
 8003a4c:	609a      	str	r2, [r3, #8]
 8003a4e:	e0d0      	b.n	8003bf2 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8003a50:	f7fe fe16 	bl	8002680 <HAL_RCC_GetPCLK1Freq>
 8003a54:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	469a      	mov	sl, r3
 8003a5a:	f04f 0b00 	mov.w	fp, #0
 8003a5e:	46d0      	mov	r8, sl
 8003a60:	46d9      	mov	r9, fp
 8003a62:	eb18 0308 	adds.w	r3, r8, r8
 8003a66:	eb49 0409 	adc.w	r4, r9, r9
 8003a6a:	4698      	mov	r8, r3
 8003a6c:	46a1      	mov	r9, r4
 8003a6e:	eb18 080a 	adds.w	r8, r8, sl
 8003a72:	eb49 090b 	adc.w	r9, r9, fp
 8003a76:	f04f 0100 	mov.w	r1, #0
 8003a7a:	f04f 0200 	mov.w	r2, #0
 8003a7e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003a82:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003a86:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003a8a:	4688      	mov	r8, r1
 8003a8c:	4691      	mov	r9, r2
 8003a8e:	eb1a 0508 	adds.w	r5, sl, r8
 8003a92:	eb4b 0609 	adc.w	r6, fp, r9
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	4619      	mov	r1, r3
 8003a9c:	f04f 0200 	mov.w	r2, #0
 8003aa0:	f04f 0300 	mov.w	r3, #0
 8003aa4:	f04f 0400 	mov.w	r4, #0
 8003aa8:	0094      	lsls	r4, r2, #2
 8003aaa:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003aae:	008b      	lsls	r3, r1, #2
 8003ab0:	461a      	mov	r2, r3
 8003ab2:	4623      	mov	r3, r4
 8003ab4:	4628      	mov	r0, r5
 8003ab6:	4631      	mov	r1, r6
 8003ab8:	f7fc fbe2 	bl	8000280 <__aeabi_uldivmod>
 8003abc:	4603      	mov	r3, r0
 8003abe:	460c      	mov	r4, r1
 8003ac0:	461a      	mov	r2, r3
 8003ac2:	4b50      	ldr	r3, [pc, #320]	; (8003c04 <UART_SetConfig+0x6f4>)
 8003ac4:	fba3 2302 	umull	r2, r3, r3, r2
 8003ac8:	095b      	lsrs	r3, r3, #5
 8003aca:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003ace:	68bb      	ldr	r3, [r7, #8]
 8003ad0:	469b      	mov	fp, r3
 8003ad2:	f04f 0c00 	mov.w	ip, #0
 8003ad6:	46d9      	mov	r9, fp
 8003ad8:	46e2      	mov	sl, ip
 8003ada:	eb19 0309 	adds.w	r3, r9, r9
 8003ade:	eb4a 040a 	adc.w	r4, sl, sl
 8003ae2:	4699      	mov	r9, r3
 8003ae4:	46a2      	mov	sl, r4
 8003ae6:	eb19 090b 	adds.w	r9, r9, fp
 8003aea:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003aee:	f04f 0100 	mov.w	r1, #0
 8003af2:	f04f 0200 	mov.w	r2, #0
 8003af6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003afa:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003afe:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003b02:	4689      	mov	r9, r1
 8003b04:	4692      	mov	sl, r2
 8003b06:	eb1b 0509 	adds.w	r5, fp, r9
 8003b0a:	eb4c 060a 	adc.w	r6, ip, sl
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	4619      	mov	r1, r3
 8003b14:	f04f 0200 	mov.w	r2, #0
 8003b18:	f04f 0300 	mov.w	r3, #0
 8003b1c:	f04f 0400 	mov.w	r4, #0
 8003b20:	0094      	lsls	r4, r2, #2
 8003b22:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003b26:	008b      	lsls	r3, r1, #2
 8003b28:	461a      	mov	r2, r3
 8003b2a:	4623      	mov	r3, r4
 8003b2c:	4628      	mov	r0, r5
 8003b2e:	4631      	mov	r1, r6
 8003b30:	f7fc fba6 	bl	8000280 <__aeabi_uldivmod>
 8003b34:	4603      	mov	r3, r0
 8003b36:	460c      	mov	r4, r1
 8003b38:	461a      	mov	r2, r3
 8003b3a:	4b32      	ldr	r3, [pc, #200]	; (8003c04 <UART_SetConfig+0x6f4>)
 8003b3c:	fba3 1302 	umull	r1, r3, r3, r2
 8003b40:	095b      	lsrs	r3, r3, #5
 8003b42:	2164      	movs	r1, #100	; 0x64
 8003b44:	fb01 f303 	mul.w	r3, r1, r3
 8003b48:	1ad3      	subs	r3, r2, r3
 8003b4a:	011b      	lsls	r3, r3, #4
 8003b4c:	3332      	adds	r3, #50	; 0x32
 8003b4e:	4a2d      	ldr	r2, [pc, #180]	; (8003c04 <UART_SetConfig+0x6f4>)
 8003b50:	fba2 2303 	umull	r2, r3, r2, r3
 8003b54:	095b      	lsrs	r3, r3, #5
 8003b56:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b5a:	4498      	add	r8, r3
 8003b5c:	68bb      	ldr	r3, [r7, #8]
 8003b5e:	469b      	mov	fp, r3
 8003b60:	f04f 0c00 	mov.w	ip, #0
 8003b64:	46d9      	mov	r9, fp
 8003b66:	46e2      	mov	sl, ip
 8003b68:	eb19 0309 	adds.w	r3, r9, r9
 8003b6c:	eb4a 040a 	adc.w	r4, sl, sl
 8003b70:	4699      	mov	r9, r3
 8003b72:	46a2      	mov	sl, r4
 8003b74:	eb19 090b 	adds.w	r9, r9, fp
 8003b78:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003b7c:	f04f 0100 	mov.w	r1, #0
 8003b80:	f04f 0200 	mov.w	r2, #0
 8003b84:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003b88:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003b8c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003b90:	4689      	mov	r9, r1
 8003b92:	4692      	mov	sl, r2
 8003b94:	eb1b 0509 	adds.w	r5, fp, r9
 8003b98:	eb4c 060a 	adc.w	r6, ip, sl
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	4619      	mov	r1, r3
 8003ba2:	f04f 0200 	mov.w	r2, #0
 8003ba6:	f04f 0300 	mov.w	r3, #0
 8003baa:	f04f 0400 	mov.w	r4, #0
 8003bae:	0094      	lsls	r4, r2, #2
 8003bb0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003bb4:	008b      	lsls	r3, r1, #2
 8003bb6:	461a      	mov	r2, r3
 8003bb8:	4623      	mov	r3, r4
 8003bba:	4628      	mov	r0, r5
 8003bbc:	4631      	mov	r1, r6
 8003bbe:	f7fc fb5f 	bl	8000280 <__aeabi_uldivmod>
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	460c      	mov	r4, r1
 8003bc6:	461a      	mov	r2, r3
 8003bc8:	4b0e      	ldr	r3, [pc, #56]	; (8003c04 <UART_SetConfig+0x6f4>)
 8003bca:	fba3 1302 	umull	r1, r3, r3, r2
 8003bce:	095b      	lsrs	r3, r3, #5
 8003bd0:	2164      	movs	r1, #100	; 0x64
 8003bd2:	fb01 f303 	mul.w	r3, r1, r3
 8003bd6:	1ad3      	subs	r3, r2, r3
 8003bd8:	011b      	lsls	r3, r3, #4
 8003bda:	3332      	adds	r3, #50	; 0x32
 8003bdc:	4a09      	ldr	r2, [pc, #36]	; (8003c04 <UART_SetConfig+0x6f4>)
 8003bde:	fba2 2303 	umull	r2, r3, r2, r3
 8003be2:	095b      	lsrs	r3, r3, #5
 8003be4:	f003 020f 	and.w	r2, r3, #15
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4442      	add	r2, r8
 8003bee:	609a      	str	r2, [r3, #8]
}
 8003bf0:	e7ff      	b.n	8003bf2 <UART_SetConfig+0x6e2>
 8003bf2:	bf00      	nop
 8003bf4:	3714      	adds	r7, #20
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003bfc:	40011000 	.word	0x40011000
 8003c00:	40011400 	.word	0x40011400
 8003c04:	51eb851f 	.word	0x51eb851f

08003c08 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	b085      	sub	sp, #20
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	4603      	mov	r3, r0
 8003c10:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003c12:	2300      	movs	r3, #0
 8003c14:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003c16:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003c1a:	2b84      	cmp	r3, #132	; 0x84
 8003c1c:	d005      	beq.n	8003c2a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003c1e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	4413      	add	r3, r2
 8003c26:	3303      	adds	r3, #3
 8003c28:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
}
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	3714      	adds	r7, #20
 8003c30:	46bd      	mov	sp, r7
 8003c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c36:	4770      	bx	lr

08003c38 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003c3c:	f000 fada 	bl	80041f4 <vTaskStartScheduler>
  
  return osOK;
 8003c40:	2300      	movs	r3, #0
}
 8003c42:	4618      	mov	r0, r3
 8003c44:	bd80      	pop	{r7, pc}

08003c46 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003c46:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c48:	b089      	sub	sp, #36	; 0x24
 8003c4a:	af04      	add	r7, sp, #16
 8003c4c:	6078      	str	r0, [r7, #4]
 8003c4e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	695b      	ldr	r3, [r3, #20]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d020      	beq.n	8003c9a <osThreadCreate+0x54>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	699b      	ldr	r3, [r3, #24]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d01c      	beq.n	8003c9a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	685c      	ldr	r4, [r3, #4]
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681d      	ldr	r5, [r3, #0]
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	691e      	ldr	r6, [r3, #16]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003c72:	4618      	mov	r0, r3
 8003c74:	f7ff ffc8 	bl	8003c08 <makeFreeRtosPriority>
 8003c78:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	695b      	ldr	r3, [r3, #20]
 8003c7e:	687a      	ldr	r2, [r7, #4]
 8003c80:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003c82:	9202      	str	r2, [sp, #8]
 8003c84:	9301      	str	r3, [sp, #4]
 8003c86:	9100      	str	r1, [sp, #0]
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	4632      	mov	r2, r6
 8003c8c:	4629      	mov	r1, r5
 8003c8e:	4620      	mov	r0, r4
 8003c90:	f000 f8ed 	bl	8003e6e <xTaskCreateStatic>
 8003c94:	4603      	mov	r3, r0
 8003c96:	60fb      	str	r3, [r7, #12]
 8003c98:	e01c      	b.n	8003cd4 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	685c      	ldr	r4, [r3, #4]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003ca6:	b29e      	uxth	r6, r3
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003cae:	4618      	mov	r0, r3
 8003cb0:	f7ff ffaa 	bl	8003c08 <makeFreeRtosPriority>
 8003cb4:	4602      	mov	r2, r0
 8003cb6:	f107 030c 	add.w	r3, r7, #12
 8003cba:	9301      	str	r3, [sp, #4]
 8003cbc:	9200      	str	r2, [sp, #0]
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	4632      	mov	r2, r6
 8003cc2:	4629      	mov	r1, r5
 8003cc4:	4620      	mov	r0, r4
 8003cc6:	f000 f92c 	bl	8003f22 <xTaskCreate>
 8003cca:	4603      	mov	r3, r0
 8003ccc:	2b01      	cmp	r3, #1
 8003cce:	d001      	beq.n	8003cd4 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	e000      	b.n	8003cd6 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
}
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	3714      	adds	r7, #20
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003cde <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003cde:	b580      	push	{r7, lr}
 8003ce0:	b084      	sub	sp, #16
 8003ce2:	af00      	add	r7, sp, #0
 8003ce4:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d001      	beq.n	8003cf4 <osDelay+0x16>
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	e000      	b.n	8003cf6 <osDelay+0x18>
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f000 fa48 	bl	800418c <vTaskDelay>
  
  return osOK;
 8003cfc:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003cfe:	4618      	mov	r0, r3
 8003d00:	3710      	adds	r7, #16
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bd80      	pop	{r7, pc}

08003d06 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003d06:	b480      	push	{r7}
 8003d08:	b083      	sub	sp, #12
 8003d0a:	af00      	add	r7, sp, #0
 8003d0c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	f103 0208 	add.w	r2, r3, #8
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	f04f 32ff 	mov.w	r2, #4294967295
 8003d1e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	f103 0208 	add.w	r2, r3, #8
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	f103 0208 	add.w	r2, r3, #8
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2200      	movs	r2, #0
 8003d38:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003d3a:	bf00      	nop
 8003d3c:	370c      	adds	r7, #12
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d44:	4770      	bx	lr

08003d46 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003d46:	b480      	push	{r7}
 8003d48:	b083      	sub	sp, #12
 8003d4a:	af00      	add	r7, sp, #0
 8003d4c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2200      	movs	r2, #0
 8003d52:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003d54:	bf00      	nop
 8003d56:	370c      	adds	r7, #12
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5e:	4770      	bx	lr

08003d60 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003d60:	b480      	push	{r7}
 8003d62:	b085      	sub	sp, #20
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
 8003d68:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	68fa      	ldr	r2, [r7, #12]
 8003d74:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	689a      	ldr	r2, [r3, #8]
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	689b      	ldr	r3, [r3, #8]
 8003d82:	683a      	ldr	r2, [r7, #0]
 8003d84:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	683a      	ldr	r2, [r7, #0]
 8003d8a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	687a      	ldr	r2, [r7, #4]
 8003d90:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	1c5a      	adds	r2, r3, #1
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	601a      	str	r2, [r3, #0]
}
 8003d9c:	bf00      	nop
 8003d9e:	3714      	adds	r7, #20
 8003da0:	46bd      	mov	sp, r7
 8003da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da6:	4770      	bx	lr

08003da8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003da8:	b480      	push	{r7}
 8003daa:	b085      	sub	sp, #20
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
 8003db0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003db8:	68bb      	ldr	r3, [r7, #8]
 8003dba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dbe:	d103      	bne.n	8003dc8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	691b      	ldr	r3, [r3, #16]
 8003dc4:	60fb      	str	r3, [r7, #12]
 8003dc6:	e00c      	b.n	8003de2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	3308      	adds	r3, #8
 8003dcc:	60fb      	str	r3, [r7, #12]
 8003dce:	e002      	b.n	8003dd6 <vListInsert+0x2e>
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	60fb      	str	r3, [r7, #12]
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	685b      	ldr	r3, [r3, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	68ba      	ldr	r2, [r7, #8]
 8003dde:	429a      	cmp	r2, r3
 8003de0:	d2f6      	bcs.n	8003dd0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	685a      	ldr	r2, [r3, #4]
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	683a      	ldr	r2, [r7, #0]
 8003df0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	68fa      	ldr	r2, [r7, #12]
 8003df6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	683a      	ldr	r2, [r7, #0]
 8003dfc:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	687a      	ldr	r2, [r7, #4]
 8003e02:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	1c5a      	adds	r2, r3, #1
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	601a      	str	r2, [r3, #0]
}
 8003e0e:	bf00      	nop
 8003e10:	3714      	adds	r7, #20
 8003e12:	46bd      	mov	sp, r7
 8003e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e18:	4770      	bx	lr

08003e1a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003e1a:	b480      	push	{r7}
 8003e1c:	b085      	sub	sp, #20
 8003e1e:	af00      	add	r7, sp, #0
 8003e20:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	691b      	ldr	r3, [r3, #16]
 8003e26:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	687a      	ldr	r2, [r7, #4]
 8003e2e:	6892      	ldr	r2, [r2, #8]
 8003e30:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	689b      	ldr	r3, [r3, #8]
 8003e36:	687a      	ldr	r2, [r7, #4]
 8003e38:	6852      	ldr	r2, [r2, #4]
 8003e3a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	687a      	ldr	r2, [r7, #4]
 8003e42:	429a      	cmp	r2, r3
 8003e44:	d103      	bne.n	8003e4e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	689a      	ldr	r2, [r3, #8]
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2200      	movs	r2, #0
 8003e52:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	1e5a      	subs	r2, r3, #1
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
}
 8003e62:	4618      	mov	r0, r3
 8003e64:	3714      	adds	r7, #20
 8003e66:	46bd      	mov	sp, r7
 8003e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6c:	4770      	bx	lr

08003e6e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003e6e:	b580      	push	{r7, lr}
 8003e70:	b08e      	sub	sp, #56	; 0x38
 8003e72:	af04      	add	r7, sp, #16
 8003e74:	60f8      	str	r0, [r7, #12]
 8003e76:	60b9      	str	r1, [r7, #8]
 8003e78:	607a      	str	r2, [r7, #4]
 8003e7a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003e7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d109      	bne.n	8003e96 <xTaskCreateStatic+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003e82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e86:	f383 8811 	msr	BASEPRI, r3
 8003e8a:	f3bf 8f6f 	isb	sy
 8003e8e:	f3bf 8f4f 	dsb	sy
 8003e92:	623b      	str	r3, [r7, #32]
 8003e94:	e7fe      	b.n	8003e94 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8003e96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d109      	bne.n	8003eb0 <xTaskCreateStatic+0x42>
 8003e9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ea0:	f383 8811 	msr	BASEPRI, r3
 8003ea4:	f3bf 8f6f 	isb	sy
 8003ea8:	f3bf 8f4f 	dsb	sy
 8003eac:	61fb      	str	r3, [r7, #28]
 8003eae:	e7fe      	b.n	8003eae <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003eb0:	2354      	movs	r3, #84	; 0x54
 8003eb2:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003eb4:	693b      	ldr	r3, [r7, #16]
 8003eb6:	2b54      	cmp	r3, #84	; 0x54
 8003eb8:	d009      	beq.n	8003ece <xTaskCreateStatic+0x60>
 8003eba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ebe:	f383 8811 	msr	BASEPRI, r3
 8003ec2:	f3bf 8f6f 	isb	sy
 8003ec6:	f3bf 8f4f 	dsb	sy
 8003eca:	61bb      	str	r3, [r7, #24]
 8003ecc:	e7fe      	b.n	8003ecc <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003ece:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003ed0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d01e      	beq.n	8003f14 <xTaskCreateStatic+0xa6>
 8003ed6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d01b      	beq.n	8003f14 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003edc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ede:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003ee4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee8:	2202      	movs	r2, #2
 8003eea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003eee:	2300      	movs	r3, #0
 8003ef0:	9303      	str	r3, [sp, #12]
 8003ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ef4:	9302      	str	r3, [sp, #8]
 8003ef6:	f107 0314 	add.w	r3, r7, #20
 8003efa:	9301      	str	r3, [sp, #4]
 8003efc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003efe:	9300      	str	r3, [sp, #0]
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	687a      	ldr	r2, [r7, #4]
 8003f04:	68b9      	ldr	r1, [r7, #8]
 8003f06:	68f8      	ldr	r0, [r7, #12]
 8003f08:	f000 f850 	bl	8003fac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003f0c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003f0e:	f000 f8d3 	bl	80040b8 <prvAddNewTaskToReadyList>
 8003f12:	e001      	b.n	8003f18 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8003f14:	2300      	movs	r3, #0
 8003f16:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003f18:	697b      	ldr	r3, [r7, #20]
	}
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	3728      	adds	r7, #40	; 0x28
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bd80      	pop	{r7, pc}

08003f22 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003f22:	b580      	push	{r7, lr}
 8003f24:	b08c      	sub	sp, #48	; 0x30
 8003f26:	af04      	add	r7, sp, #16
 8003f28:	60f8      	str	r0, [r7, #12]
 8003f2a:	60b9      	str	r1, [r7, #8]
 8003f2c:	603b      	str	r3, [r7, #0]
 8003f2e:	4613      	mov	r3, r2
 8003f30:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003f32:	88fb      	ldrh	r3, [r7, #6]
 8003f34:	009b      	lsls	r3, r3, #2
 8003f36:	4618      	mov	r0, r3
 8003f38:	f000 fecc 	bl	8004cd4 <pvPortMalloc>
 8003f3c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003f3e:	697b      	ldr	r3, [r7, #20]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d00e      	beq.n	8003f62 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003f44:	2054      	movs	r0, #84	; 0x54
 8003f46:	f000 fec5 	bl	8004cd4 <pvPortMalloc>
 8003f4a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003f4c:	69fb      	ldr	r3, [r7, #28]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d003      	beq.n	8003f5a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003f52:	69fb      	ldr	r3, [r7, #28]
 8003f54:	697a      	ldr	r2, [r7, #20]
 8003f56:	631a      	str	r2, [r3, #48]	; 0x30
 8003f58:	e005      	b.n	8003f66 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003f5a:	6978      	ldr	r0, [r7, #20]
 8003f5c:	f000 ff7c 	bl	8004e58 <vPortFree>
 8003f60:	e001      	b.n	8003f66 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003f62:	2300      	movs	r3, #0
 8003f64:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003f66:	69fb      	ldr	r3, [r7, #28]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d017      	beq.n	8003f9c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003f6c:	69fb      	ldr	r3, [r7, #28]
 8003f6e:	2200      	movs	r2, #0
 8003f70:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003f74:	88fa      	ldrh	r2, [r7, #6]
 8003f76:	2300      	movs	r3, #0
 8003f78:	9303      	str	r3, [sp, #12]
 8003f7a:	69fb      	ldr	r3, [r7, #28]
 8003f7c:	9302      	str	r3, [sp, #8]
 8003f7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f80:	9301      	str	r3, [sp, #4]
 8003f82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f84:	9300      	str	r3, [sp, #0]
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	68b9      	ldr	r1, [r7, #8]
 8003f8a:	68f8      	ldr	r0, [r7, #12]
 8003f8c:	f000 f80e 	bl	8003fac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003f90:	69f8      	ldr	r0, [r7, #28]
 8003f92:	f000 f891 	bl	80040b8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003f96:	2301      	movs	r3, #1
 8003f98:	61bb      	str	r3, [r7, #24]
 8003f9a:	e002      	b.n	8003fa2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003f9c:	f04f 33ff 	mov.w	r3, #4294967295
 8003fa0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003fa2:	69bb      	ldr	r3, [r7, #24]
	}
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	3720      	adds	r7, #32
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bd80      	pop	{r7, pc}

08003fac <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b088      	sub	sp, #32
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	60f8      	str	r0, [r7, #12]
 8003fb4:	60b9      	str	r1, [r7, #8]
 8003fb6:	607a      	str	r2, [r7, #4]
 8003fb8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003fba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fbc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003fc4:	3b01      	subs	r3, #1
 8003fc6:	009b      	lsls	r3, r3, #2
 8003fc8:	4413      	add	r3, r2
 8003fca:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003fcc:	69bb      	ldr	r3, [r7, #24]
 8003fce:	f023 0307 	bic.w	r3, r3, #7
 8003fd2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003fd4:	69bb      	ldr	r3, [r7, #24]
 8003fd6:	f003 0307 	and.w	r3, r3, #7
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d009      	beq.n	8003ff2 <prvInitialiseNewTask+0x46>
 8003fde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fe2:	f383 8811 	msr	BASEPRI, r3
 8003fe6:	f3bf 8f6f 	isb	sy
 8003fea:	f3bf 8f4f 	dsb	sy
 8003fee:	617b      	str	r3, [r7, #20]
 8003ff0:	e7fe      	b.n	8003ff0 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003ff2:	68bb      	ldr	r3, [r7, #8]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d01f      	beq.n	8004038 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	61fb      	str	r3, [r7, #28]
 8003ffc:	e012      	b.n	8004024 <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003ffe:	68ba      	ldr	r2, [r7, #8]
 8004000:	69fb      	ldr	r3, [r7, #28]
 8004002:	4413      	add	r3, r2
 8004004:	7819      	ldrb	r1, [r3, #0]
 8004006:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004008:	69fb      	ldr	r3, [r7, #28]
 800400a:	4413      	add	r3, r2
 800400c:	3334      	adds	r3, #52	; 0x34
 800400e:	460a      	mov	r2, r1
 8004010:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004012:	68ba      	ldr	r2, [r7, #8]
 8004014:	69fb      	ldr	r3, [r7, #28]
 8004016:	4413      	add	r3, r2
 8004018:	781b      	ldrb	r3, [r3, #0]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d006      	beq.n	800402c <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800401e:	69fb      	ldr	r3, [r7, #28]
 8004020:	3301      	adds	r3, #1
 8004022:	61fb      	str	r3, [r7, #28]
 8004024:	69fb      	ldr	r3, [r7, #28]
 8004026:	2b0f      	cmp	r3, #15
 8004028:	d9e9      	bls.n	8003ffe <prvInitialiseNewTask+0x52>
 800402a:	e000      	b.n	800402e <prvInitialiseNewTask+0x82>
			{
				break;
 800402c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800402e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004030:	2200      	movs	r2, #0
 8004032:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004036:	e003      	b.n	8004040 <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800403a:	2200      	movs	r2, #0
 800403c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004042:	2b06      	cmp	r3, #6
 8004044:	d901      	bls.n	800404a <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004046:	2306      	movs	r3, #6
 8004048:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800404a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800404c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800404e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004052:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004054:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004058:	2200      	movs	r2, #0
 800405a:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800405c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800405e:	3304      	adds	r3, #4
 8004060:	4618      	mov	r0, r3
 8004062:	f7ff fe70 	bl	8003d46 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004068:	3318      	adds	r3, #24
 800406a:	4618      	mov	r0, r3
 800406c:	f7ff fe6b 	bl	8003d46 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004072:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004074:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004078:	f1c3 0207 	rsb	r2, r3, #7
 800407c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800407e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004080:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004082:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004084:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004088:	2200      	movs	r2, #0
 800408a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800408c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800408e:	2200      	movs	r2, #0
 8004090:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004094:	683a      	ldr	r2, [r7, #0]
 8004096:	68f9      	ldr	r1, [r7, #12]
 8004098:	69b8      	ldr	r0, [r7, #24]
 800409a:	f000 fc1b 	bl	80048d4 <pxPortInitialiseStack>
 800409e:	4602      	mov	r2, r0
 80040a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040a2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80040a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d002      	beq.n	80040b0 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80040aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80040ae:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80040b0:	bf00      	nop
 80040b2:	3720      	adds	r7, #32
 80040b4:	46bd      	mov	sp, r7
 80040b6:	bd80      	pop	{r7, pc}

080040b8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b082      	sub	sp, #8
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80040c0:	f000 fd2c 	bl	8004b1c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80040c4:	4b2a      	ldr	r3, [pc, #168]	; (8004170 <prvAddNewTaskToReadyList+0xb8>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	3301      	adds	r3, #1
 80040ca:	4a29      	ldr	r2, [pc, #164]	; (8004170 <prvAddNewTaskToReadyList+0xb8>)
 80040cc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80040ce:	4b29      	ldr	r3, [pc, #164]	; (8004174 <prvAddNewTaskToReadyList+0xbc>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d109      	bne.n	80040ea <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80040d6:	4a27      	ldr	r2, [pc, #156]	; (8004174 <prvAddNewTaskToReadyList+0xbc>)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80040dc:	4b24      	ldr	r3, [pc, #144]	; (8004170 <prvAddNewTaskToReadyList+0xb8>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	2b01      	cmp	r3, #1
 80040e2:	d110      	bne.n	8004106 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80040e4:	f000 fab8 	bl	8004658 <prvInitialiseTaskLists>
 80040e8:	e00d      	b.n	8004106 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80040ea:	4b23      	ldr	r3, [pc, #140]	; (8004178 <prvAddNewTaskToReadyList+0xc0>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d109      	bne.n	8004106 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80040f2:	4b20      	ldr	r3, [pc, #128]	; (8004174 <prvAddNewTaskToReadyList+0xbc>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040fc:	429a      	cmp	r2, r3
 80040fe:	d802      	bhi.n	8004106 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004100:	4a1c      	ldr	r2, [pc, #112]	; (8004174 <prvAddNewTaskToReadyList+0xbc>)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004106:	4b1d      	ldr	r3, [pc, #116]	; (800417c <prvAddNewTaskToReadyList+0xc4>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	3301      	adds	r3, #1
 800410c:	4a1b      	ldr	r2, [pc, #108]	; (800417c <prvAddNewTaskToReadyList+0xc4>)
 800410e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004114:	2201      	movs	r2, #1
 8004116:	409a      	lsls	r2, r3
 8004118:	4b19      	ldr	r3, [pc, #100]	; (8004180 <prvAddNewTaskToReadyList+0xc8>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4313      	orrs	r3, r2
 800411e:	4a18      	ldr	r2, [pc, #96]	; (8004180 <prvAddNewTaskToReadyList+0xc8>)
 8004120:	6013      	str	r3, [r2, #0]
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004126:	4613      	mov	r3, r2
 8004128:	009b      	lsls	r3, r3, #2
 800412a:	4413      	add	r3, r2
 800412c:	009b      	lsls	r3, r3, #2
 800412e:	4a15      	ldr	r2, [pc, #84]	; (8004184 <prvAddNewTaskToReadyList+0xcc>)
 8004130:	441a      	add	r2, r3
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	3304      	adds	r3, #4
 8004136:	4619      	mov	r1, r3
 8004138:	4610      	mov	r0, r2
 800413a:	f7ff fe11 	bl	8003d60 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800413e:	f000 fd1b 	bl	8004b78 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004142:	4b0d      	ldr	r3, [pc, #52]	; (8004178 <prvAddNewTaskToReadyList+0xc0>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d00e      	beq.n	8004168 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800414a:	4b0a      	ldr	r3, [pc, #40]	; (8004174 <prvAddNewTaskToReadyList+0xbc>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004154:	429a      	cmp	r2, r3
 8004156:	d207      	bcs.n	8004168 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004158:	4b0b      	ldr	r3, [pc, #44]	; (8004188 <prvAddNewTaskToReadyList+0xd0>)
 800415a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800415e:	601a      	str	r2, [r3, #0]
 8004160:	f3bf 8f4f 	dsb	sy
 8004164:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004168:	bf00      	nop
 800416a:	3708      	adds	r7, #8
 800416c:	46bd      	mov	sp, r7
 800416e:	bd80      	pop	{r7, pc}
 8004170:	200003f0 	.word	0x200003f0
 8004174:	200002f0 	.word	0x200002f0
 8004178:	200003fc 	.word	0x200003fc
 800417c:	2000040c 	.word	0x2000040c
 8004180:	200003f8 	.word	0x200003f8
 8004184:	200002f4 	.word	0x200002f4
 8004188:	e000ed04 	.word	0xe000ed04

0800418c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800418c:	b580      	push	{r7, lr}
 800418e:	b084      	sub	sp, #16
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004194:	2300      	movs	r3, #0
 8004196:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d016      	beq.n	80041cc <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800419e:	4b13      	ldr	r3, [pc, #76]	; (80041ec <vTaskDelay+0x60>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d009      	beq.n	80041ba <vTaskDelay+0x2e>
 80041a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041aa:	f383 8811 	msr	BASEPRI, r3
 80041ae:	f3bf 8f6f 	isb	sy
 80041b2:	f3bf 8f4f 	dsb	sy
 80041b6:	60bb      	str	r3, [r7, #8]
 80041b8:	e7fe      	b.n	80041b8 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80041ba:	f000 f879 	bl	80042b0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80041be:	2100      	movs	r1, #0
 80041c0:	6878      	ldr	r0, [r7, #4]
 80041c2:	f000 fb21 	bl	8004808 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80041c6:	f000 f881 	bl	80042cc <xTaskResumeAll>
 80041ca:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d107      	bne.n	80041e2 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80041d2:	4b07      	ldr	r3, [pc, #28]	; (80041f0 <vTaskDelay+0x64>)
 80041d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80041d8:	601a      	str	r2, [r3, #0]
 80041da:	f3bf 8f4f 	dsb	sy
 80041de:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80041e2:	bf00      	nop
 80041e4:	3710      	adds	r7, #16
 80041e6:	46bd      	mov	sp, r7
 80041e8:	bd80      	pop	{r7, pc}
 80041ea:	bf00      	nop
 80041ec:	20000418 	.word	0x20000418
 80041f0:	e000ed04 	.word	0xe000ed04

080041f4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b08a      	sub	sp, #40	; 0x28
 80041f8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80041fa:	2300      	movs	r3, #0
 80041fc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80041fe:	2300      	movs	r3, #0
 8004200:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004202:	463a      	mov	r2, r7
 8004204:	1d39      	adds	r1, r7, #4
 8004206:	f107 0308 	add.w	r3, r7, #8
 800420a:	4618      	mov	r0, r3
 800420c:	f7fc f9b8 	bl	8000580 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004210:	6839      	ldr	r1, [r7, #0]
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	68ba      	ldr	r2, [r7, #8]
 8004216:	9202      	str	r2, [sp, #8]
 8004218:	9301      	str	r3, [sp, #4]
 800421a:	2300      	movs	r3, #0
 800421c:	9300      	str	r3, [sp, #0]
 800421e:	2300      	movs	r3, #0
 8004220:	460a      	mov	r2, r1
 8004222:	491d      	ldr	r1, [pc, #116]	; (8004298 <vTaskStartScheduler+0xa4>)
 8004224:	481d      	ldr	r0, [pc, #116]	; (800429c <vTaskStartScheduler+0xa8>)
 8004226:	f7ff fe22 	bl	8003e6e <xTaskCreateStatic>
 800422a:	4602      	mov	r2, r0
 800422c:	4b1c      	ldr	r3, [pc, #112]	; (80042a0 <vTaskStartScheduler+0xac>)
 800422e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004230:	4b1b      	ldr	r3, [pc, #108]	; (80042a0 <vTaskStartScheduler+0xac>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d002      	beq.n	800423e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004238:	2301      	movs	r3, #1
 800423a:	617b      	str	r3, [r7, #20]
 800423c:	e001      	b.n	8004242 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800423e:	2300      	movs	r3, #0
 8004240:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004242:	697b      	ldr	r3, [r7, #20]
 8004244:	2b01      	cmp	r3, #1
 8004246:	d115      	bne.n	8004274 <vTaskStartScheduler+0x80>
 8004248:	f04f 0350 	mov.w	r3, #80	; 0x50
 800424c:	f383 8811 	msr	BASEPRI, r3
 8004250:	f3bf 8f6f 	isb	sy
 8004254:	f3bf 8f4f 	dsb	sy
 8004258:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800425a:	4b12      	ldr	r3, [pc, #72]	; (80042a4 <vTaskStartScheduler+0xb0>)
 800425c:	f04f 32ff 	mov.w	r2, #4294967295
 8004260:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004262:	4b11      	ldr	r3, [pc, #68]	; (80042a8 <vTaskStartScheduler+0xb4>)
 8004264:	2201      	movs	r2, #1
 8004266:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004268:	4b10      	ldr	r3, [pc, #64]	; (80042ac <vTaskStartScheduler+0xb8>)
 800426a:	2200      	movs	r2, #0
 800426c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800426e:	f000 fbb7 	bl	80049e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004272:	e00d      	b.n	8004290 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004274:	697b      	ldr	r3, [r7, #20]
 8004276:	f1b3 3fff 	cmp.w	r3, #4294967295
 800427a:	d109      	bne.n	8004290 <vTaskStartScheduler+0x9c>
 800427c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004280:	f383 8811 	msr	BASEPRI, r3
 8004284:	f3bf 8f6f 	isb	sy
 8004288:	f3bf 8f4f 	dsb	sy
 800428c:	60fb      	str	r3, [r7, #12]
 800428e:	e7fe      	b.n	800428e <vTaskStartScheduler+0x9a>
}
 8004290:	bf00      	nop
 8004292:	3718      	adds	r7, #24
 8004294:	46bd      	mov	sp, r7
 8004296:	bd80      	pop	{r7, pc}
 8004298:	080059ac 	.word	0x080059ac
 800429c:	08004629 	.word	0x08004629
 80042a0:	20000414 	.word	0x20000414
 80042a4:	20000410 	.word	0x20000410
 80042a8:	200003fc 	.word	0x200003fc
 80042ac:	200003f4 	.word	0x200003f4

080042b0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80042b0:	b480      	push	{r7}
 80042b2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80042b4:	4b04      	ldr	r3, [pc, #16]	; (80042c8 <vTaskSuspendAll+0x18>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	3301      	adds	r3, #1
 80042ba:	4a03      	ldr	r2, [pc, #12]	; (80042c8 <vTaskSuspendAll+0x18>)
 80042bc:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80042be:	bf00      	nop
 80042c0:	46bd      	mov	sp, r7
 80042c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c6:	4770      	bx	lr
 80042c8:	20000418 	.word	0x20000418

080042cc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b084      	sub	sp, #16
 80042d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80042d2:	2300      	movs	r3, #0
 80042d4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80042d6:	2300      	movs	r3, #0
 80042d8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80042da:	4b41      	ldr	r3, [pc, #260]	; (80043e0 <xTaskResumeAll+0x114>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d109      	bne.n	80042f6 <xTaskResumeAll+0x2a>
 80042e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042e6:	f383 8811 	msr	BASEPRI, r3
 80042ea:	f3bf 8f6f 	isb	sy
 80042ee:	f3bf 8f4f 	dsb	sy
 80042f2:	603b      	str	r3, [r7, #0]
 80042f4:	e7fe      	b.n	80042f4 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80042f6:	f000 fc11 	bl	8004b1c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80042fa:	4b39      	ldr	r3, [pc, #228]	; (80043e0 <xTaskResumeAll+0x114>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	3b01      	subs	r3, #1
 8004300:	4a37      	ldr	r2, [pc, #220]	; (80043e0 <xTaskResumeAll+0x114>)
 8004302:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004304:	4b36      	ldr	r3, [pc, #216]	; (80043e0 <xTaskResumeAll+0x114>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d161      	bne.n	80043d0 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800430c:	4b35      	ldr	r3, [pc, #212]	; (80043e4 <xTaskResumeAll+0x118>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d05d      	beq.n	80043d0 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004314:	e02e      	b.n	8004374 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004316:	4b34      	ldr	r3, [pc, #208]	; (80043e8 <xTaskResumeAll+0x11c>)
 8004318:	68db      	ldr	r3, [r3, #12]
 800431a:	68db      	ldr	r3, [r3, #12]
 800431c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	3318      	adds	r3, #24
 8004322:	4618      	mov	r0, r3
 8004324:	f7ff fd79 	bl	8003e1a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	3304      	adds	r3, #4
 800432c:	4618      	mov	r0, r3
 800432e:	f7ff fd74 	bl	8003e1a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004336:	2201      	movs	r2, #1
 8004338:	409a      	lsls	r2, r3
 800433a:	4b2c      	ldr	r3, [pc, #176]	; (80043ec <xTaskResumeAll+0x120>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4313      	orrs	r3, r2
 8004340:	4a2a      	ldr	r2, [pc, #168]	; (80043ec <xTaskResumeAll+0x120>)
 8004342:	6013      	str	r3, [r2, #0]
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004348:	4613      	mov	r3, r2
 800434a:	009b      	lsls	r3, r3, #2
 800434c:	4413      	add	r3, r2
 800434e:	009b      	lsls	r3, r3, #2
 8004350:	4a27      	ldr	r2, [pc, #156]	; (80043f0 <xTaskResumeAll+0x124>)
 8004352:	441a      	add	r2, r3
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	3304      	adds	r3, #4
 8004358:	4619      	mov	r1, r3
 800435a:	4610      	mov	r0, r2
 800435c:	f7ff fd00 	bl	8003d60 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004364:	4b23      	ldr	r3, [pc, #140]	; (80043f4 <xTaskResumeAll+0x128>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800436a:	429a      	cmp	r2, r3
 800436c:	d302      	bcc.n	8004374 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 800436e:	4b22      	ldr	r3, [pc, #136]	; (80043f8 <xTaskResumeAll+0x12c>)
 8004370:	2201      	movs	r2, #1
 8004372:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004374:	4b1c      	ldr	r3, [pc, #112]	; (80043e8 <xTaskResumeAll+0x11c>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d1cc      	bne.n	8004316 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d001      	beq.n	8004386 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004382:	f000 fa03 	bl	800478c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004386:	4b1d      	ldr	r3, [pc, #116]	; (80043fc <xTaskResumeAll+0x130>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d010      	beq.n	80043b4 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004392:	f000 f837 	bl	8004404 <xTaskIncrementTick>
 8004396:	4603      	mov	r3, r0
 8004398:	2b00      	cmp	r3, #0
 800439a:	d002      	beq.n	80043a2 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 800439c:	4b16      	ldr	r3, [pc, #88]	; (80043f8 <xTaskResumeAll+0x12c>)
 800439e:	2201      	movs	r2, #1
 80043a0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	3b01      	subs	r3, #1
 80043a6:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d1f1      	bne.n	8004392 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 80043ae:	4b13      	ldr	r3, [pc, #76]	; (80043fc <xTaskResumeAll+0x130>)
 80043b0:	2200      	movs	r2, #0
 80043b2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80043b4:	4b10      	ldr	r3, [pc, #64]	; (80043f8 <xTaskResumeAll+0x12c>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d009      	beq.n	80043d0 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80043bc:	2301      	movs	r3, #1
 80043be:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80043c0:	4b0f      	ldr	r3, [pc, #60]	; (8004400 <xTaskResumeAll+0x134>)
 80043c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043c6:	601a      	str	r2, [r3, #0]
 80043c8:	f3bf 8f4f 	dsb	sy
 80043cc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80043d0:	f000 fbd2 	bl	8004b78 <vPortExitCritical>

	return xAlreadyYielded;
 80043d4:	68bb      	ldr	r3, [r7, #8]
}
 80043d6:	4618      	mov	r0, r3
 80043d8:	3710      	adds	r7, #16
 80043da:	46bd      	mov	sp, r7
 80043dc:	bd80      	pop	{r7, pc}
 80043de:	bf00      	nop
 80043e0:	20000418 	.word	0x20000418
 80043e4:	200003f0 	.word	0x200003f0
 80043e8:	200003b0 	.word	0x200003b0
 80043ec:	200003f8 	.word	0x200003f8
 80043f0:	200002f4 	.word	0x200002f4
 80043f4:	200002f0 	.word	0x200002f0
 80043f8:	20000404 	.word	0x20000404
 80043fc:	20000400 	.word	0x20000400
 8004400:	e000ed04 	.word	0xe000ed04

08004404 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b086      	sub	sp, #24
 8004408:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800440a:	2300      	movs	r3, #0
 800440c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800440e:	4b4e      	ldr	r3, [pc, #312]	; (8004548 <xTaskIncrementTick+0x144>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	2b00      	cmp	r3, #0
 8004414:	f040 8087 	bne.w	8004526 <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004418:	4b4c      	ldr	r3, [pc, #304]	; (800454c <xTaskIncrementTick+0x148>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	3301      	adds	r3, #1
 800441e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004420:	4a4a      	ldr	r2, [pc, #296]	; (800454c <xTaskIncrementTick+0x148>)
 8004422:	693b      	ldr	r3, [r7, #16]
 8004424:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004426:	693b      	ldr	r3, [r7, #16]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d11f      	bne.n	800446c <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800442c:	4b48      	ldr	r3, [pc, #288]	; (8004550 <xTaskIncrementTick+0x14c>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d009      	beq.n	800444a <xTaskIncrementTick+0x46>
 8004436:	f04f 0350 	mov.w	r3, #80	; 0x50
 800443a:	f383 8811 	msr	BASEPRI, r3
 800443e:	f3bf 8f6f 	isb	sy
 8004442:	f3bf 8f4f 	dsb	sy
 8004446:	603b      	str	r3, [r7, #0]
 8004448:	e7fe      	b.n	8004448 <xTaskIncrementTick+0x44>
 800444a:	4b41      	ldr	r3, [pc, #260]	; (8004550 <xTaskIncrementTick+0x14c>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	60fb      	str	r3, [r7, #12]
 8004450:	4b40      	ldr	r3, [pc, #256]	; (8004554 <xTaskIncrementTick+0x150>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4a3e      	ldr	r2, [pc, #248]	; (8004550 <xTaskIncrementTick+0x14c>)
 8004456:	6013      	str	r3, [r2, #0]
 8004458:	4a3e      	ldr	r2, [pc, #248]	; (8004554 <xTaskIncrementTick+0x150>)
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	6013      	str	r3, [r2, #0]
 800445e:	4b3e      	ldr	r3, [pc, #248]	; (8004558 <xTaskIncrementTick+0x154>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	3301      	adds	r3, #1
 8004464:	4a3c      	ldr	r2, [pc, #240]	; (8004558 <xTaskIncrementTick+0x154>)
 8004466:	6013      	str	r3, [r2, #0]
 8004468:	f000 f990 	bl	800478c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800446c:	4b3b      	ldr	r3, [pc, #236]	; (800455c <xTaskIncrementTick+0x158>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	693a      	ldr	r2, [r7, #16]
 8004472:	429a      	cmp	r2, r3
 8004474:	d348      	bcc.n	8004508 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004476:	4b36      	ldr	r3, [pc, #216]	; (8004550 <xTaskIncrementTick+0x14c>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d104      	bne.n	800448a <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004480:	4b36      	ldr	r3, [pc, #216]	; (800455c <xTaskIncrementTick+0x158>)
 8004482:	f04f 32ff 	mov.w	r2, #4294967295
 8004486:	601a      	str	r2, [r3, #0]
					break;
 8004488:	e03e      	b.n	8004508 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800448a:	4b31      	ldr	r3, [pc, #196]	; (8004550 <xTaskIncrementTick+0x14c>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	68db      	ldr	r3, [r3, #12]
 8004490:	68db      	ldr	r3, [r3, #12]
 8004492:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004494:	68bb      	ldr	r3, [r7, #8]
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800449a:	693a      	ldr	r2, [r7, #16]
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	429a      	cmp	r2, r3
 80044a0:	d203      	bcs.n	80044aa <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80044a2:	4a2e      	ldr	r2, [pc, #184]	; (800455c <xTaskIncrementTick+0x158>)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80044a8:	e02e      	b.n	8004508 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80044aa:	68bb      	ldr	r3, [r7, #8]
 80044ac:	3304      	adds	r3, #4
 80044ae:	4618      	mov	r0, r3
 80044b0:	f7ff fcb3 	bl	8003e1a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80044b4:	68bb      	ldr	r3, [r7, #8]
 80044b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d004      	beq.n	80044c6 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80044bc:	68bb      	ldr	r3, [r7, #8]
 80044be:	3318      	adds	r3, #24
 80044c0:	4618      	mov	r0, r3
 80044c2:	f7ff fcaa 	bl	8003e1a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80044c6:	68bb      	ldr	r3, [r7, #8]
 80044c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044ca:	2201      	movs	r2, #1
 80044cc:	409a      	lsls	r2, r3
 80044ce:	4b24      	ldr	r3, [pc, #144]	; (8004560 <xTaskIncrementTick+0x15c>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4313      	orrs	r3, r2
 80044d4:	4a22      	ldr	r2, [pc, #136]	; (8004560 <xTaskIncrementTick+0x15c>)
 80044d6:	6013      	str	r3, [r2, #0]
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044dc:	4613      	mov	r3, r2
 80044de:	009b      	lsls	r3, r3, #2
 80044e0:	4413      	add	r3, r2
 80044e2:	009b      	lsls	r3, r3, #2
 80044e4:	4a1f      	ldr	r2, [pc, #124]	; (8004564 <xTaskIncrementTick+0x160>)
 80044e6:	441a      	add	r2, r3
 80044e8:	68bb      	ldr	r3, [r7, #8]
 80044ea:	3304      	adds	r3, #4
 80044ec:	4619      	mov	r1, r3
 80044ee:	4610      	mov	r0, r2
 80044f0:	f7ff fc36 	bl	8003d60 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044f8:	4b1b      	ldr	r3, [pc, #108]	; (8004568 <xTaskIncrementTick+0x164>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044fe:	429a      	cmp	r2, r3
 8004500:	d3b9      	bcc.n	8004476 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8004502:	2301      	movs	r3, #1
 8004504:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004506:	e7b6      	b.n	8004476 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004508:	4b17      	ldr	r3, [pc, #92]	; (8004568 <xTaskIncrementTick+0x164>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800450e:	4915      	ldr	r1, [pc, #84]	; (8004564 <xTaskIncrementTick+0x160>)
 8004510:	4613      	mov	r3, r2
 8004512:	009b      	lsls	r3, r3, #2
 8004514:	4413      	add	r3, r2
 8004516:	009b      	lsls	r3, r3, #2
 8004518:	440b      	add	r3, r1
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	2b01      	cmp	r3, #1
 800451e:	d907      	bls.n	8004530 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8004520:	2301      	movs	r3, #1
 8004522:	617b      	str	r3, [r7, #20]
 8004524:	e004      	b.n	8004530 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004526:	4b11      	ldr	r3, [pc, #68]	; (800456c <xTaskIncrementTick+0x168>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	3301      	adds	r3, #1
 800452c:	4a0f      	ldr	r2, [pc, #60]	; (800456c <xTaskIncrementTick+0x168>)
 800452e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004530:	4b0f      	ldr	r3, [pc, #60]	; (8004570 <xTaskIncrementTick+0x16c>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d001      	beq.n	800453c <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 8004538:	2301      	movs	r3, #1
 800453a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800453c:	697b      	ldr	r3, [r7, #20]
}
 800453e:	4618      	mov	r0, r3
 8004540:	3718      	adds	r7, #24
 8004542:	46bd      	mov	sp, r7
 8004544:	bd80      	pop	{r7, pc}
 8004546:	bf00      	nop
 8004548:	20000418 	.word	0x20000418
 800454c:	200003f4 	.word	0x200003f4
 8004550:	200003a8 	.word	0x200003a8
 8004554:	200003ac 	.word	0x200003ac
 8004558:	20000408 	.word	0x20000408
 800455c:	20000410 	.word	0x20000410
 8004560:	200003f8 	.word	0x200003f8
 8004564:	200002f4 	.word	0x200002f4
 8004568:	200002f0 	.word	0x200002f0
 800456c:	20000400 	.word	0x20000400
 8004570:	20000404 	.word	0x20000404

08004574 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004574:	b480      	push	{r7}
 8004576:	b087      	sub	sp, #28
 8004578:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800457a:	4b26      	ldr	r3, [pc, #152]	; (8004614 <vTaskSwitchContext+0xa0>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d003      	beq.n	800458a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004582:	4b25      	ldr	r3, [pc, #148]	; (8004618 <vTaskSwitchContext+0xa4>)
 8004584:	2201      	movs	r2, #1
 8004586:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004588:	e03e      	b.n	8004608 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 800458a:	4b23      	ldr	r3, [pc, #140]	; (8004618 <vTaskSwitchContext+0xa4>)
 800458c:	2200      	movs	r2, #0
 800458e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004590:	4b22      	ldr	r3, [pc, #136]	; (800461c <vTaskSwitchContext+0xa8>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	fab3 f383 	clz	r3, r3
 800459c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800459e:	7afb      	ldrb	r3, [r7, #11]
 80045a0:	f1c3 031f 	rsb	r3, r3, #31
 80045a4:	617b      	str	r3, [r7, #20]
 80045a6:	491e      	ldr	r1, [pc, #120]	; (8004620 <vTaskSwitchContext+0xac>)
 80045a8:	697a      	ldr	r2, [r7, #20]
 80045aa:	4613      	mov	r3, r2
 80045ac:	009b      	lsls	r3, r3, #2
 80045ae:	4413      	add	r3, r2
 80045b0:	009b      	lsls	r3, r3, #2
 80045b2:	440b      	add	r3, r1
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d109      	bne.n	80045ce <vTaskSwitchContext+0x5a>
	__asm volatile
 80045ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045be:	f383 8811 	msr	BASEPRI, r3
 80045c2:	f3bf 8f6f 	isb	sy
 80045c6:	f3bf 8f4f 	dsb	sy
 80045ca:	607b      	str	r3, [r7, #4]
 80045cc:	e7fe      	b.n	80045cc <vTaskSwitchContext+0x58>
 80045ce:	697a      	ldr	r2, [r7, #20]
 80045d0:	4613      	mov	r3, r2
 80045d2:	009b      	lsls	r3, r3, #2
 80045d4:	4413      	add	r3, r2
 80045d6:	009b      	lsls	r3, r3, #2
 80045d8:	4a11      	ldr	r2, [pc, #68]	; (8004620 <vTaskSwitchContext+0xac>)
 80045da:	4413      	add	r3, r2
 80045dc:	613b      	str	r3, [r7, #16]
 80045de:	693b      	ldr	r3, [r7, #16]
 80045e0:	685b      	ldr	r3, [r3, #4]
 80045e2:	685a      	ldr	r2, [r3, #4]
 80045e4:	693b      	ldr	r3, [r7, #16]
 80045e6:	605a      	str	r2, [r3, #4]
 80045e8:	693b      	ldr	r3, [r7, #16]
 80045ea:	685a      	ldr	r2, [r3, #4]
 80045ec:	693b      	ldr	r3, [r7, #16]
 80045ee:	3308      	adds	r3, #8
 80045f0:	429a      	cmp	r2, r3
 80045f2:	d104      	bne.n	80045fe <vTaskSwitchContext+0x8a>
 80045f4:	693b      	ldr	r3, [r7, #16]
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	685a      	ldr	r2, [r3, #4]
 80045fa:	693b      	ldr	r3, [r7, #16]
 80045fc:	605a      	str	r2, [r3, #4]
 80045fe:	693b      	ldr	r3, [r7, #16]
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	68db      	ldr	r3, [r3, #12]
 8004604:	4a07      	ldr	r2, [pc, #28]	; (8004624 <vTaskSwitchContext+0xb0>)
 8004606:	6013      	str	r3, [r2, #0]
}
 8004608:	bf00      	nop
 800460a:	371c      	adds	r7, #28
 800460c:	46bd      	mov	sp, r7
 800460e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004612:	4770      	bx	lr
 8004614:	20000418 	.word	0x20000418
 8004618:	20000404 	.word	0x20000404
 800461c:	200003f8 	.word	0x200003f8
 8004620:	200002f4 	.word	0x200002f4
 8004624:	200002f0 	.word	0x200002f0

08004628 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b082      	sub	sp, #8
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004630:	f000 f852 	bl	80046d8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004634:	4b06      	ldr	r3, [pc, #24]	; (8004650 <prvIdleTask+0x28>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	2b01      	cmp	r3, #1
 800463a:	d9f9      	bls.n	8004630 <prvIdleTask+0x8>
			{
				taskYIELD();
 800463c:	4b05      	ldr	r3, [pc, #20]	; (8004654 <prvIdleTask+0x2c>)
 800463e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004642:	601a      	str	r2, [r3, #0]
 8004644:	f3bf 8f4f 	dsb	sy
 8004648:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800464c:	e7f0      	b.n	8004630 <prvIdleTask+0x8>
 800464e:	bf00      	nop
 8004650:	200002f4 	.word	0x200002f4
 8004654:	e000ed04 	.word	0xe000ed04

08004658 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b082      	sub	sp, #8
 800465c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800465e:	2300      	movs	r3, #0
 8004660:	607b      	str	r3, [r7, #4]
 8004662:	e00c      	b.n	800467e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004664:	687a      	ldr	r2, [r7, #4]
 8004666:	4613      	mov	r3, r2
 8004668:	009b      	lsls	r3, r3, #2
 800466a:	4413      	add	r3, r2
 800466c:	009b      	lsls	r3, r3, #2
 800466e:	4a12      	ldr	r2, [pc, #72]	; (80046b8 <prvInitialiseTaskLists+0x60>)
 8004670:	4413      	add	r3, r2
 8004672:	4618      	mov	r0, r3
 8004674:	f7ff fb47 	bl	8003d06 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	3301      	adds	r3, #1
 800467c:	607b      	str	r3, [r7, #4]
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2b06      	cmp	r3, #6
 8004682:	d9ef      	bls.n	8004664 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004684:	480d      	ldr	r0, [pc, #52]	; (80046bc <prvInitialiseTaskLists+0x64>)
 8004686:	f7ff fb3e 	bl	8003d06 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800468a:	480d      	ldr	r0, [pc, #52]	; (80046c0 <prvInitialiseTaskLists+0x68>)
 800468c:	f7ff fb3b 	bl	8003d06 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004690:	480c      	ldr	r0, [pc, #48]	; (80046c4 <prvInitialiseTaskLists+0x6c>)
 8004692:	f7ff fb38 	bl	8003d06 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004696:	480c      	ldr	r0, [pc, #48]	; (80046c8 <prvInitialiseTaskLists+0x70>)
 8004698:	f7ff fb35 	bl	8003d06 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800469c:	480b      	ldr	r0, [pc, #44]	; (80046cc <prvInitialiseTaskLists+0x74>)
 800469e:	f7ff fb32 	bl	8003d06 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80046a2:	4b0b      	ldr	r3, [pc, #44]	; (80046d0 <prvInitialiseTaskLists+0x78>)
 80046a4:	4a05      	ldr	r2, [pc, #20]	; (80046bc <prvInitialiseTaskLists+0x64>)
 80046a6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80046a8:	4b0a      	ldr	r3, [pc, #40]	; (80046d4 <prvInitialiseTaskLists+0x7c>)
 80046aa:	4a05      	ldr	r2, [pc, #20]	; (80046c0 <prvInitialiseTaskLists+0x68>)
 80046ac:	601a      	str	r2, [r3, #0]
}
 80046ae:	bf00      	nop
 80046b0:	3708      	adds	r7, #8
 80046b2:	46bd      	mov	sp, r7
 80046b4:	bd80      	pop	{r7, pc}
 80046b6:	bf00      	nop
 80046b8:	200002f4 	.word	0x200002f4
 80046bc:	20000380 	.word	0x20000380
 80046c0:	20000394 	.word	0x20000394
 80046c4:	200003b0 	.word	0x200003b0
 80046c8:	200003c4 	.word	0x200003c4
 80046cc:	200003dc 	.word	0x200003dc
 80046d0:	200003a8 	.word	0x200003a8
 80046d4:	200003ac 	.word	0x200003ac

080046d8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b082      	sub	sp, #8
 80046dc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80046de:	e019      	b.n	8004714 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80046e0:	f000 fa1c 	bl	8004b1c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80046e4:	4b0f      	ldr	r3, [pc, #60]	; (8004724 <prvCheckTasksWaitingTermination+0x4c>)
 80046e6:	68db      	ldr	r3, [r3, #12]
 80046e8:	68db      	ldr	r3, [r3, #12]
 80046ea:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	3304      	adds	r3, #4
 80046f0:	4618      	mov	r0, r3
 80046f2:	f7ff fb92 	bl	8003e1a <uxListRemove>
				--uxCurrentNumberOfTasks;
 80046f6:	4b0c      	ldr	r3, [pc, #48]	; (8004728 <prvCheckTasksWaitingTermination+0x50>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	3b01      	subs	r3, #1
 80046fc:	4a0a      	ldr	r2, [pc, #40]	; (8004728 <prvCheckTasksWaitingTermination+0x50>)
 80046fe:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004700:	4b0a      	ldr	r3, [pc, #40]	; (800472c <prvCheckTasksWaitingTermination+0x54>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	3b01      	subs	r3, #1
 8004706:	4a09      	ldr	r2, [pc, #36]	; (800472c <prvCheckTasksWaitingTermination+0x54>)
 8004708:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800470a:	f000 fa35 	bl	8004b78 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800470e:	6878      	ldr	r0, [r7, #4]
 8004710:	f000 f80e 	bl	8004730 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004714:	4b05      	ldr	r3, [pc, #20]	; (800472c <prvCheckTasksWaitingTermination+0x54>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d1e1      	bne.n	80046e0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800471c:	bf00      	nop
 800471e:	3708      	adds	r7, #8
 8004720:	46bd      	mov	sp, r7
 8004722:	bd80      	pop	{r7, pc}
 8004724:	200003c4 	.word	0x200003c4
 8004728:	200003f0 	.word	0x200003f0
 800472c:	200003d8 	.word	0x200003d8

08004730 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004730:	b580      	push	{r7, lr}
 8004732:	b084      	sub	sp, #16
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800473e:	2b00      	cmp	r3, #0
 8004740:	d108      	bne.n	8004754 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004746:	4618      	mov	r0, r3
 8004748:	f000 fb86 	bl	8004e58 <vPortFree>
				vPortFree( pxTCB );
 800474c:	6878      	ldr	r0, [r7, #4]
 800474e:	f000 fb83 	bl	8004e58 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004752:	e017      	b.n	8004784 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800475a:	2b01      	cmp	r3, #1
 800475c:	d103      	bne.n	8004766 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800475e:	6878      	ldr	r0, [r7, #4]
 8004760:	f000 fb7a 	bl	8004e58 <vPortFree>
	}
 8004764:	e00e      	b.n	8004784 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800476c:	2b02      	cmp	r3, #2
 800476e:	d009      	beq.n	8004784 <prvDeleteTCB+0x54>
 8004770:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004774:	f383 8811 	msr	BASEPRI, r3
 8004778:	f3bf 8f6f 	isb	sy
 800477c:	f3bf 8f4f 	dsb	sy
 8004780:	60fb      	str	r3, [r7, #12]
 8004782:	e7fe      	b.n	8004782 <prvDeleteTCB+0x52>
	}
 8004784:	bf00      	nop
 8004786:	3710      	adds	r7, #16
 8004788:	46bd      	mov	sp, r7
 800478a:	bd80      	pop	{r7, pc}

0800478c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800478c:	b480      	push	{r7}
 800478e:	b083      	sub	sp, #12
 8004790:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004792:	4b0c      	ldr	r3, [pc, #48]	; (80047c4 <prvResetNextTaskUnblockTime+0x38>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d104      	bne.n	80047a6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800479c:	4b0a      	ldr	r3, [pc, #40]	; (80047c8 <prvResetNextTaskUnblockTime+0x3c>)
 800479e:	f04f 32ff 	mov.w	r2, #4294967295
 80047a2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80047a4:	e008      	b.n	80047b8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80047a6:	4b07      	ldr	r3, [pc, #28]	; (80047c4 <prvResetNextTaskUnblockTime+0x38>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	68db      	ldr	r3, [r3, #12]
 80047ac:	68db      	ldr	r3, [r3, #12]
 80047ae:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	4a04      	ldr	r2, [pc, #16]	; (80047c8 <prvResetNextTaskUnblockTime+0x3c>)
 80047b6:	6013      	str	r3, [r2, #0]
}
 80047b8:	bf00      	nop
 80047ba:	370c      	adds	r7, #12
 80047bc:	46bd      	mov	sp, r7
 80047be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c2:	4770      	bx	lr
 80047c4:	200003a8 	.word	0x200003a8
 80047c8:	20000410 	.word	0x20000410

080047cc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80047cc:	b480      	push	{r7}
 80047ce:	b083      	sub	sp, #12
 80047d0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80047d2:	4b0b      	ldr	r3, [pc, #44]	; (8004800 <xTaskGetSchedulerState+0x34>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d102      	bne.n	80047e0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80047da:	2301      	movs	r3, #1
 80047dc:	607b      	str	r3, [r7, #4]
 80047de:	e008      	b.n	80047f2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80047e0:	4b08      	ldr	r3, [pc, #32]	; (8004804 <xTaskGetSchedulerState+0x38>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d102      	bne.n	80047ee <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80047e8:	2302      	movs	r3, #2
 80047ea:	607b      	str	r3, [r7, #4]
 80047ec:	e001      	b.n	80047f2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80047ee:	2300      	movs	r3, #0
 80047f0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80047f2:	687b      	ldr	r3, [r7, #4]
	}
 80047f4:	4618      	mov	r0, r3
 80047f6:	370c      	adds	r7, #12
 80047f8:	46bd      	mov	sp, r7
 80047fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fe:	4770      	bx	lr
 8004800:	200003fc 	.word	0x200003fc
 8004804:	20000418 	.word	0x20000418

08004808 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b084      	sub	sp, #16
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
 8004810:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004812:	4b29      	ldr	r3, [pc, #164]	; (80048b8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004818:	4b28      	ldr	r3, [pc, #160]	; (80048bc <prvAddCurrentTaskToDelayedList+0xb4>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	3304      	adds	r3, #4
 800481e:	4618      	mov	r0, r3
 8004820:	f7ff fafb 	bl	8003e1a <uxListRemove>
 8004824:	4603      	mov	r3, r0
 8004826:	2b00      	cmp	r3, #0
 8004828:	d10b      	bne.n	8004842 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800482a:	4b24      	ldr	r3, [pc, #144]	; (80048bc <prvAddCurrentTaskToDelayedList+0xb4>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004830:	2201      	movs	r2, #1
 8004832:	fa02 f303 	lsl.w	r3, r2, r3
 8004836:	43da      	mvns	r2, r3
 8004838:	4b21      	ldr	r3, [pc, #132]	; (80048c0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4013      	ands	r3, r2
 800483e:	4a20      	ldr	r2, [pc, #128]	; (80048c0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004840:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004848:	d10a      	bne.n	8004860 <prvAddCurrentTaskToDelayedList+0x58>
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d007      	beq.n	8004860 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004850:	4b1a      	ldr	r3, [pc, #104]	; (80048bc <prvAddCurrentTaskToDelayedList+0xb4>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	3304      	adds	r3, #4
 8004856:	4619      	mov	r1, r3
 8004858:	481a      	ldr	r0, [pc, #104]	; (80048c4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800485a:	f7ff fa81 	bl	8003d60 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800485e:	e026      	b.n	80048ae <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004860:	68fa      	ldr	r2, [r7, #12]
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	4413      	add	r3, r2
 8004866:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004868:	4b14      	ldr	r3, [pc, #80]	; (80048bc <prvAddCurrentTaskToDelayedList+0xb4>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	68ba      	ldr	r2, [r7, #8]
 800486e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004870:	68ba      	ldr	r2, [r7, #8]
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	429a      	cmp	r2, r3
 8004876:	d209      	bcs.n	800488c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004878:	4b13      	ldr	r3, [pc, #76]	; (80048c8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800487a:	681a      	ldr	r2, [r3, #0]
 800487c:	4b0f      	ldr	r3, [pc, #60]	; (80048bc <prvAddCurrentTaskToDelayedList+0xb4>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	3304      	adds	r3, #4
 8004882:	4619      	mov	r1, r3
 8004884:	4610      	mov	r0, r2
 8004886:	f7ff fa8f 	bl	8003da8 <vListInsert>
}
 800488a:	e010      	b.n	80048ae <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800488c:	4b0f      	ldr	r3, [pc, #60]	; (80048cc <prvAddCurrentTaskToDelayedList+0xc4>)
 800488e:	681a      	ldr	r2, [r3, #0]
 8004890:	4b0a      	ldr	r3, [pc, #40]	; (80048bc <prvAddCurrentTaskToDelayedList+0xb4>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	3304      	adds	r3, #4
 8004896:	4619      	mov	r1, r3
 8004898:	4610      	mov	r0, r2
 800489a:	f7ff fa85 	bl	8003da8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800489e:	4b0c      	ldr	r3, [pc, #48]	; (80048d0 <prvAddCurrentTaskToDelayedList+0xc8>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	68ba      	ldr	r2, [r7, #8]
 80048a4:	429a      	cmp	r2, r3
 80048a6:	d202      	bcs.n	80048ae <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80048a8:	4a09      	ldr	r2, [pc, #36]	; (80048d0 <prvAddCurrentTaskToDelayedList+0xc8>)
 80048aa:	68bb      	ldr	r3, [r7, #8]
 80048ac:	6013      	str	r3, [r2, #0]
}
 80048ae:	bf00      	nop
 80048b0:	3710      	adds	r7, #16
 80048b2:	46bd      	mov	sp, r7
 80048b4:	bd80      	pop	{r7, pc}
 80048b6:	bf00      	nop
 80048b8:	200003f4 	.word	0x200003f4
 80048bc:	200002f0 	.word	0x200002f0
 80048c0:	200003f8 	.word	0x200003f8
 80048c4:	200003dc 	.word	0x200003dc
 80048c8:	200003ac 	.word	0x200003ac
 80048cc:	200003a8 	.word	0x200003a8
 80048d0:	20000410 	.word	0x20000410

080048d4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80048d4:	b480      	push	{r7}
 80048d6:	b085      	sub	sp, #20
 80048d8:	af00      	add	r7, sp, #0
 80048da:	60f8      	str	r0, [r7, #12]
 80048dc:	60b9      	str	r1, [r7, #8]
 80048de:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	3b04      	subs	r3, #4
 80048e4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80048ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	3b04      	subs	r3, #4
 80048f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	f023 0201 	bic.w	r2, r3, #1
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	3b04      	subs	r3, #4
 8004902:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004904:	4a0c      	ldr	r2, [pc, #48]	; (8004938 <pxPortInitialiseStack+0x64>)
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	3b14      	subs	r3, #20
 800490e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004910:	687a      	ldr	r2, [r7, #4]
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	3b04      	subs	r3, #4
 800491a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	f06f 0202 	mvn.w	r2, #2
 8004922:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	3b20      	subs	r3, #32
 8004928:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800492a:	68fb      	ldr	r3, [r7, #12]
}
 800492c:	4618      	mov	r0, r3
 800492e:	3714      	adds	r7, #20
 8004930:	46bd      	mov	sp, r7
 8004932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004936:	4770      	bx	lr
 8004938:	0800493d 	.word	0x0800493d

0800493c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800493c:	b480      	push	{r7}
 800493e:	b085      	sub	sp, #20
 8004940:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004942:	2300      	movs	r3, #0
 8004944:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004946:	4b11      	ldr	r3, [pc, #68]	; (800498c <prvTaskExitError+0x50>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800494e:	d009      	beq.n	8004964 <prvTaskExitError+0x28>
 8004950:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004954:	f383 8811 	msr	BASEPRI, r3
 8004958:	f3bf 8f6f 	isb	sy
 800495c:	f3bf 8f4f 	dsb	sy
 8004960:	60fb      	str	r3, [r7, #12]
 8004962:	e7fe      	b.n	8004962 <prvTaskExitError+0x26>
 8004964:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004968:	f383 8811 	msr	BASEPRI, r3
 800496c:	f3bf 8f6f 	isb	sy
 8004970:	f3bf 8f4f 	dsb	sy
 8004974:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004976:	bf00      	nop
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d0fc      	beq.n	8004978 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800497e:	bf00      	nop
 8004980:	3714      	adds	r7, #20
 8004982:	46bd      	mov	sp, r7
 8004984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004988:	4770      	bx	lr
 800498a:	bf00      	nop
 800498c:	2000000c 	.word	0x2000000c

08004990 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004990:	4b07      	ldr	r3, [pc, #28]	; (80049b0 <pxCurrentTCBConst2>)
 8004992:	6819      	ldr	r1, [r3, #0]
 8004994:	6808      	ldr	r0, [r1, #0]
 8004996:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800499a:	f380 8809 	msr	PSP, r0
 800499e:	f3bf 8f6f 	isb	sy
 80049a2:	f04f 0000 	mov.w	r0, #0
 80049a6:	f380 8811 	msr	BASEPRI, r0
 80049aa:	4770      	bx	lr
 80049ac:	f3af 8000 	nop.w

080049b0 <pxCurrentTCBConst2>:
 80049b0:	200002f0 	.word	0x200002f0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80049b4:	bf00      	nop
 80049b6:	bf00      	nop

080049b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80049b8:	4808      	ldr	r0, [pc, #32]	; (80049dc <prvPortStartFirstTask+0x24>)
 80049ba:	6800      	ldr	r0, [r0, #0]
 80049bc:	6800      	ldr	r0, [r0, #0]
 80049be:	f380 8808 	msr	MSP, r0
 80049c2:	f04f 0000 	mov.w	r0, #0
 80049c6:	f380 8814 	msr	CONTROL, r0
 80049ca:	b662      	cpsie	i
 80049cc:	b661      	cpsie	f
 80049ce:	f3bf 8f4f 	dsb	sy
 80049d2:	f3bf 8f6f 	isb	sy
 80049d6:	df00      	svc	0
 80049d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80049da:	bf00      	nop
 80049dc:	e000ed08 	.word	0xe000ed08

080049e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b086      	sub	sp, #24
 80049e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80049e6:	4b44      	ldr	r3, [pc, #272]	; (8004af8 <xPortStartScheduler+0x118>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4a44      	ldr	r2, [pc, #272]	; (8004afc <xPortStartScheduler+0x11c>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d109      	bne.n	8004a04 <xPortStartScheduler+0x24>
 80049f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049f4:	f383 8811 	msr	BASEPRI, r3
 80049f8:	f3bf 8f6f 	isb	sy
 80049fc:	f3bf 8f4f 	dsb	sy
 8004a00:	613b      	str	r3, [r7, #16]
 8004a02:	e7fe      	b.n	8004a02 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004a04:	4b3c      	ldr	r3, [pc, #240]	; (8004af8 <xPortStartScheduler+0x118>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4a3d      	ldr	r2, [pc, #244]	; (8004b00 <xPortStartScheduler+0x120>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d109      	bne.n	8004a22 <xPortStartScheduler+0x42>
 8004a0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a12:	f383 8811 	msr	BASEPRI, r3
 8004a16:	f3bf 8f6f 	isb	sy
 8004a1a:	f3bf 8f4f 	dsb	sy
 8004a1e:	60fb      	str	r3, [r7, #12]
 8004a20:	e7fe      	b.n	8004a20 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004a22:	4b38      	ldr	r3, [pc, #224]	; (8004b04 <xPortStartScheduler+0x124>)
 8004a24:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004a26:	697b      	ldr	r3, [r7, #20]
 8004a28:	781b      	ldrb	r3, [r3, #0]
 8004a2a:	b2db      	uxtb	r3, r3
 8004a2c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004a2e:	697b      	ldr	r3, [r7, #20]
 8004a30:	22ff      	movs	r2, #255	; 0xff
 8004a32:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004a34:	697b      	ldr	r3, [r7, #20]
 8004a36:	781b      	ldrb	r3, [r3, #0]
 8004a38:	b2db      	uxtb	r3, r3
 8004a3a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004a3c:	78fb      	ldrb	r3, [r7, #3]
 8004a3e:	b2db      	uxtb	r3, r3
 8004a40:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004a44:	b2da      	uxtb	r2, r3
 8004a46:	4b30      	ldr	r3, [pc, #192]	; (8004b08 <xPortStartScheduler+0x128>)
 8004a48:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004a4a:	4b30      	ldr	r3, [pc, #192]	; (8004b0c <xPortStartScheduler+0x12c>)
 8004a4c:	2207      	movs	r2, #7
 8004a4e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004a50:	e009      	b.n	8004a66 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8004a52:	4b2e      	ldr	r3, [pc, #184]	; (8004b0c <xPortStartScheduler+0x12c>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	3b01      	subs	r3, #1
 8004a58:	4a2c      	ldr	r2, [pc, #176]	; (8004b0c <xPortStartScheduler+0x12c>)
 8004a5a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004a5c:	78fb      	ldrb	r3, [r7, #3]
 8004a5e:	b2db      	uxtb	r3, r3
 8004a60:	005b      	lsls	r3, r3, #1
 8004a62:	b2db      	uxtb	r3, r3
 8004a64:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004a66:	78fb      	ldrb	r3, [r7, #3]
 8004a68:	b2db      	uxtb	r3, r3
 8004a6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a6e:	2b80      	cmp	r3, #128	; 0x80
 8004a70:	d0ef      	beq.n	8004a52 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004a72:	4b26      	ldr	r3, [pc, #152]	; (8004b0c <xPortStartScheduler+0x12c>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f1c3 0307 	rsb	r3, r3, #7
 8004a7a:	2b04      	cmp	r3, #4
 8004a7c:	d009      	beq.n	8004a92 <xPortStartScheduler+0xb2>
 8004a7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a82:	f383 8811 	msr	BASEPRI, r3
 8004a86:	f3bf 8f6f 	isb	sy
 8004a8a:	f3bf 8f4f 	dsb	sy
 8004a8e:	60bb      	str	r3, [r7, #8]
 8004a90:	e7fe      	b.n	8004a90 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004a92:	4b1e      	ldr	r3, [pc, #120]	; (8004b0c <xPortStartScheduler+0x12c>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	021b      	lsls	r3, r3, #8
 8004a98:	4a1c      	ldr	r2, [pc, #112]	; (8004b0c <xPortStartScheduler+0x12c>)
 8004a9a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004a9c:	4b1b      	ldr	r3, [pc, #108]	; (8004b0c <xPortStartScheduler+0x12c>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004aa4:	4a19      	ldr	r2, [pc, #100]	; (8004b0c <xPortStartScheduler+0x12c>)
 8004aa6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	b2da      	uxtb	r2, r3
 8004aac:	697b      	ldr	r3, [r7, #20]
 8004aae:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004ab0:	4b17      	ldr	r3, [pc, #92]	; (8004b10 <xPortStartScheduler+0x130>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	4a16      	ldr	r2, [pc, #88]	; (8004b10 <xPortStartScheduler+0x130>)
 8004ab6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004aba:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004abc:	4b14      	ldr	r3, [pc, #80]	; (8004b10 <xPortStartScheduler+0x130>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a13      	ldr	r2, [pc, #76]	; (8004b10 <xPortStartScheduler+0x130>)
 8004ac2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004ac6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004ac8:	f000 f8d6 	bl	8004c78 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004acc:	4b11      	ldr	r3, [pc, #68]	; (8004b14 <xPortStartScheduler+0x134>)
 8004ace:	2200      	movs	r2, #0
 8004ad0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004ad2:	f000 f8f5 	bl	8004cc0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004ad6:	4b10      	ldr	r3, [pc, #64]	; (8004b18 <xPortStartScheduler+0x138>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4a0f      	ldr	r2, [pc, #60]	; (8004b18 <xPortStartScheduler+0x138>)
 8004adc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004ae0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004ae2:	f7ff ff69 	bl	80049b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004ae6:	f7ff fd45 	bl	8004574 <vTaskSwitchContext>
	prvTaskExitError();
 8004aea:	f7ff ff27 	bl	800493c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004aee:	2300      	movs	r3, #0
}
 8004af0:	4618      	mov	r0, r3
 8004af2:	3718      	adds	r7, #24
 8004af4:	46bd      	mov	sp, r7
 8004af6:	bd80      	pop	{r7, pc}
 8004af8:	e000ed00 	.word	0xe000ed00
 8004afc:	410fc271 	.word	0x410fc271
 8004b00:	410fc270 	.word	0x410fc270
 8004b04:	e000e400 	.word	0xe000e400
 8004b08:	2000041c 	.word	0x2000041c
 8004b0c:	20000420 	.word	0x20000420
 8004b10:	e000ed20 	.word	0xe000ed20
 8004b14:	2000000c 	.word	0x2000000c
 8004b18:	e000ef34 	.word	0xe000ef34

08004b1c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	b083      	sub	sp, #12
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b26:	f383 8811 	msr	BASEPRI, r3
 8004b2a:	f3bf 8f6f 	isb	sy
 8004b2e:	f3bf 8f4f 	dsb	sy
 8004b32:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004b34:	4b0e      	ldr	r3, [pc, #56]	; (8004b70 <vPortEnterCritical+0x54>)
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	3301      	adds	r3, #1
 8004b3a:	4a0d      	ldr	r2, [pc, #52]	; (8004b70 <vPortEnterCritical+0x54>)
 8004b3c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004b3e:	4b0c      	ldr	r3, [pc, #48]	; (8004b70 <vPortEnterCritical+0x54>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	2b01      	cmp	r3, #1
 8004b44:	d10e      	bne.n	8004b64 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004b46:	4b0b      	ldr	r3, [pc, #44]	; (8004b74 <vPortEnterCritical+0x58>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	b2db      	uxtb	r3, r3
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d009      	beq.n	8004b64 <vPortEnterCritical+0x48>
 8004b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b54:	f383 8811 	msr	BASEPRI, r3
 8004b58:	f3bf 8f6f 	isb	sy
 8004b5c:	f3bf 8f4f 	dsb	sy
 8004b60:	603b      	str	r3, [r7, #0]
 8004b62:	e7fe      	b.n	8004b62 <vPortEnterCritical+0x46>
	}
}
 8004b64:	bf00      	nop
 8004b66:	370c      	adds	r7, #12
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6e:	4770      	bx	lr
 8004b70:	2000000c 	.word	0x2000000c
 8004b74:	e000ed04 	.word	0xe000ed04

08004b78 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004b78:	b480      	push	{r7}
 8004b7a:	b083      	sub	sp, #12
 8004b7c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004b7e:	4b11      	ldr	r3, [pc, #68]	; (8004bc4 <vPortExitCritical+0x4c>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d109      	bne.n	8004b9a <vPortExitCritical+0x22>
 8004b86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b8a:	f383 8811 	msr	BASEPRI, r3
 8004b8e:	f3bf 8f6f 	isb	sy
 8004b92:	f3bf 8f4f 	dsb	sy
 8004b96:	607b      	str	r3, [r7, #4]
 8004b98:	e7fe      	b.n	8004b98 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8004b9a:	4b0a      	ldr	r3, [pc, #40]	; (8004bc4 <vPortExitCritical+0x4c>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	3b01      	subs	r3, #1
 8004ba0:	4a08      	ldr	r2, [pc, #32]	; (8004bc4 <vPortExitCritical+0x4c>)
 8004ba2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004ba4:	4b07      	ldr	r3, [pc, #28]	; (8004bc4 <vPortExitCritical+0x4c>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d104      	bne.n	8004bb6 <vPortExitCritical+0x3e>
 8004bac:	2300      	movs	r3, #0
 8004bae:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8004bb6:	bf00      	nop
 8004bb8:	370c      	adds	r7, #12
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc0:	4770      	bx	lr
 8004bc2:	bf00      	nop
 8004bc4:	2000000c 	.word	0x2000000c
	...

08004bd0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004bd0:	f3ef 8009 	mrs	r0, PSP
 8004bd4:	f3bf 8f6f 	isb	sy
 8004bd8:	4b15      	ldr	r3, [pc, #84]	; (8004c30 <pxCurrentTCBConst>)
 8004bda:	681a      	ldr	r2, [r3, #0]
 8004bdc:	f01e 0f10 	tst.w	lr, #16
 8004be0:	bf08      	it	eq
 8004be2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004be6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bea:	6010      	str	r0, [r2, #0]
 8004bec:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004bf0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004bf4:	f380 8811 	msr	BASEPRI, r0
 8004bf8:	f3bf 8f4f 	dsb	sy
 8004bfc:	f3bf 8f6f 	isb	sy
 8004c00:	f7ff fcb8 	bl	8004574 <vTaskSwitchContext>
 8004c04:	f04f 0000 	mov.w	r0, #0
 8004c08:	f380 8811 	msr	BASEPRI, r0
 8004c0c:	bc09      	pop	{r0, r3}
 8004c0e:	6819      	ldr	r1, [r3, #0]
 8004c10:	6808      	ldr	r0, [r1, #0]
 8004c12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c16:	f01e 0f10 	tst.w	lr, #16
 8004c1a:	bf08      	it	eq
 8004c1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004c20:	f380 8809 	msr	PSP, r0
 8004c24:	f3bf 8f6f 	isb	sy
 8004c28:	4770      	bx	lr
 8004c2a:	bf00      	nop
 8004c2c:	f3af 8000 	nop.w

08004c30 <pxCurrentTCBConst>:
 8004c30:	200002f0 	.word	0x200002f0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004c34:	bf00      	nop
 8004c36:	bf00      	nop

08004c38 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b082      	sub	sp, #8
 8004c3c:	af00      	add	r7, sp, #0
	__asm volatile
 8004c3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c42:	f383 8811 	msr	BASEPRI, r3
 8004c46:	f3bf 8f6f 	isb	sy
 8004c4a:	f3bf 8f4f 	dsb	sy
 8004c4e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004c50:	f7ff fbd8 	bl	8004404 <xTaskIncrementTick>
 8004c54:	4603      	mov	r3, r0
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d003      	beq.n	8004c62 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004c5a:	4b06      	ldr	r3, [pc, #24]	; (8004c74 <xPortSysTickHandler+0x3c>)
 8004c5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c60:	601a      	str	r2, [r3, #0]
 8004c62:	2300      	movs	r3, #0
 8004c64:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8004c6c:	bf00      	nop
 8004c6e:	3708      	adds	r7, #8
 8004c70:	46bd      	mov	sp, r7
 8004c72:	bd80      	pop	{r7, pc}
 8004c74:	e000ed04 	.word	0xe000ed04

08004c78 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004c78:	b480      	push	{r7}
 8004c7a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004c7c:	4b0b      	ldr	r3, [pc, #44]	; (8004cac <vPortSetupTimerInterrupt+0x34>)
 8004c7e:	2200      	movs	r2, #0
 8004c80:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004c82:	4b0b      	ldr	r3, [pc, #44]	; (8004cb0 <vPortSetupTimerInterrupt+0x38>)
 8004c84:	2200      	movs	r2, #0
 8004c86:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004c88:	4b0a      	ldr	r3, [pc, #40]	; (8004cb4 <vPortSetupTimerInterrupt+0x3c>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4a0a      	ldr	r2, [pc, #40]	; (8004cb8 <vPortSetupTimerInterrupt+0x40>)
 8004c8e:	fba2 2303 	umull	r2, r3, r2, r3
 8004c92:	099b      	lsrs	r3, r3, #6
 8004c94:	4a09      	ldr	r2, [pc, #36]	; (8004cbc <vPortSetupTimerInterrupt+0x44>)
 8004c96:	3b01      	subs	r3, #1
 8004c98:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004c9a:	4b04      	ldr	r3, [pc, #16]	; (8004cac <vPortSetupTimerInterrupt+0x34>)
 8004c9c:	2207      	movs	r2, #7
 8004c9e:	601a      	str	r2, [r3, #0]
}
 8004ca0:	bf00      	nop
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca8:	4770      	bx	lr
 8004caa:	bf00      	nop
 8004cac:	e000e010 	.word	0xe000e010
 8004cb0:	e000e018 	.word	0xe000e018
 8004cb4:	20000000 	.word	0x20000000
 8004cb8:	10624dd3 	.word	0x10624dd3
 8004cbc:	e000e014 	.word	0xe000e014

08004cc0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004cc0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004cd0 <vPortEnableVFP+0x10>
 8004cc4:	6801      	ldr	r1, [r0, #0]
 8004cc6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004cca:	6001      	str	r1, [r0, #0]
 8004ccc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004cce:	bf00      	nop
 8004cd0:	e000ed88 	.word	0xe000ed88

08004cd4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b08a      	sub	sp, #40	; 0x28
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004cdc:	2300      	movs	r3, #0
 8004cde:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004ce0:	f7ff fae6 	bl	80042b0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004ce4:	4b57      	ldr	r3, [pc, #348]	; (8004e44 <pvPortMalloc+0x170>)
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d101      	bne.n	8004cf0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004cec:	f000 f90c 	bl	8004f08 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004cf0:	4b55      	ldr	r3, [pc, #340]	; (8004e48 <pvPortMalloc+0x174>)
 8004cf2:	681a      	ldr	r2, [r3, #0]
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	4013      	ands	r3, r2
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	f040 808c 	bne.w	8004e16 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d01c      	beq.n	8004d3e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8004d04:	2208      	movs	r2, #8
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	4413      	add	r3, r2
 8004d0a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	f003 0307 	and.w	r3, r3, #7
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d013      	beq.n	8004d3e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	f023 0307 	bic.w	r3, r3, #7
 8004d1c:	3308      	adds	r3, #8
 8004d1e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	f003 0307 	and.w	r3, r3, #7
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d009      	beq.n	8004d3e <pvPortMalloc+0x6a>
	__asm volatile
 8004d2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d2e:	f383 8811 	msr	BASEPRI, r3
 8004d32:	f3bf 8f6f 	isb	sy
 8004d36:	f3bf 8f4f 	dsb	sy
 8004d3a:	617b      	str	r3, [r7, #20]
 8004d3c:	e7fe      	b.n	8004d3c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d068      	beq.n	8004e16 <pvPortMalloc+0x142>
 8004d44:	4b41      	ldr	r3, [pc, #260]	; (8004e4c <pvPortMalloc+0x178>)
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	687a      	ldr	r2, [r7, #4]
 8004d4a:	429a      	cmp	r2, r3
 8004d4c:	d863      	bhi.n	8004e16 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004d4e:	4b40      	ldr	r3, [pc, #256]	; (8004e50 <pvPortMalloc+0x17c>)
 8004d50:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004d52:	4b3f      	ldr	r3, [pc, #252]	; (8004e50 <pvPortMalloc+0x17c>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004d58:	e004      	b.n	8004d64 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8004d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d5c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d66:	685b      	ldr	r3, [r3, #4]
 8004d68:	687a      	ldr	r2, [r7, #4]
 8004d6a:	429a      	cmp	r2, r3
 8004d6c:	d903      	bls.n	8004d76 <pvPortMalloc+0xa2>
 8004d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d1f1      	bne.n	8004d5a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004d76:	4b33      	ldr	r3, [pc, #204]	; (8004e44 <pvPortMalloc+0x170>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d7c:	429a      	cmp	r2, r3
 8004d7e:	d04a      	beq.n	8004e16 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004d80:	6a3b      	ldr	r3, [r7, #32]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	2208      	movs	r2, #8
 8004d86:	4413      	add	r3, r2
 8004d88:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d8c:	681a      	ldr	r2, [r3, #0]
 8004d8e:	6a3b      	ldr	r3, [r7, #32]
 8004d90:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d94:	685a      	ldr	r2, [r3, #4]
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	1ad2      	subs	r2, r2, r3
 8004d9a:	2308      	movs	r3, #8
 8004d9c:	005b      	lsls	r3, r3, #1
 8004d9e:	429a      	cmp	r2, r3
 8004da0:	d91e      	bls.n	8004de0 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004da2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	4413      	add	r3, r2
 8004da8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004daa:	69bb      	ldr	r3, [r7, #24]
 8004dac:	f003 0307 	and.w	r3, r3, #7
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d009      	beq.n	8004dc8 <pvPortMalloc+0xf4>
 8004db4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004db8:	f383 8811 	msr	BASEPRI, r3
 8004dbc:	f3bf 8f6f 	isb	sy
 8004dc0:	f3bf 8f4f 	dsb	sy
 8004dc4:	613b      	str	r3, [r7, #16]
 8004dc6:	e7fe      	b.n	8004dc6 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dca:	685a      	ldr	r2, [r3, #4]
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	1ad2      	subs	r2, r2, r3
 8004dd0:	69bb      	ldr	r3, [r7, #24]
 8004dd2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dd6:	687a      	ldr	r2, [r7, #4]
 8004dd8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004dda:	69b8      	ldr	r0, [r7, #24]
 8004ddc:	f000 f8f6 	bl	8004fcc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004de0:	4b1a      	ldr	r3, [pc, #104]	; (8004e4c <pvPortMalloc+0x178>)
 8004de2:	681a      	ldr	r2, [r3, #0]
 8004de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de6:	685b      	ldr	r3, [r3, #4]
 8004de8:	1ad3      	subs	r3, r2, r3
 8004dea:	4a18      	ldr	r2, [pc, #96]	; (8004e4c <pvPortMalloc+0x178>)
 8004dec:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004dee:	4b17      	ldr	r3, [pc, #92]	; (8004e4c <pvPortMalloc+0x178>)
 8004df0:	681a      	ldr	r2, [r3, #0]
 8004df2:	4b18      	ldr	r3, [pc, #96]	; (8004e54 <pvPortMalloc+0x180>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	429a      	cmp	r2, r3
 8004df8:	d203      	bcs.n	8004e02 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004dfa:	4b14      	ldr	r3, [pc, #80]	; (8004e4c <pvPortMalloc+0x178>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	4a15      	ldr	r2, [pc, #84]	; (8004e54 <pvPortMalloc+0x180>)
 8004e00:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e04:	685a      	ldr	r2, [r3, #4]
 8004e06:	4b10      	ldr	r3, [pc, #64]	; (8004e48 <pvPortMalloc+0x174>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	431a      	orrs	r2, r3
 8004e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e0e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e12:	2200      	movs	r2, #0
 8004e14:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004e16:	f7ff fa59 	bl	80042cc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004e1a:	69fb      	ldr	r3, [r7, #28]
 8004e1c:	f003 0307 	and.w	r3, r3, #7
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d009      	beq.n	8004e38 <pvPortMalloc+0x164>
 8004e24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e28:	f383 8811 	msr	BASEPRI, r3
 8004e2c:	f3bf 8f6f 	isb	sy
 8004e30:	f3bf 8f4f 	dsb	sy
 8004e34:	60fb      	str	r3, [r7, #12]
 8004e36:	e7fe      	b.n	8004e36 <pvPortMalloc+0x162>
	return pvReturn;
 8004e38:	69fb      	ldr	r3, [r7, #28]
}
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	3728      	adds	r7, #40	; 0x28
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	bd80      	pop	{r7, pc}
 8004e42:	bf00      	nop
 8004e44:	2000402c 	.word	0x2000402c
 8004e48:	20004038 	.word	0x20004038
 8004e4c:	20004030 	.word	0x20004030
 8004e50:	20004024 	.word	0x20004024
 8004e54:	20004034 	.word	0x20004034

08004e58 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b086      	sub	sp, #24
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d046      	beq.n	8004ef8 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004e6a:	2308      	movs	r3, #8
 8004e6c:	425b      	negs	r3, r3
 8004e6e:	697a      	ldr	r2, [r7, #20]
 8004e70:	4413      	add	r3, r2
 8004e72:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004e74:	697b      	ldr	r3, [r7, #20]
 8004e76:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004e78:	693b      	ldr	r3, [r7, #16]
 8004e7a:	685a      	ldr	r2, [r3, #4]
 8004e7c:	4b20      	ldr	r3, [pc, #128]	; (8004f00 <vPortFree+0xa8>)
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	4013      	ands	r3, r2
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d109      	bne.n	8004e9a <vPortFree+0x42>
 8004e86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e8a:	f383 8811 	msr	BASEPRI, r3
 8004e8e:	f3bf 8f6f 	isb	sy
 8004e92:	f3bf 8f4f 	dsb	sy
 8004e96:	60fb      	str	r3, [r7, #12]
 8004e98:	e7fe      	b.n	8004e98 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004e9a:	693b      	ldr	r3, [r7, #16]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d009      	beq.n	8004eb6 <vPortFree+0x5e>
 8004ea2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ea6:	f383 8811 	msr	BASEPRI, r3
 8004eaa:	f3bf 8f6f 	isb	sy
 8004eae:	f3bf 8f4f 	dsb	sy
 8004eb2:	60bb      	str	r3, [r7, #8]
 8004eb4:	e7fe      	b.n	8004eb4 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004eb6:	693b      	ldr	r3, [r7, #16]
 8004eb8:	685a      	ldr	r2, [r3, #4]
 8004eba:	4b11      	ldr	r3, [pc, #68]	; (8004f00 <vPortFree+0xa8>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	4013      	ands	r3, r2
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d019      	beq.n	8004ef8 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004ec4:	693b      	ldr	r3, [r7, #16]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d115      	bne.n	8004ef8 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004ecc:	693b      	ldr	r3, [r7, #16]
 8004ece:	685a      	ldr	r2, [r3, #4]
 8004ed0:	4b0b      	ldr	r3, [pc, #44]	; (8004f00 <vPortFree+0xa8>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	43db      	mvns	r3, r3
 8004ed6:	401a      	ands	r2, r3
 8004ed8:	693b      	ldr	r3, [r7, #16]
 8004eda:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004edc:	f7ff f9e8 	bl	80042b0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004ee0:	693b      	ldr	r3, [r7, #16]
 8004ee2:	685a      	ldr	r2, [r3, #4]
 8004ee4:	4b07      	ldr	r3, [pc, #28]	; (8004f04 <vPortFree+0xac>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4413      	add	r3, r2
 8004eea:	4a06      	ldr	r2, [pc, #24]	; (8004f04 <vPortFree+0xac>)
 8004eec:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004eee:	6938      	ldr	r0, [r7, #16]
 8004ef0:	f000 f86c 	bl	8004fcc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004ef4:	f7ff f9ea 	bl	80042cc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004ef8:	bf00      	nop
 8004efa:	3718      	adds	r7, #24
 8004efc:	46bd      	mov	sp, r7
 8004efe:	bd80      	pop	{r7, pc}
 8004f00:	20004038 	.word	0x20004038
 8004f04:	20004030 	.word	0x20004030

08004f08 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004f08:	b480      	push	{r7}
 8004f0a:	b085      	sub	sp, #20
 8004f0c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004f0e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8004f12:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004f14:	4b27      	ldr	r3, [pc, #156]	; (8004fb4 <prvHeapInit+0xac>)
 8004f16:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	f003 0307 	and.w	r3, r3, #7
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d00c      	beq.n	8004f3c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	3307      	adds	r3, #7
 8004f26:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	f023 0307 	bic.w	r3, r3, #7
 8004f2e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004f30:	68ba      	ldr	r2, [r7, #8]
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	1ad3      	subs	r3, r2, r3
 8004f36:	4a1f      	ldr	r2, [pc, #124]	; (8004fb4 <prvHeapInit+0xac>)
 8004f38:	4413      	add	r3, r2
 8004f3a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004f40:	4a1d      	ldr	r2, [pc, #116]	; (8004fb8 <prvHeapInit+0xb0>)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004f46:	4b1c      	ldr	r3, [pc, #112]	; (8004fb8 <prvHeapInit+0xb0>)
 8004f48:	2200      	movs	r2, #0
 8004f4a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	68ba      	ldr	r2, [r7, #8]
 8004f50:	4413      	add	r3, r2
 8004f52:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004f54:	2208      	movs	r2, #8
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	1a9b      	subs	r3, r3, r2
 8004f5a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	f023 0307 	bic.w	r3, r3, #7
 8004f62:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	4a15      	ldr	r2, [pc, #84]	; (8004fbc <prvHeapInit+0xb4>)
 8004f68:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004f6a:	4b14      	ldr	r3, [pc, #80]	; (8004fbc <prvHeapInit+0xb4>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	2200      	movs	r2, #0
 8004f70:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004f72:	4b12      	ldr	r3, [pc, #72]	; (8004fbc <prvHeapInit+0xb4>)
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	2200      	movs	r2, #0
 8004f78:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	68fa      	ldr	r2, [r7, #12]
 8004f82:	1ad2      	subs	r2, r2, r3
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004f88:	4b0c      	ldr	r3, [pc, #48]	; (8004fbc <prvHeapInit+0xb4>)
 8004f8a:	681a      	ldr	r2, [r3, #0]
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	685b      	ldr	r3, [r3, #4]
 8004f94:	4a0a      	ldr	r2, [pc, #40]	; (8004fc0 <prvHeapInit+0xb8>)
 8004f96:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	685b      	ldr	r3, [r3, #4]
 8004f9c:	4a09      	ldr	r2, [pc, #36]	; (8004fc4 <prvHeapInit+0xbc>)
 8004f9e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004fa0:	4b09      	ldr	r3, [pc, #36]	; (8004fc8 <prvHeapInit+0xc0>)
 8004fa2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004fa6:	601a      	str	r2, [r3, #0]
}
 8004fa8:	bf00      	nop
 8004faa:	3714      	adds	r7, #20
 8004fac:	46bd      	mov	sp, r7
 8004fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb2:	4770      	bx	lr
 8004fb4:	20000424 	.word	0x20000424
 8004fb8:	20004024 	.word	0x20004024
 8004fbc:	2000402c 	.word	0x2000402c
 8004fc0:	20004034 	.word	0x20004034
 8004fc4:	20004030 	.word	0x20004030
 8004fc8:	20004038 	.word	0x20004038

08004fcc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004fcc:	b480      	push	{r7}
 8004fce:	b085      	sub	sp, #20
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004fd4:	4b28      	ldr	r3, [pc, #160]	; (8005078 <prvInsertBlockIntoFreeList+0xac>)
 8004fd6:	60fb      	str	r3, [r7, #12]
 8004fd8:	e002      	b.n	8004fe0 <prvInsertBlockIntoFreeList+0x14>
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	60fb      	str	r3, [r7, #12]
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	687a      	ldr	r2, [r7, #4]
 8004fe6:	429a      	cmp	r2, r3
 8004fe8:	d8f7      	bhi.n	8004fda <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	685b      	ldr	r3, [r3, #4]
 8004ff2:	68ba      	ldr	r2, [r7, #8]
 8004ff4:	4413      	add	r3, r2
 8004ff6:	687a      	ldr	r2, [r7, #4]
 8004ff8:	429a      	cmp	r2, r3
 8004ffa:	d108      	bne.n	800500e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	685a      	ldr	r2, [r3, #4]
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	685b      	ldr	r3, [r3, #4]
 8005004:	441a      	add	r2, r3
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	685b      	ldr	r3, [r3, #4]
 8005016:	68ba      	ldr	r2, [r7, #8]
 8005018:	441a      	add	r2, r3
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	429a      	cmp	r2, r3
 8005020:	d118      	bne.n	8005054 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681a      	ldr	r2, [r3, #0]
 8005026:	4b15      	ldr	r3, [pc, #84]	; (800507c <prvInsertBlockIntoFreeList+0xb0>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	429a      	cmp	r2, r3
 800502c:	d00d      	beq.n	800504a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	685a      	ldr	r2, [r3, #4]
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	685b      	ldr	r3, [r3, #4]
 8005038:	441a      	add	r2, r3
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	681a      	ldr	r2, [r3, #0]
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	601a      	str	r2, [r3, #0]
 8005048:	e008      	b.n	800505c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800504a:	4b0c      	ldr	r3, [pc, #48]	; (800507c <prvInsertBlockIntoFreeList+0xb0>)
 800504c:	681a      	ldr	r2, [r3, #0]
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	601a      	str	r2, [r3, #0]
 8005052:	e003      	b.n	800505c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681a      	ldr	r2, [r3, #0]
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800505c:	68fa      	ldr	r2, [r7, #12]
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	429a      	cmp	r2, r3
 8005062:	d002      	beq.n	800506a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	687a      	ldr	r2, [r7, #4]
 8005068:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800506a:	bf00      	nop
 800506c:	3714      	adds	r7, #20
 800506e:	46bd      	mov	sp, r7
 8005070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005074:	4770      	bx	lr
 8005076:	bf00      	nop
 8005078:	20004024 	.word	0x20004024
 800507c:	2000402c 	.word	0x2000402c

08005080 <__errno>:
 8005080:	4b01      	ldr	r3, [pc, #4]	; (8005088 <__errno+0x8>)
 8005082:	6818      	ldr	r0, [r3, #0]
 8005084:	4770      	bx	lr
 8005086:	bf00      	nop
 8005088:	20000010 	.word	0x20000010

0800508c <__libc_init_array>:
 800508c:	b570      	push	{r4, r5, r6, lr}
 800508e:	4e0d      	ldr	r6, [pc, #52]	; (80050c4 <__libc_init_array+0x38>)
 8005090:	4c0d      	ldr	r4, [pc, #52]	; (80050c8 <__libc_init_array+0x3c>)
 8005092:	1ba4      	subs	r4, r4, r6
 8005094:	10a4      	asrs	r4, r4, #2
 8005096:	2500      	movs	r5, #0
 8005098:	42a5      	cmp	r5, r4
 800509a:	d109      	bne.n	80050b0 <__libc_init_array+0x24>
 800509c:	4e0b      	ldr	r6, [pc, #44]	; (80050cc <__libc_init_array+0x40>)
 800509e:	4c0c      	ldr	r4, [pc, #48]	; (80050d0 <__libc_init_array+0x44>)
 80050a0:	f000 fc28 	bl	80058f4 <_init>
 80050a4:	1ba4      	subs	r4, r4, r6
 80050a6:	10a4      	asrs	r4, r4, #2
 80050a8:	2500      	movs	r5, #0
 80050aa:	42a5      	cmp	r5, r4
 80050ac:	d105      	bne.n	80050ba <__libc_init_array+0x2e>
 80050ae:	bd70      	pop	{r4, r5, r6, pc}
 80050b0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80050b4:	4798      	blx	r3
 80050b6:	3501      	adds	r5, #1
 80050b8:	e7ee      	b.n	8005098 <__libc_init_array+0xc>
 80050ba:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80050be:	4798      	blx	r3
 80050c0:	3501      	adds	r5, #1
 80050c2:	e7f2      	b.n	80050aa <__libc_init_array+0x1e>
 80050c4:	08005a08 	.word	0x08005a08
 80050c8:	08005a08 	.word	0x08005a08
 80050cc:	08005a08 	.word	0x08005a08
 80050d0:	08005a0c 	.word	0x08005a0c

080050d4 <memcpy>:
 80050d4:	b510      	push	{r4, lr}
 80050d6:	1e43      	subs	r3, r0, #1
 80050d8:	440a      	add	r2, r1
 80050da:	4291      	cmp	r1, r2
 80050dc:	d100      	bne.n	80050e0 <memcpy+0xc>
 80050de:	bd10      	pop	{r4, pc}
 80050e0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80050e4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80050e8:	e7f7      	b.n	80050da <memcpy+0x6>

080050ea <memset>:
 80050ea:	4402      	add	r2, r0
 80050ec:	4603      	mov	r3, r0
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d100      	bne.n	80050f4 <memset+0xa>
 80050f2:	4770      	bx	lr
 80050f4:	f803 1b01 	strb.w	r1, [r3], #1
 80050f8:	e7f9      	b.n	80050ee <memset+0x4>
	...

080050fc <siprintf>:
 80050fc:	b40e      	push	{r1, r2, r3}
 80050fe:	b500      	push	{lr}
 8005100:	b09c      	sub	sp, #112	; 0x70
 8005102:	ab1d      	add	r3, sp, #116	; 0x74
 8005104:	9002      	str	r0, [sp, #8]
 8005106:	9006      	str	r0, [sp, #24]
 8005108:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800510c:	4809      	ldr	r0, [pc, #36]	; (8005134 <siprintf+0x38>)
 800510e:	9107      	str	r1, [sp, #28]
 8005110:	9104      	str	r1, [sp, #16]
 8005112:	4909      	ldr	r1, [pc, #36]	; (8005138 <siprintf+0x3c>)
 8005114:	f853 2b04 	ldr.w	r2, [r3], #4
 8005118:	9105      	str	r1, [sp, #20]
 800511a:	6800      	ldr	r0, [r0, #0]
 800511c:	9301      	str	r3, [sp, #4]
 800511e:	a902      	add	r1, sp, #8
 8005120:	f000 f866 	bl	80051f0 <_svfiprintf_r>
 8005124:	9b02      	ldr	r3, [sp, #8]
 8005126:	2200      	movs	r2, #0
 8005128:	701a      	strb	r2, [r3, #0]
 800512a:	b01c      	add	sp, #112	; 0x70
 800512c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005130:	b003      	add	sp, #12
 8005132:	4770      	bx	lr
 8005134:	20000010 	.word	0x20000010
 8005138:	ffff0208 	.word	0xffff0208

0800513c <__ssputs_r>:
 800513c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005140:	688e      	ldr	r6, [r1, #8]
 8005142:	429e      	cmp	r6, r3
 8005144:	4682      	mov	sl, r0
 8005146:	460c      	mov	r4, r1
 8005148:	4690      	mov	r8, r2
 800514a:	4699      	mov	r9, r3
 800514c:	d837      	bhi.n	80051be <__ssputs_r+0x82>
 800514e:	898a      	ldrh	r2, [r1, #12]
 8005150:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005154:	d031      	beq.n	80051ba <__ssputs_r+0x7e>
 8005156:	6825      	ldr	r5, [r4, #0]
 8005158:	6909      	ldr	r1, [r1, #16]
 800515a:	1a6f      	subs	r7, r5, r1
 800515c:	6965      	ldr	r5, [r4, #20]
 800515e:	2302      	movs	r3, #2
 8005160:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005164:	fb95 f5f3 	sdiv	r5, r5, r3
 8005168:	f109 0301 	add.w	r3, r9, #1
 800516c:	443b      	add	r3, r7
 800516e:	429d      	cmp	r5, r3
 8005170:	bf38      	it	cc
 8005172:	461d      	movcc	r5, r3
 8005174:	0553      	lsls	r3, r2, #21
 8005176:	d530      	bpl.n	80051da <__ssputs_r+0x9e>
 8005178:	4629      	mov	r1, r5
 800517a:	f000 fb21 	bl	80057c0 <_malloc_r>
 800517e:	4606      	mov	r6, r0
 8005180:	b950      	cbnz	r0, 8005198 <__ssputs_r+0x5c>
 8005182:	230c      	movs	r3, #12
 8005184:	f8ca 3000 	str.w	r3, [sl]
 8005188:	89a3      	ldrh	r3, [r4, #12]
 800518a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800518e:	81a3      	strh	r3, [r4, #12]
 8005190:	f04f 30ff 	mov.w	r0, #4294967295
 8005194:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005198:	463a      	mov	r2, r7
 800519a:	6921      	ldr	r1, [r4, #16]
 800519c:	f7ff ff9a 	bl	80050d4 <memcpy>
 80051a0:	89a3      	ldrh	r3, [r4, #12]
 80051a2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80051a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051aa:	81a3      	strh	r3, [r4, #12]
 80051ac:	6126      	str	r6, [r4, #16]
 80051ae:	6165      	str	r5, [r4, #20]
 80051b0:	443e      	add	r6, r7
 80051b2:	1bed      	subs	r5, r5, r7
 80051b4:	6026      	str	r6, [r4, #0]
 80051b6:	60a5      	str	r5, [r4, #8]
 80051b8:	464e      	mov	r6, r9
 80051ba:	454e      	cmp	r6, r9
 80051bc:	d900      	bls.n	80051c0 <__ssputs_r+0x84>
 80051be:	464e      	mov	r6, r9
 80051c0:	4632      	mov	r2, r6
 80051c2:	4641      	mov	r1, r8
 80051c4:	6820      	ldr	r0, [r4, #0]
 80051c6:	f000 fa93 	bl	80056f0 <memmove>
 80051ca:	68a3      	ldr	r3, [r4, #8]
 80051cc:	1b9b      	subs	r3, r3, r6
 80051ce:	60a3      	str	r3, [r4, #8]
 80051d0:	6823      	ldr	r3, [r4, #0]
 80051d2:	441e      	add	r6, r3
 80051d4:	6026      	str	r6, [r4, #0]
 80051d6:	2000      	movs	r0, #0
 80051d8:	e7dc      	b.n	8005194 <__ssputs_r+0x58>
 80051da:	462a      	mov	r2, r5
 80051dc:	f000 fb4a 	bl	8005874 <_realloc_r>
 80051e0:	4606      	mov	r6, r0
 80051e2:	2800      	cmp	r0, #0
 80051e4:	d1e2      	bne.n	80051ac <__ssputs_r+0x70>
 80051e6:	6921      	ldr	r1, [r4, #16]
 80051e8:	4650      	mov	r0, sl
 80051ea:	f000 fa9b 	bl	8005724 <_free_r>
 80051ee:	e7c8      	b.n	8005182 <__ssputs_r+0x46>

080051f0 <_svfiprintf_r>:
 80051f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051f4:	461d      	mov	r5, r3
 80051f6:	898b      	ldrh	r3, [r1, #12]
 80051f8:	061f      	lsls	r7, r3, #24
 80051fa:	b09d      	sub	sp, #116	; 0x74
 80051fc:	4680      	mov	r8, r0
 80051fe:	460c      	mov	r4, r1
 8005200:	4616      	mov	r6, r2
 8005202:	d50f      	bpl.n	8005224 <_svfiprintf_r+0x34>
 8005204:	690b      	ldr	r3, [r1, #16]
 8005206:	b96b      	cbnz	r3, 8005224 <_svfiprintf_r+0x34>
 8005208:	2140      	movs	r1, #64	; 0x40
 800520a:	f000 fad9 	bl	80057c0 <_malloc_r>
 800520e:	6020      	str	r0, [r4, #0]
 8005210:	6120      	str	r0, [r4, #16]
 8005212:	b928      	cbnz	r0, 8005220 <_svfiprintf_r+0x30>
 8005214:	230c      	movs	r3, #12
 8005216:	f8c8 3000 	str.w	r3, [r8]
 800521a:	f04f 30ff 	mov.w	r0, #4294967295
 800521e:	e0c8      	b.n	80053b2 <_svfiprintf_r+0x1c2>
 8005220:	2340      	movs	r3, #64	; 0x40
 8005222:	6163      	str	r3, [r4, #20]
 8005224:	2300      	movs	r3, #0
 8005226:	9309      	str	r3, [sp, #36]	; 0x24
 8005228:	2320      	movs	r3, #32
 800522a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800522e:	2330      	movs	r3, #48	; 0x30
 8005230:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005234:	9503      	str	r5, [sp, #12]
 8005236:	f04f 0b01 	mov.w	fp, #1
 800523a:	4637      	mov	r7, r6
 800523c:	463d      	mov	r5, r7
 800523e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005242:	b10b      	cbz	r3, 8005248 <_svfiprintf_r+0x58>
 8005244:	2b25      	cmp	r3, #37	; 0x25
 8005246:	d13e      	bne.n	80052c6 <_svfiprintf_r+0xd6>
 8005248:	ebb7 0a06 	subs.w	sl, r7, r6
 800524c:	d00b      	beq.n	8005266 <_svfiprintf_r+0x76>
 800524e:	4653      	mov	r3, sl
 8005250:	4632      	mov	r2, r6
 8005252:	4621      	mov	r1, r4
 8005254:	4640      	mov	r0, r8
 8005256:	f7ff ff71 	bl	800513c <__ssputs_r>
 800525a:	3001      	adds	r0, #1
 800525c:	f000 80a4 	beq.w	80053a8 <_svfiprintf_r+0x1b8>
 8005260:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005262:	4453      	add	r3, sl
 8005264:	9309      	str	r3, [sp, #36]	; 0x24
 8005266:	783b      	ldrb	r3, [r7, #0]
 8005268:	2b00      	cmp	r3, #0
 800526a:	f000 809d 	beq.w	80053a8 <_svfiprintf_r+0x1b8>
 800526e:	2300      	movs	r3, #0
 8005270:	f04f 32ff 	mov.w	r2, #4294967295
 8005274:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005278:	9304      	str	r3, [sp, #16]
 800527a:	9307      	str	r3, [sp, #28]
 800527c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005280:	931a      	str	r3, [sp, #104]	; 0x68
 8005282:	462f      	mov	r7, r5
 8005284:	2205      	movs	r2, #5
 8005286:	f817 1b01 	ldrb.w	r1, [r7], #1
 800528a:	4850      	ldr	r0, [pc, #320]	; (80053cc <_svfiprintf_r+0x1dc>)
 800528c:	f7fa ffa8 	bl	80001e0 <memchr>
 8005290:	9b04      	ldr	r3, [sp, #16]
 8005292:	b9d0      	cbnz	r0, 80052ca <_svfiprintf_r+0xda>
 8005294:	06d9      	lsls	r1, r3, #27
 8005296:	bf44      	itt	mi
 8005298:	2220      	movmi	r2, #32
 800529a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800529e:	071a      	lsls	r2, r3, #28
 80052a0:	bf44      	itt	mi
 80052a2:	222b      	movmi	r2, #43	; 0x2b
 80052a4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80052a8:	782a      	ldrb	r2, [r5, #0]
 80052aa:	2a2a      	cmp	r2, #42	; 0x2a
 80052ac:	d015      	beq.n	80052da <_svfiprintf_r+0xea>
 80052ae:	9a07      	ldr	r2, [sp, #28]
 80052b0:	462f      	mov	r7, r5
 80052b2:	2000      	movs	r0, #0
 80052b4:	250a      	movs	r5, #10
 80052b6:	4639      	mov	r1, r7
 80052b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80052bc:	3b30      	subs	r3, #48	; 0x30
 80052be:	2b09      	cmp	r3, #9
 80052c0:	d94d      	bls.n	800535e <_svfiprintf_r+0x16e>
 80052c2:	b1b8      	cbz	r0, 80052f4 <_svfiprintf_r+0x104>
 80052c4:	e00f      	b.n	80052e6 <_svfiprintf_r+0xf6>
 80052c6:	462f      	mov	r7, r5
 80052c8:	e7b8      	b.n	800523c <_svfiprintf_r+0x4c>
 80052ca:	4a40      	ldr	r2, [pc, #256]	; (80053cc <_svfiprintf_r+0x1dc>)
 80052cc:	1a80      	subs	r0, r0, r2
 80052ce:	fa0b f000 	lsl.w	r0, fp, r0
 80052d2:	4318      	orrs	r0, r3
 80052d4:	9004      	str	r0, [sp, #16]
 80052d6:	463d      	mov	r5, r7
 80052d8:	e7d3      	b.n	8005282 <_svfiprintf_r+0x92>
 80052da:	9a03      	ldr	r2, [sp, #12]
 80052dc:	1d11      	adds	r1, r2, #4
 80052de:	6812      	ldr	r2, [r2, #0]
 80052e0:	9103      	str	r1, [sp, #12]
 80052e2:	2a00      	cmp	r2, #0
 80052e4:	db01      	blt.n	80052ea <_svfiprintf_r+0xfa>
 80052e6:	9207      	str	r2, [sp, #28]
 80052e8:	e004      	b.n	80052f4 <_svfiprintf_r+0x104>
 80052ea:	4252      	negs	r2, r2
 80052ec:	f043 0302 	orr.w	r3, r3, #2
 80052f0:	9207      	str	r2, [sp, #28]
 80052f2:	9304      	str	r3, [sp, #16]
 80052f4:	783b      	ldrb	r3, [r7, #0]
 80052f6:	2b2e      	cmp	r3, #46	; 0x2e
 80052f8:	d10c      	bne.n	8005314 <_svfiprintf_r+0x124>
 80052fa:	787b      	ldrb	r3, [r7, #1]
 80052fc:	2b2a      	cmp	r3, #42	; 0x2a
 80052fe:	d133      	bne.n	8005368 <_svfiprintf_r+0x178>
 8005300:	9b03      	ldr	r3, [sp, #12]
 8005302:	1d1a      	adds	r2, r3, #4
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	9203      	str	r2, [sp, #12]
 8005308:	2b00      	cmp	r3, #0
 800530a:	bfb8      	it	lt
 800530c:	f04f 33ff 	movlt.w	r3, #4294967295
 8005310:	3702      	adds	r7, #2
 8005312:	9305      	str	r3, [sp, #20]
 8005314:	4d2e      	ldr	r5, [pc, #184]	; (80053d0 <_svfiprintf_r+0x1e0>)
 8005316:	7839      	ldrb	r1, [r7, #0]
 8005318:	2203      	movs	r2, #3
 800531a:	4628      	mov	r0, r5
 800531c:	f7fa ff60 	bl	80001e0 <memchr>
 8005320:	b138      	cbz	r0, 8005332 <_svfiprintf_r+0x142>
 8005322:	2340      	movs	r3, #64	; 0x40
 8005324:	1b40      	subs	r0, r0, r5
 8005326:	fa03 f000 	lsl.w	r0, r3, r0
 800532a:	9b04      	ldr	r3, [sp, #16]
 800532c:	4303      	orrs	r3, r0
 800532e:	3701      	adds	r7, #1
 8005330:	9304      	str	r3, [sp, #16]
 8005332:	7839      	ldrb	r1, [r7, #0]
 8005334:	4827      	ldr	r0, [pc, #156]	; (80053d4 <_svfiprintf_r+0x1e4>)
 8005336:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800533a:	2206      	movs	r2, #6
 800533c:	1c7e      	adds	r6, r7, #1
 800533e:	f7fa ff4f 	bl	80001e0 <memchr>
 8005342:	2800      	cmp	r0, #0
 8005344:	d038      	beq.n	80053b8 <_svfiprintf_r+0x1c8>
 8005346:	4b24      	ldr	r3, [pc, #144]	; (80053d8 <_svfiprintf_r+0x1e8>)
 8005348:	bb13      	cbnz	r3, 8005390 <_svfiprintf_r+0x1a0>
 800534a:	9b03      	ldr	r3, [sp, #12]
 800534c:	3307      	adds	r3, #7
 800534e:	f023 0307 	bic.w	r3, r3, #7
 8005352:	3308      	adds	r3, #8
 8005354:	9303      	str	r3, [sp, #12]
 8005356:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005358:	444b      	add	r3, r9
 800535a:	9309      	str	r3, [sp, #36]	; 0x24
 800535c:	e76d      	b.n	800523a <_svfiprintf_r+0x4a>
 800535e:	fb05 3202 	mla	r2, r5, r2, r3
 8005362:	2001      	movs	r0, #1
 8005364:	460f      	mov	r7, r1
 8005366:	e7a6      	b.n	80052b6 <_svfiprintf_r+0xc6>
 8005368:	2300      	movs	r3, #0
 800536a:	3701      	adds	r7, #1
 800536c:	9305      	str	r3, [sp, #20]
 800536e:	4619      	mov	r1, r3
 8005370:	250a      	movs	r5, #10
 8005372:	4638      	mov	r0, r7
 8005374:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005378:	3a30      	subs	r2, #48	; 0x30
 800537a:	2a09      	cmp	r2, #9
 800537c:	d903      	bls.n	8005386 <_svfiprintf_r+0x196>
 800537e:	2b00      	cmp	r3, #0
 8005380:	d0c8      	beq.n	8005314 <_svfiprintf_r+0x124>
 8005382:	9105      	str	r1, [sp, #20]
 8005384:	e7c6      	b.n	8005314 <_svfiprintf_r+0x124>
 8005386:	fb05 2101 	mla	r1, r5, r1, r2
 800538a:	2301      	movs	r3, #1
 800538c:	4607      	mov	r7, r0
 800538e:	e7f0      	b.n	8005372 <_svfiprintf_r+0x182>
 8005390:	ab03      	add	r3, sp, #12
 8005392:	9300      	str	r3, [sp, #0]
 8005394:	4622      	mov	r2, r4
 8005396:	4b11      	ldr	r3, [pc, #68]	; (80053dc <_svfiprintf_r+0x1ec>)
 8005398:	a904      	add	r1, sp, #16
 800539a:	4640      	mov	r0, r8
 800539c:	f3af 8000 	nop.w
 80053a0:	f1b0 3fff 	cmp.w	r0, #4294967295
 80053a4:	4681      	mov	r9, r0
 80053a6:	d1d6      	bne.n	8005356 <_svfiprintf_r+0x166>
 80053a8:	89a3      	ldrh	r3, [r4, #12]
 80053aa:	065b      	lsls	r3, r3, #25
 80053ac:	f53f af35 	bmi.w	800521a <_svfiprintf_r+0x2a>
 80053b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80053b2:	b01d      	add	sp, #116	; 0x74
 80053b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053b8:	ab03      	add	r3, sp, #12
 80053ba:	9300      	str	r3, [sp, #0]
 80053bc:	4622      	mov	r2, r4
 80053be:	4b07      	ldr	r3, [pc, #28]	; (80053dc <_svfiprintf_r+0x1ec>)
 80053c0:	a904      	add	r1, sp, #16
 80053c2:	4640      	mov	r0, r8
 80053c4:	f000 f882 	bl	80054cc <_printf_i>
 80053c8:	e7ea      	b.n	80053a0 <_svfiprintf_r+0x1b0>
 80053ca:	bf00      	nop
 80053cc:	080059cc 	.word	0x080059cc
 80053d0:	080059d2 	.word	0x080059d2
 80053d4:	080059d6 	.word	0x080059d6
 80053d8:	00000000 	.word	0x00000000
 80053dc:	0800513d 	.word	0x0800513d

080053e0 <_printf_common>:
 80053e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80053e4:	4691      	mov	r9, r2
 80053e6:	461f      	mov	r7, r3
 80053e8:	688a      	ldr	r2, [r1, #8]
 80053ea:	690b      	ldr	r3, [r1, #16]
 80053ec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80053f0:	4293      	cmp	r3, r2
 80053f2:	bfb8      	it	lt
 80053f4:	4613      	movlt	r3, r2
 80053f6:	f8c9 3000 	str.w	r3, [r9]
 80053fa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80053fe:	4606      	mov	r6, r0
 8005400:	460c      	mov	r4, r1
 8005402:	b112      	cbz	r2, 800540a <_printf_common+0x2a>
 8005404:	3301      	adds	r3, #1
 8005406:	f8c9 3000 	str.w	r3, [r9]
 800540a:	6823      	ldr	r3, [r4, #0]
 800540c:	0699      	lsls	r1, r3, #26
 800540e:	bf42      	ittt	mi
 8005410:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005414:	3302      	addmi	r3, #2
 8005416:	f8c9 3000 	strmi.w	r3, [r9]
 800541a:	6825      	ldr	r5, [r4, #0]
 800541c:	f015 0506 	ands.w	r5, r5, #6
 8005420:	d107      	bne.n	8005432 <_printf_common+0x52>
 8005422:	f104 0a19 	add.w	sl, r4, #25
 8005426:	68e3      	ldr	r3, [r4, #12]
 8005428:	f8d9 2000 	ldr.w	r2, [r9]
 800542c:	1a9b      	subs	r3, r3, r2
 800542e:	42ab      	cmp	r3, r5
 8005430:	dc28      	bgt.n	8005484 <_printf_common+0xa4>
 8005432:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005436:	6822      	ldr	r2, [r4, #0]
 8005438:	3300      	adds	r3, #0
 800543a:	bf18      	it	ne
 800543c:	2301      	movne	r3, #1
 800543e:	0692      	lsls	r2, r2, #26
 8005440:	d42d      	bmi.n	800549e <_printf_common+0xbe>
 8005442:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005446:	4639      	mov	r1, r7
 8005448:	4630      	mov	r0, r6
 800544a:	47c0      	blx	r8
 800544c:	3001      	adds	r0, #1
 800544e:	d020      	beq.n	8005492 <_printf_common+0xb2>
 8005450:	6823      	ldr	r3, [r4, #0]
 8005452:	68e5      	ldr	r5, [r4, #12]
 8005454:	f8d9 2000 	ldr.w	r2, [r9]
 8005458:	f003 0306 	and.w	r3, r3, #6
 800545c:	2b04      	cmp	r3, #4
 800545e:	bf08      	it	eq
 8005460:	1aad      	subeq	r5, r5, r2
 8005462:	68a3      	ldr	r3, [r4, #8]
 8005464:	6922      	ldr	r2, [r4, #16]
 8005466:	bf0c      	ite	eq
 8005468:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800546c:	2500      	movne	r5, #0
 800546e:	4293      	cmp	r3, r2
 8005470:	bfc4      	itt	gt
 8005472:	1a9b      	subgt	r3, r3, r2
 8005474:	18ed      	addgt	r5, r5, r3
 8005476:	f04f 0900 	mov.w	r9, #0
 800547a:	341a      	adds	r4, #26
 800547c:	454d      	cmp	r5, r9
 800547e:	d11a      	bne.n	80054b6 <_printf_common+0xd6>
 8005480:	2000      	movs	r0, #0
 8005482:	e008      	b.n	8005496 <_printf_common+0xb6>
 8005484:	2301      	movs	r3, #1
 8005486:	4652      	mov	r2, sl
 8005488:	4639      	mov	r1, r7
 800548a:	4630      	mov	r0, r6
 800548c:	47c0      	blx	r8
 800548e:	3001      	adds	r0, #1
 8005490:	d103      	bne.n	800549a <_printf_common+0xba>
 8005492:	f04f 30ff 	mov.w	r0, #4294967295
 8005496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800549a:	3501      	adds	r5, #1
 800549c:	e7c3      	b.n	8005426 <_printf_common+0x46>
 800549e:	18e1      	adds	r1, r4, r3
 80054a0:	1c5a      	adds	r2, r3, #1
 80054a2:	2030      	movs	r0, #48	; 0x30
 80054a4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80054a8:	4422      	add	r2, r4
 80054aa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80054ae:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80054b2:	3302      	adds	r3, #2
 80054b4:	e7c5      	b.n	8005442 <_printf_common+0x62>
 80054b6:	2301      	movs	r3, #1
 80054b8:	4622      	mov	r2, r4
 80054ba:	4639      	mov	r1, r7
 80054bc:	4630      	mov	r0, r6
 80054be:	47c0      	blx	r8
 80054c0:	3001      	adds	r0, #1
 80054c2:	d0e6      	beq.n	8005492 <_printf_common+0xb2>
 80054c4:	f109 0901 	add.w	r9, r9, #1
 80054c8:	e7d8      	b.n	800547c <_printf_common+0x9c>
	...

080054cc <_printf_i>:
 80054cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80054d0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80054d4:	460c      	mov	r4, r1
 80054d6:	7e09      	ldrb	r1, [r1, #24]
 80054d8:	b085      	sub	sp, #20
 80054da:	296e      	cmp	r1, #110	; 0x6e
 80054dc:	4617      	mov	r7, r2
 80054de:	4606      	mov	r6, r0
 80054e0:	4698      	mov	r8, r3
 80054e2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80054e4:	f000 80b3 	beq.w	800564e <_printf_i+0x182>
 80054e8:	d822      	bhi.n	8005530 <_printf_i+0x64>
 80054ea:	2963      	cmp	r1, #99	; 0x63
 80054ec:	d036      	beq.n	800555c <_printf_i+0x90>
 80054ee:	d80a      	bhi.n	8005506 <_printf_i+0x3a>
 80054f0:	2900      	cmp	r1, #0
 80054f2:	f000 80b9 	beq.w	8005668 <_printf_i+0x19c>
 80054f6:	2958      	cmp	r1, #88	; 0x58
 80054f8:	f000 8083 	beq.w	8005602 <_printf_i+0x136>
 80054fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005500:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005504:	e032      	b.n	800556c <_printf_i+0xa0>
 8005506:	2964      	cmp	r1, #100	; 0x64
 8005508:	d001      	beq.n	800550e <_printf_i+0x42>
 800550a:	2969      	cmp	r1, #105	; 0x69
 800550c:	d1f6      	bne.n	80054fc <_printf_i+0x30>
 800550e:	6820      	ldr	r0, [r4, #0]
 8005510:	6813      	ldr	r3, [r2, #0]
 8005512:	0605      	lsls	r5, r0, #24
 8005514:	f103 0104 	add.w	r1, r3, #4
 8005518:	d52a      	bpl.n	8005570 <_printf_i+0xa4>
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	6011      	str	r1, [r2, #0]
 800551e:	2b00      	cmp	r3, #0
 8005520:	da03      	bge.n	800552a <_printf_i+0x5e>
 8005522:	222d      	movs	r2, #45	; 0x2d
 8005524:	425b      	negs	r3, r3
 8005526:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800552a:	486f      	ldr	r0, [pc, #444]	; (80056e8 <_printf_i+0x21c>)
 800552c:	220a      	movs	r2, #10
 800552e:	e039      	b.n	80055a4 <_printf_i+0xd8>
 8005530:	2973      	cmp	r1, #115	; 0x73
 8005532:	f000 809d 	beq.w	8005670 <_printf_i+0x1a4>
 8005536:	d808      	bhi.n	800554a <_printf_i+0x7e>
 8005538:	296f      	cmp	r1, #111	; 0x6f
 800553a:	d020      	beq.n	800557e <_printf_i+0xb2>
 800553c:	2970      	cmp	r1, #112	; 0x70
 800553e:	d1dd      	bne.n	80054fc <_printf_i+0x30>
 8005540:	6823      	ldr	r3, [r4, #0]
 8005542:	f043 0320 	orr.w	r3, r3, #32
 8005546:	6023      	str	r3, [r4, #0]
 8005548:	e003      	b.n	8005552 <_printf_i+0x86>
 800554a:	2975      	cmp	r1, #117	; 0x75
 800554c:	d017      	beq.n	800557e <_printf_i+0xb2>
 800554e:	2978      	cmp	r1, #120	; 0x78
 8005550:	d1d4      	bne.n	80054fc <_printf_i+0x30>
 8005552:	2378      	movs	r3, #120	; 0x78
 8005554:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005558:	4864      	ldr	r0, [pc, #400]	; (80056ec <_printf_i+0x220>)
 800555a:	e055      	b.n	8005608 <_printf_i+0x13c>
 800555c:	6813      	ldr	r3, [r2, #0]
 800555e:	1d19      	adds	r1, r3, #4
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	6011      	str	r1, [r2, #0]
 8005564:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005568:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800556c:	2301      	movs	r3, #1
 800556e:	e08c      	b.n	800568a <_printf_i+0x1be>
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	6011      	str	r1, [r2, #0]
 8005574:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005578:	bf18      	it	ne
 800557a:	b21b      	sxthne	r3, r3
 800557c:	e7cf      	b.n	800551e <_printf_i+0x52>
 800557e:	6813      	ldr	r3, [r2, #0]
 8005580:	6825      	ldr	r5, [r4, #0]
 8005582:	1d18      	adds	r0, r3, #4
 8005584:	6010      	str	r0, [r2, #0]
 8005586:	0628      	lsls	r0, r5, #24
 8005588:	d501      	bpl.n	800558e <_printf_i+0xc2>
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	e002      	b.n	8005594 <_printf_i+0xc8>
 800558e:	0668      	lsls	r0, r5, #25
 8005590:	d5fb      	bpl.n	800558a <_printf_i+0xbe>
 8005592:	881b      	ldrh	r3, [r3, #0]
 8005594:	4854      	ldr	r0, [pc, #336]	; (80056e8 <_printf_i+0x21c>)
 8005596:	296f      	cmp	r1, #111	; 0x6f
 8005598:	bf14      	ite	ne
 800559a:	220a      	movne	r2, #10
 800559c:	2208      	moveq	r2, #8
 800559e:	2100      	movs	r1, #0
 80055a0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80055a4:	6865      	ldr	r5, [r4, #4]
 80055a6:	60a5      	str	r5, [r4, #8]
 80055a8:	2d00      	cmp	r5, #0
 80055aa:	f2c0 8095 	blt.w	80056d8 <_printf_i+0x20c>
 80055ae:	6821      	ldr	r1, [r4, #0]
 80055b0:	f021 0104 	bic.w	r1, r1, #4
 80055b4:	6021      	str	r1, [r4, #0]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d13d      	bne.n	8005636 <_printf_i+0x16a>
 80055ba:	2d00      	cmp	r5, #0
 80055bc:	f040 808e 	bne.w	80056dc <_printf_i+0x210>
 80055c0:	4665      	mov	r5, ip
 80055c2:	2a08      	cmp	r2, #8
 80055c4:	d10b      	bne.n	80055de <_printf_i+0x112>
 80055c6:	6823      	ldr	r3, [r4, #0]
 80055c8:	07db      	lsls	r3, r3, #31
 80055ca:	d508      	bpl.n	80055de <_printf_i+0x112>
 80055cc:	6923      	ldr	r3, [r4, #16]
 80055ce:	6862      	ldr	r2, [r4, #4]
 80055d0:	429a      	cmp	r2, r3
 80055d2:	bfde      	ittt	le
 80055d4:	2330      	movle	r3, #48	; 0x30
 80055d6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80055da:	f105 35ff 	addle.w	r5, r5, #4294967295
 80055de:	ebac 0305 	sub.w	r3, ip, r5
 80055e2:	6123      	str	r3, [r4, #16]
 80055e4:	f8cd 8000 	str.w	r8, [sp]
 80055e8:	463b      	mov	r3, r7
 80055ea:	aa03      	add	r2, sp, #12
 80055ec:	4621      	mov	r1, r4
 80055ee:	4630      	mov	r0, r6
 80055f0:	f7ff fef6 	bl	80053e0 <_printf_common>
 80055f4:	3001      	adds	r0, #1
 80055f6:	d14d      	bne.n	8005694 <_printf_i+0x1c8>
 80055f8:	f04f 30ff 	mov.w	r0, #4294967295
 80055fc:	b005      	add	sp, #20
 80055fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005602:	4839      	ldr	r0, [pc, #228]	; (80056e8 <_printf_i+0x21c>)
 8005604:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005608:	6813      	ldr	r3, [r2, #0]
 800560a:	6821      	ldr	r1, [r4, #0]
 800560c:	1d1d      	adds	r5, r3, #4
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	6015      	str	r5, [r2, #0]
 8005612:	060a      	lsls	r2, r1, #24
 8005614:	d50b      	bpl.n	800562e <_printf_i+0x162>
 8005616:	07ca      	lsls	r2, r1, #31
 8005618:	bf44      	itt	mi
 800561a:	f041 0120 	orrmi.w	r1, r1, #32
 800561e:	6021      	strmi	r1, [r4, #0]
 8005620:	b91b      	cbnz	r3, 800562a <_printf_i+0x15e>
 8005622:	6822      	ldr	r2, [r4, #0]
 8005624:	f022 0220 	bic.w	r2, r2, #32
 8005628:	6022      	str	r2, [r4, #0]
 800562a:	2210      	movs	r2, #16
 800562c:	e7b7      	b.n	800559e <_printf_i+0xd2>
 800562e:	064d      	lsls	r5, r1, #25
 8005630:	bf48      	it	mi
 8005632:	b29b      	uxthmi	r3, r3
 8005634:	e7ef      	b.n	8005616 <_printf_i+0x14a>
 8005636:	4665      	mov	r5, ip
 8005638:	fbb3 f1f2 	udiv	r1, r3, r2
 800563c:	fb02 3311 	mls	r3, r2, r1, r3
 8005640:	5cc3      	ldrb	r3, [r0, r3]
 8005642:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005646:	460b      	mov	r3, r1
 8005648:	2900      	cmp	r1, #0
 800564a:	d1f5      	bne.n	8005638 <_printf_i+0x16c>
 800564c:	e7b9      	b.n	80055c2 <_printf_i+0xf6>
 800564e:	6813      	ldr	r3, [r2, #0]
 8005650:	6825      	ldr	r5, [r4, #0]
 8005652:	6961      	ldr	r1, [r4, #20]
 8005654:	1d18      	adds	r0, r3, #4
 8005656:	6010      	str	r0, [r2, #0]
 8005658:	0628      	lsls	r0, r5, #24
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	d501      	bpl.n	8005662 <_printf_i+0x196>
 800565e:	6019      	str	r1, [r3, #0]
 8005660:	e002      	b.n	8005668 <_printf_i+0x19c>
 8005662:	066a      	lsls	r2, r5, #25
 8005664:	d5fb      	bpl.n	800565e <_printf_i+0x192>
 8005666:	8019      	strh	r1, [r3, #0]
 8005668:	2300      	movs	r3, #0
 800566a:	6123      	str	r3, [r4, #16]
 800566c:	4665      	mov	r5, ip
 800566e:	e7b9      	b.n	80055e4 <_printf_i+0x118>
 8005670:	6813      	ldr	r3, [r2, #0]
 8005672:	1d19      	adds	r1, r3, #4
 8005674:	6011      	str	r1, [r2, #0]
 8005676:	681d      	ldr	r5, [r3, #0]
 8005678:	6862      	ldr	r2, [r4, #4]
 800567a:	2100      	movs	r1, #0
 800567c:	4628      	mov	r0, r5
 800567e:	f7fa fdaf 	bl	80001e0 <memchr>
 8005682:	b108      	cbz	r0, 8005688 <_printf_i+0x1bc>
 8005684:	1b40      	subs	r0, r0, r5
 8005686:	6060      	str	r0, [r4, #4]
 8005688:	6863      	ldr	r3, [r4, #4]
 800568a:	6123      	str	r3, [r4, #16]
 800568c:	2300      	movs	r3, #0
 800568e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005692:	e7a7      	b.n	80055e4 <_printf_i+0x118>
 8005694:	6923      	ldr	r3, [r4, #16]
 8005696:	462a      	mov	r2, r5
 8005698:	4639      	mov	r1, r7
 800569a:	4630      	mov	r0, r6
 800569c:	47c0      	blx	r8
 800569e:	3001      	adds	r0, #1
 80056a0:	d0aa      	beq.n	80055f8 <_printf_i+0x12c>
 80056a2:	6823      	ldr	r3, [r4, #0]
 80056a4:	079b      	lsls	r3, r3, #30
 80056a6:	d413      	bmi.n	80056d0 <_printf_i+0x204>
 80056a8:	68e0      	ldr	r0, [r4, #12]
 80056aa:	9b03      	ldr	r3, [sp, #12]
 80056ac:	4298      	cmp	r0, r3
 80056ae:	bfb8      	it	lt
 80056b0:	4618      	movlt	r0, r3
 80056b2:	e7a3      	b.n	80055fc <_printf_i+0x130>
 80056b4:	2301      	movs	r3, #1
 80056b6:	464a      	mov	r2, r9
 80056b8:	4639      	mov	r1, r7
 80056ba:	4630      	mov	r0, r6
 80056bc:	47c0      	blx	r8
 80056be:	3001      	adds	r0, #1
 80056c0:	d09a      	beq.n	80055f8 <_printf_i+0x12c>
 80056c2:	3501      	adds	r5, #1
 80056c4:	68e3      	ldr	r3, [r4, #12]
 80056c6:	9a03      	ldr	r2, [sp, #12]
 80056c8:	1a9b      	subs	r3, r3, r2
 80056ca:	42ab      	cmp	r3, r5
 80056cc:	dcf2      	bgt.n	80056b4 <_printf_i+0x1e8>
 80056ce:	e7eb      	b.n	80056a8 <_printf_i+0x1dc>
 80056d0:	2500      	movs	r5, #0
 80056d2:	f104 0919 	add.w	r9, r4, #25
 80056d6:	e7f5      	b.n	80056c4 <_printf_i+0x1f8>
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d1ac      	bne.n	8005636 <_printf_i+0x16a>
 80056dc:	7803      	ldrb	r3, [r0, #0]
 80056de:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80056e2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80056e6:	e76c      	b.n	80055c2 <_printf_i+0xf6>
 80056e8:	080059dd 	.word	0x080059dd
 80056ec:	080059ee 	.word	0x080059ee

080056f0 <memmove>:
 80056f0:	4288      	cmp	r0, r1
 80056f2:	b510      	push	{r4, lr}
 80056f4:	eb01 0302 	add.w	r3, r1, r2
 80056f8:	d807      	bhi.n	800570a <memmove+0x1a>
 80056fa:	1e42      	subs	r2, r0, #1
 80056fc:	4299      	cmp	r1, r3
 80056fe:	d00a      	beq.n	8005716 <memmove+0x26>
 8005700:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005704:	f802 4f01 	strb.w	r4, [r2, #1]!
 8005708:	e7f8      	b.n	80056fc <memmove+0xc>
 800570a:	4283      	cmp	r3, r0
 800570c:	d9f5      	bls.n	80056fa <memmove+0xa>
 800570e:	1881      	adds	r1, r0, r2
 8005710:	1ad2      	subs	r2, r2, r3
 8005712:	42d3      	cmn	r3, r2
 8005714:	d100      	bne.n	8005718 <memmove+0x28>
 8005716:	bd10      	pop	{r4, pc}
 8005718:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800571c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8005720:	e7f7      	b.n	8005712 <memmove+0x22>
	...

08005724 <_free_r>:
 8005724:	b538      	push	{r3, r4, r5, lr}
 8005726:	4605      	mov	r5, r0
 8005728:	2900      	cmp	r1, #0
 800572a:	d045      	beq.n	80057b8 <_free_r+0x94>
 800572c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005730:	1f0c      	subs	r4, r1, #4
 8005732:	2b00      	cmp	r3, #0
 8005734:	bfb8      	it	lt
 8005736:	18e4      	addlt	r4, r4, r3
 8005738:	f000 f8d2 	bl	80058e0 <__malloc_lock>
 800573c:	4a1f      	ldr	r2, [pc, #124]	; (80057bc <_free_r+0x98>)
 800573e:	6813      	ldr	r3, [r2, #0]
 8005740:	4610      	mov	r0, r2
 8005742:	b933      	cbnz	r3, 8005752 <_free_r+0x2e>
 8005744:	6063      	str	r3, [r4, #4]
 8005746:	6014      	str	r4, [r2, #0]
 8005748:	4628      	mov	r0, r5
 800574a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800574e:	f000 b8c8 	b.w	80058e2 <__malloc_unlock>
 8005752:	42a3      	cmp	r3, r4
 8005754:	d90c      	bls.n	8005770 <_free_r+0x4c>
 8005756:	6821      	ldr	r1, [r4, #0]
 8005758:	1862      	adds	r2, r4, r1
 800575a:	4293      	cmp	r3, r2
 800575c:	bf04      	itt	eq
 800575e:	681a      	ldreq	r2, [r3, #0]
 8005760:	685b      	ldreq	r3, [r3, #4]
 8005762:	6063      	str	r3, [r4, #4]
 8005764:	bf04      	itt	eq
 8005766:	1852      	addeq	r2, r2, r1
 8005768:	6022      	streq	r2, [r4, #0]
 800576a:	6004      	str	r4, [r0, #0]
 800576c:	e7ec      	b.n	8005748 <_free_r+0x24>
 800576e:	4613      	mov	r3, r2
 8005770:	685a      	ldr	r2, [r3, #4]
 8005772:	b10a      	cbz	r2, 8005778 <_free_r+0x54>
 8005774:	42a2      	cmp	r2, r4
 8005776:	d9fa      	bls.n	800576e <_free_r+0x4a>
 8005778:	6819      	ldr	r1, [r3, #0]
 800577a:	1858      	adds	r0, r3, r1
 800577c:	42a0      	cmp	r0, r4
 800577e:	d10b      	bne.n	8005798 <_free_r+0x74>
 8005780:	6820      	ldr	r0, [r4, #0]
 8005782:	4401      	add	r1, r0
 8005784:	1858      	adds	r0, r3, r1
 8005786:	4282      	cmp	r2, r0
 8005788:	6019      	str	r1, [r3, #0]
 800578a:	d1dd      	bne.n	8005748 <_free_r+0x24>
 800578c:	6810      	ldr	r0, [r2, #0]
 800578e:	6852      	ldr	r2, [r2, #4]
 8005790:	605a      	str	r2, [r3, #4]
 8005792:	4401      	add	r1, r0
 8005794:	6019      	str	r1, [r3, #0]
 8005796:	e7d7      	b.n	8005748 <_free_r+0x24>
 8005798:	d902      	bls.n	80057a0 <_free_r+0x7c>
 800579a:	230c      	movs	r3, #12
 800579c:	602b      	str	r3, [r5, #0]
 800579e:	e7d3      	b.n	8005748 <_free_r+0x24>
 80057a0:	6820      	ldr	r0, [r4, #0]
 80057a2:	1821      	adds	r1, r4, r0
 80057a4:	428a      	cmp	r2, r1
 80057a6:	bf04      	itt	eq
 80057a8:	6811      	ldreq	r1, [r2, #0]
 80057aa:	6852      	ldreq	r2, [r2, #4]
 80057ac:	6062      	str	r2, [r4, #4]
 80057ae:	bf04      	itt	eq
 80057b0:	1809      	addeq	r1, r1, r0
 80057b2:	6021      	streq	r1, [r4, #0]
 80057b4:	605c      	str	r4, [r3, #4]
 80057b6:	e7c7      	b.n	8005748 <_free_r+0x24>
 80057b8:	bd38      	pop	{r3, r4, r5, pc}
 80057ba:	bf00      	nop
 80057bc:	2000403c 	.word	0x2000403c

080057c0 <_malloc_r>:
 80057c0:	b570      	push	{r4, r5, r6, lr}
 80057c2:	1ccd      	adds	r5, r1, #3
 80057c4:	f025 0503 	bic.w	r5, r5, #3
 80057c8:	3508      	adds	r5, #8
 80057ca:	2d0c      	cmp	r5, #12
 80057cc:	bf38      	it	cc
 80057ce:	250c      	movcc	r5, #12
 80057d0:	2d00      	cmp	r5, #0
 80057d2:	4606      	mov	r6, r0
 80057d4:	db01      	blt.n	80057da <_malloc_r+0x1a>
 80057d6:	42a9      	cmp	r1, r5
 80057d8:	d903      	bls.n	80057e2 <_malloc_r+0x22>
 80057da:	230c      	movs	r3, #12
 80057dc:	6033      	str	r3, [r6, #0]
 80057de:	2000      	movs	r0, #0
 80057e0:	bd70      	pop	{r4, r5, r6, pc}
 80057e2:	f000 f87d 	bl	80058e0 <__malloc_lock>
 80057e6:	4a21      	ldr	r2, [pc, #132]	; (800586c <_malloc_r+0xac>)
 80057e8:	6814      	ldr	r4, [r2, #0]
 80057ea:	4621      	mov	r1, r4
 80057ec:	b991      	cbnz	r1, 8005814 <_malloc_r+0x54>
 80057ee:	4c20      	ldr	r4, [pc, #128]	; (8005870 <_malloc_r+0xb0>)
 80057f0:	6823      	ldr	r3, [r4, #0]
 80057f2:	b91b      	cbnz	r3, 80057fc <_malloc_r+0x3c>
 80057f4:	4630      	mov	r0, r6
 80057f6:	f000 f863 	bl	80058c0 <_sbrk_r>
 80057fa:	6020      	str	r0, [r4, #0]
 80057fc:	4629      	mov	r1, r5
 80057fe:	4630      	mov	r0, r6
 8005800:	f000 f85e 	bl	80058c0 <_sbrk_r>
 8005804:	1c43      	adds	r3, r0, #1
 8005806:	d124      	bne.n	8005852 <_malloc_r+0x92>
 8005808:	230c      	movs	r3, #12
 800580a:	6033      	str	r3, [r6, #0]
 800580c:	4630      	mov	r0, r6
 800580e:	f000 f868 	bl	80058e2 <__malloc_unlock>
 8005812:	e7e4      	b.n	80057de <_malloc_r+0x1e>
 8005814:	680b      	ldr	r3, [r1, #0]
 8005816:	1b5b      	subs	r3, r3, r5
 8005818:	d418      	bmi.n	800584c <_malloc_r+0x8c>
 800581a:	2b0b      	cmp	r3, #11
 800581c:	d90f      	bls.n	800583e <_malloc_r+0x7e>
 800581e:	600b      	str	r3, [r1, #0]
 8005820:	50cd      	str	r5, [r1, r3]
 8005822:	18cc      	adds	r4, r1, r3
 8005824:	4630      	mov	r0, r6
 8005826:	f000 f85c 	bl	80058e2 <__malloc_unlock>
 800582a:	f104 000b 	add.w	r0, r4, #11
 800582e:	1d23      	adds	r3, r4, #4
 8005830:	f020 0007 	bic.w	r0, r0, #7
 8005834:	1ac3      	subs	r3, r0, r3
 8005836:	d0d3      	beq.n	80057e0 <_malloc_r+0x20>
 8005838:	425a      	negs	r2, r3
 800583a:	50e2      	str	r2, [r4, r3]
 800583c:	e7d0      	b.n	80057e0 <_malloc_r+0x20>
 800583e:	428c      	cmp	r4, r1
 8005840:	684b      	ldr	r3, [r1, #4]
 8005842:	bf16      	itet	ne
 8005844:	6063      	strne	r3, [r4, #4]
 8005846:	6013      	streq	r3, [r2, #0]
 8005848:	460c      	movne	r4, r1
 800584a:	e7eb      	b.n	8005824 <_malloc_r+0x64>
 800584c:	460c      	mov	r4, r1
 800584e:	6849      	ldr	r1, [r1, #4]
 8005850:	e7cc      	b.n	80057ec <_malloc_r+0x2c>
 8005852:	1cc4      	adds	r4, r0, #3
 8005854:	f024 0403 	bic.w	r4, r4, #3
 8005858:	42a0      	cmp	r0, r4
 800585a:	d005      	beq.n	8005868 <_malloc_r+0xa8>
 800585c:	1a21      	subs	r1, r4, r0
 800585e:	4630      	mov	r0, r6
 8005860:	f000 f82e 	bl	80058c0 <_sbrk_r>
 8005864:	3001      	adds	r0, #1
 8005866:	d0cf      	beq.n	8005808 <_malloc_r+0x48>
 8005868:	6025      	str	r5, [r4, #0]
 800586a:	e7db      	b.n	8005824 <_malloc_r+0x64>
 800586c:	2000403c 	.word	0x2000403c
 8005870:	20004040 	.word	0x20004040

08005874 <_realloc_r>:
 8005874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005876:	4607      	mov	r7, r0
 8005878:	4614      	mov	r4, r2
 800587a:	460e      	mov	r6, r1
 800587c:	b921      	cbnz	r1, 8005888 <_realloc_r+0x14>
 800587e:	4611      	mov	r1, r2
 8005880:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005884:	f7ff bf9c 	b.w	80057c0 <_malloc_r>
 8005888:	b922      	cbnz	r2, 8005894 <_realloc_r+0x20>
 800588a:	f7ff ff4b 	bl	8005724 <_free_r>
 800588e:	4625      	mov	r5, r4
 8005890:	4628      	mov	r0, r5
 8005892:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005894:	f000 f826 	bl	80058e4 <_malloc_usable_size_r>
 8005898:	42a0      	cmp	r0, r4
 800589a:	d20f      	bcs.n	80058bc <_realloc_r+0x48>
 800589c:	4621      	mov	r1, r4
 800589e:	4638      	mov	r0, r7
 80058a0:	f7ff ff8e 	bl	80057c0 <_malloc_r>
 80058a4:	4605      	mov	r5, r0
 80058a6:	2800      	cmp	r0, #0
 80058a8:	d0f2      	beq.n	8005890 <_realloc_r+0x1c>
 80058aa:	4631      	mov	r1, r6
 80058ac:	4622      	mov	r2, r4
 80058ae:	f7ff fc11 	bl	80050d4 <memcpy>
 80058b2:	4631      	mov	r1, r6
 80058b4:	4638      	mov	r0, r7
 80058b6:	f7ff ff35 	bl	8005724 <_free_r>
 80058ba:	e7e9      	b.n	8005890 <_realloc_r+0x1c>
 80058bc:	4635      	mov	r5, r6
 80058be:	e7e7      	b.n	8005890 <_realloc_r+0x1c>

080058c0 <_sbrk_r>:
 80058c0:	b538      	push	{r3, r4, r5, lr}
 80058c2:	4c06      	ldr	r4, [pc, #24]	; (80058dc <_sbrk_r+0x1c>)
 80058c4:	2300      	movs	r3, #0
 80058c6:	4605      	mov	r5, r0
 80058c8:	4608      	mov	r0, r1
 80058ca:	6023      	str	r3, [r4, #0]
 80058cc:	f7fb fb36 	bl	8000f3c <_sbrk>
 80058d0:	1c43      	adds	r3, r0, #1
 80058d2:	d102      	bne.n	80058da <_sbrk_r+0x1a>
 80058d4:	6823      	ldr	r3, [r4, #0]
 80058d6:	b103      	cbz	r3, 80058da <_sbrk_r+0x1a>
 80058d8:	602b      	str	r3, [r5, #0]
 80058da:	bd38      	pop	{r3, r4, r5, pc}
 80058dc:	20004548 	.word	0x20004548

080058e0 <__malloc_lock>:
 80058e0:	4770      	bx	lr

080058e2 <__malloc_unlock>:
 80058e2:	4770      	bx	lr

080058e4 <_malloc_usable_size_r>:
 80058e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80058e8:	1f18      	subs	r0, r3, #4
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	bfbc      	itt	lt
 80058ee:	580b      	ldrlt	r3, [r1, r0]
 80058f0:	18c0      	addlt	r0, r0, r3
 80058f2:	4770      	bx	lr

080058f4 <_init>:
 80058f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058f6:	bf00      	nop
 80058f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058fa:	bc08      	pop	{r3}
 80058fc:	469e      	mov	lr, r3
 80058fe:	4770      	bx	lr

08005900 <_fini>:
 8005900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005902:	bf00      	nop
 8005904:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005906:	bc08      	pop	{r3}
 8005908:	469e      	mov	lr, r3
 800590a:	4770      	bx	lr
